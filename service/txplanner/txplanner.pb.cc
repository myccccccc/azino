// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/txplanner/txplanner.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/txplanner/txplanner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace azino {
namespace txplanner {

namespace {

const ::google::protobuf::Descriptor* BeginTxRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginTxRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginTxResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginTxResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitTxRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitTxRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitTxResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitTxResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AbortTxRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AbortTxRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AbortTxResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AbortTxResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValidateTxRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValidateTxRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValidateTxResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValidateTxResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dep_reflection_ = NULL;
const ::google::protobuf::Descriptor* DepRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DepResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMinATSRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMinATSRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMinATSResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMinATSResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionMetric_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionMetric_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionMetricRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionMetricRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionMetricResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionMetricResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPartitionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPartitionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPartitionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPartitionResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* TxService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* RegionService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* PartitionService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto() {
  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/txplanner/txplanner.proto");
  GOOGLE_CHECK(file != NULL);
  BeginTxRequest_descriptor_ = file->message_type(0);
  static const int BeginTxRequest_offsets_[1] = {
  };
  BeginTxRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BeginTxRequest_descriptor_,
      BeginTxRequest::default_instance_,
      BeginTxRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginTxRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(BeginTxRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginTxRequest, _internal_metadata_),
      -1);
  BeginTxResponse_descriptor_ = file->message_type(1);
  static const int BeginTxResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginTxResponse, txid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginTxResponse, partition_),
  };
  BeginTxResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BeginTxResponse_descriptor_,
      BeginTxResponse::default_instance_,
      BeginTxResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginTxResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(BeginTxResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginTxResponse, _internal_metadata_),
      -1);
  CommitTxRequest_descriptor_ = file->message_type(2);
  static const int CommitTxRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitTxRequest, txid_),
  };
  CommitTxRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitTxRequest_descriptor_,
      CommitTxRequest::default_instance_,
      CommitTxRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitTxRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CommitTxRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitTxRequest, _internal_metadata_),
      -1);
  CommitTxResponse_descriptor_ = file->message_type(3);
  static const int CommitTxResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitTxResponse, txid_),
  };
  CommitTxResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitTxResponse_descriptor_,
      CommitTxResponse::default_instance_,
      CommitTxResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitTxResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CommitTxResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitTxResponse, _internal_metadata_),
      -1);
  AbortTxRequest_descriptor_ = file->message_type(4);
  static const int AbortTxRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbortTxRequest, txid_),
  };
  AbortTxRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AbortTxRequest_descriptor_,
      AbortTxRequest::default_instance_,
      AbortTxRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbortTxRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(AbortTxRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbortTxRequest, _internal_metadata_),
      -1);
  AbortTxResponse_descriptor_ = file->message_type(5);
  static const int AbortTxResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbortTxResponse, txid_),
  };
  AbortTxResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AbortTxResponse_descriptor_,
      AbortTxResponse::default_instance_,
      AbortTxResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbortTxResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(AbortTxResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbortTxResponse, _internal_metadata_),
      -1);
  ValidateTxRequest_descriptor_ = file->message_type(6);
  static const int ValidateTxRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateTxRequest, txid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateTxRequest, is_early_validation_),
  };
  ValidateTxRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ValidateTxRequest_descriptor_,
      ValidateTxRequest::default_instance_,
      ValidateTxRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateTxRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(ValidateTxRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateTxRequest, _internal_metadata_),
      -1);
  ValidateTxResponse_descriptor_ = file->message_type(7);
  static const int ValidateTxResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateTxResponse, txid_),
  };
  ValidateTxResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ValidateTxResponse_descriptor_,
      ValidateTxResponse::default_instance_,
      ValidateTxResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateTxResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(ValidateTxResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateTxResponse, _internal_metadata_),
      -1);
  Dep_descriptor_ = file->message_type(8);
  static const int Dep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dep, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dep, t1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dep, t2_),
  };
  Dep_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Dep_descriptor_,
      Dep::default_instance_,
      Dep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dep, _has_bits_[0]),
      -1,
      -1,
      sizeof(Dep),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dep, _internal_metadata_),
      -1);
  DepRequest_descriptor_ = file->message_type(9);
  static const int DepRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepRequest, deps_),
  };
  DepRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DepRequest_descriptor_,
      DepRequest::default_instance_,
      DepRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(DepRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepRequest, _internal_metadata_),
      -1);
  DepResponse_descriptor_ = file->message_type(10);
  static const int DepResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepResponse, error_code_),
  };
  DepResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DepResponse_descriptor_,
      DepResponse::default_instance_,
      DepResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(DepResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepResponse, _internal_metadata_),
      -1);
  GetMinATSRequest_descriptor_ = file->message_type(11);
  static const int GetMinATSRequest_offsets_[1] = {
  };
  GetMinATSRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetMinATSRequest_descriptor_,
      GetMinATSRequest::default_instance_,
      GetMinATSRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMinATSRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetMinATSRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMinATSRequest, _internal_metadata_),
      -1);
  GetMinATSResponse_descriptor_ = file->message_type(12);
  static const int GetMinATSResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMinATSResponse, min_ats_),
  };
  GetMinATSResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetMinATSResponse_descriptor_,
      GetMinATSResponse::default_instance_,
      GetMinATSResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMinATSResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetMinATSResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMinATSResponse, _internal_metadata_),
      -1);
  RegionMetric_descriptor_ = file->message_type(13);
  static const int RegionMetric_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionMetric, read_qps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionMetric, write_qps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionMetric, pessimism_key_),
  };
  RegionMetric_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionMetric_descriptor_,
      RegionMetric::default_instance_,
      RegionMetric_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionMetric, _has_bits_[0]),
      -1,
      -1,
      sizeof(RegionMetric),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionMetric, _internal_metadata_),
      -1);
  RegionMetricRequest_descriptor_ = file->message_type(14);
  static const int RegionMetricRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionMetricRequest, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionMetricRequest, metric_),
  };
  RegionMetricRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionMetricRequest_descriptor_,
      RegionMetricRequest::default_instance_,
      RegionMetricRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionMetricRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(RegionMetricRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionMetricRequest, _internal_metadata_),
      -1);
  RegionMetricResponse_descriptor_ = file->message_type(15);
  static const int RegionMetricResponse_offsets_[1] = {
  };
  RegionMetricResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionMetricResponse_descriptor_,
      RegionMetricResponse::default_instance_,
      RegionMetricResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionMetricResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(RegionMetricResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionMetricResponse, _internal_metadata_),
      -1);
  GetPartitionRequest_descriptor_ = file->message_type(16);
  static const int GetPartitionRequest_offsets_[1] = {
  };
  GetPartitionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetPartitionRequest_descriptor_,
      GetPartitionRequest::default_instance_,
      GetPartitionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartitionRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetPartitionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartitionRequest, _internal_metadata_),
      -1);
  GetPartitionResponse_descriptor_ = file->message_type(17);
  static const int GetPartitionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartitionResponse, partition_),
  };
  GetPartitionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetPartitionResponse_descriptor_,
      GetPartitionResponse::default_instance_,
      GetPartitionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartitionResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetPartitionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartitionResponse, _internal_metadata_),
      -1);
  TxService_descriptor_ = file->service(0);
  RegionService_descriptor_ = file->service(1);
  PartitionService_descriptor_ = file->service(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BeginTxRequest_descriptor_, &BeginTxRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BeginTxResponse_descriptor_, &BeginTxResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitTxRequest_descriptor_, &CommitTxRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitTxResponse_descriptor_, &CommitTxResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AbortTxRequest_descriptor_, &AbortTxRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AbortTxResponse_descriptor_, &AbortTxResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ValidateTxRequest_descriptor_, &ValidateTxRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ValidateTxResponse_descriptor_, &ValidateTxResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Dep_descriptor_, &Dep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DepRequest_descriptor_, &DepRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DepResponse_descriptor_, &DepResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetMinATSRequest_descriptor_, &GetMinATSRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetMinATSResponse_descriptor_, &GetMinATSResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionMetric_descriptor_, &RegionMetric::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionMetricRequest_descriptor_, &RegionMetricRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionMetricResponse_descriptor_, &RegionMetricResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetPartitionRequest_descriptor_, &GetPartitionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetPartitionResponse_descriptor_, &GetPartitionResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto() {
  delete BeginTxRequest::default_instance_;
  delete BeginTxRequest_reflection_;
  delete BeginTxResponse::default_instance_;
  delete BeginTxResponse_reflection_;
  delete CommitTxRequest::default_instance_;
  delete CommitTxRequest_reflection_;
  delete CommitTxResponse::default_instance_;
  delete CommitTxResponse_reflection_;
  delete AbortTxRequest::default_instance_;
  delete AbortTxRequest_reflection_;
  delete AbortTxResponse::default_instance_;
  delete AbortTxResponse_reflection_;
  delete ValidateTxRequest::default_instance_;
  delete ValidateTxRequest_reflection_;
  delete ValidateTxResponse::default_instance_;
  delete ValidateTxResponse_reflection_;
  delete Dep::default_instance_;
  delete Dep_reflection_;
  delete DepRequest::default_instance_;
  delete DepRequest_reflection_;
  delete DepResponse::default_instance_;
  delete DepResponse_reflection_;
  delete GetMinATSRequest::default_instance_;
  delete GetMinATSRequest_reflection_;
  delete GetMinATSResponse::default_instance_;
  delete GetMinATSResponse_reflection_;
  delete RegionMetric::default_instance_;
  delete RegionMetric_reflection_;
  delete RegionMetricRequest::default_instance_;
  delete RegionMetricRequest_reflection_;
  delete RegionMetricResponse::default_instance_;
  delete RegionMetricResponse_reflection_;
  delete GetPartitionRequest::default_instance_;
  delete GetPartitionRequest_reflection_;
  delete GetPartitionResponse::default_instance_;
  delete GetPartitionResponse_reflection_;
}

void protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::azino::protobuf_AddDesc_service_2ftx_2eproto();
  ::azino::protobuf_AddDesc_service_2fpartition_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!service/txplanner/txplanner.proto\022\017azi"
    "no.txplanner\032\020service/tx.proto\032\027service/"
    "partition.proto\"\020\n\016BeginTxRequest\"[\n\017Beg"
    "inTxResponse\022!\n\004txid\030\001 \001(\0132\023.azino.TxIde"
    "ntifier\022%\n\tpartition\030\002 \001(\0132\022.azino.Parti"
    "tionPB\"4\n\017CommitTxRequest\022!\n\004txid\030\001 \001(\0132"
    "\023.azino.TxIdentifier\"5\n\020CommitTxResponse"
    "\022!\n\004txid\030\001 \001(\0132\023.azino.TxIdentifier\"3\n\016A"
    "bortTxRequest\022!\n\004txid\030\001 \001(\0132\023.azino.TxId"
    "entifier\"4\n\017AbortTxResponse\022!\n\004txid\030\001 \001("
    "\0132\023.azino.TxIdentifier\"S\n\021ValidateTxRequ"
    "est\022!\n\004txid\030\001 \001(\0132\023.azino.TxIdentifier\022\033"
    "\n\023is_early_validation\030\002 \001(\010\"7\n\022ValidateT"
    "xResponse\022!\n\004txid\030\001 \001(\0132\023.azino.TxIdenti"
    "fier\"T\n\003Dep\022\013\n\003key\030\001 \001(\t\022\037\n\002t1\030\002 \001(\0132\023.a"
    "zino.TxIdentifier\022\037\n\002t2\030\003 \001(\0132\023.azino.Tx"
    "Identifier\"0\n\nDepRequest\022\"\n\004deps\030\001 \003(\0132\024"
    ".azino.txplanner.Dep\"!\n\013DepResponse\022\022\n\ne"
    "rror_code\030\001 \001(\004\"\022\n\020GetMinATSRequest\"$\n\021G"
    "etMinATSResponse\022\017\n\007min_ats\030\001 \001(\004\"J\n\014Reg"
    "ionMetric\022\020\n\010read_qps\030\001 \001(\003\022\021\n\twrite_qps"
    "\030\002 \001(\003\022\025\n\rpessimism_key\030\003 \003(\t\"c\n\023RegionM"
    "etricRequest\022\035\n\005range\030\001 \001(\0132\016.azino.Rang"
    "ePB\022-\n\006metric\030\002 \001(\0132\035.azino.txplanner.Re"
    "gionMetric\"\026\n\024RegionMetricResponse\"\025\n\023Ge"
    "tPartitionRequest\"=\n\024GetPartitionRespons"
    "e\022%\n\tpartition\030\001 \001(\0132\022.azino.PartitionPB"
    "2\317\002\n\tTxService\022L\n\007BeginTx\022\037.azino.txplan"
    "ner.BeginTxRequest\032 .azino.txplanner.Beg"
    "inTxResponse\022O\n\010CommitTx\022 .azino.txplann"
    "er.CommitTxRequest\032!.azino.txplanner.Com"
    "mitTxResponse\022L\n\007AbortTx\022\037.azino.txplann"
    "er.AbortTxRequest\032 .azino.txplanner.Abor"
    "tTxResponse\022U\n\nValidateTx\022\".azino.txplan"
    "ner.ValidateTxRequest\032#.azino.txplanner."
    "ValidateTxResponse2\204\002\n\rRegionService\022B\n\005"
    "RWDep\022\033.azino.txplanner.DepRequest\032\034.azi"
    "no.txplanner.DepResponse\022R\n\tGetMinATS\022!."
    "azino.txplanner.GetMinATSRequest\032\".azino"
    ".txplanner.GetMinATSResponse\022[\n\014RegionMe"
    "tric\022$.azino.txplanner.RegionMetricReque"
    "st\032%.azino.txplanner.RegionMetricRespons"
    "e2o\n\020PartitionService\022[\n\014GetPartition\022$."
    "azino.txplanner.GetPartitionRequest\032%.az"
    "ino.txplanner.GetPartitionResponseB\003\200\001\001", 1799);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/txplanner/txplanner.proto", &protobuf_RegisterTypes);
  BeginTxRequest::default_instance_ = new BeginTxRequest();
  BeginTxResponse::default_instance_ = new BeginTxResponse();
  CommitTxRequest::default_instance_ = new CommitTxRequest();
  CommitTxResponse::default_instance_ = new CommitTxResponse();
  AbortTxRequest::default_instance_ = new AbortTxRequest();
  AbortTxResponse::default_instance_ = new AbortTxResponse();
  ValidateTxRequest::default_instance_ = new ValidateTxRequest();
  ValidateTxResponse::default_instance_ = new ValidateTxResponse();
  Dep::default_instance_ = new Dep();
  DepRequest::default_instance_ = new DepRequest();
  DepResponse::default_instance_ = new DepResponse();
  GetMinATSRequest::default_instance_ = new GetMinATSRequest();
  GetMinATSResponse::default_instance_ = new GetMinATSResponse();
  RegionMetric::default_instance_ = new RegionMetric();
  RegionMetricRequest::default_instance_ = new RegionMetricRequest();
  RegionMetricResponse::default_instance_ = new RegionMetricResponse();
  GetPartitionRequest::default_instance_ = new GetPartitionRequest();
  GetPartitionResponse::default_instance_ = new GetPartitionResponse();
  BeginTxRequest::default_instance_->InitAsDefaultInstance();
  BeginTxResponse::default_instance_->InitAsDefaultInstance();
  CommitTxRequest::default_instance_->InitAsDefaultInstance();
  CommitTxResponse::default_instance_->InitAsDefaultInstance();
  AbortTxRequest::default_instance_->InitAsDefaultInstance();
  AbortTxResponse::default_instance_->InitAsDefaultInstance();
  ValidateTxRequest::default_instance_->InitAsDefaultInstance();
  ValidateTxResponse::default_instance_->InitAsDefaultInstance();
  Dep::default_instance_->InitAsDefaultInstance();
  DepRequest::default_instance_->InitAsDefaultInstance();
  DepResponse::default_instance_->InitAsDefaultInstance();
  GetMinATSRequest::default_instance_->InitAsDefaultInstance();
  GetMinATSResponse::default_instance_->InitAsDefaultInstance();
  RegionMetric::default_instance_->InitAsDefaultInstance();
  RegionMetricRequest::default_instance_->InitAsDefaultInstance();
  RegionMetricResponse::default_instance_->InitAsDefaultInstance();
  GetPartitionRequest::default_instance_->InitAsDefaultInstance();
  GetPartitionResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2ftxplanner_2ftxplanner_2eproto {
  StaticDescriptorInitializer_service_2ftxplanner_2ftxplanner_2eproto() {
    protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  }
} static_descriptor_initializer_service_2ftxplanner_2ftxplanner_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginTxRequest::BeginTxRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.BeginTxRequest)
}

void BeginTxRequest::InitAsDefaultInstance() {
}

BeginTxRequest::BeginTxRequest(const BeginTxRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.BeginTxRequest)
}

void BeginTxRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginTxRequest::~BeginTxRequest() {
  // @@protoc_insertion_point(destructor:azino.txplanner.BeginTxRequest)
  SharedDtor();
}

void BeginTxRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeginTxRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginTxRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginTxRequest_descriptor_;
}

const BeginTxRequest& BeginTxRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

BeginTxRequest* BeginTxRequest::default_instance_ = NULL;

BeginTxRequest* BeginTxRequest::New(::google::protobuf::Arena* arena) const {
  BeginTxRequest* n = new BeginTxRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeginTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.BeginTxRequest)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BeginTxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.BeginTxRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.BeginTxRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.BeginTxRequest)
  return false;
#undef DO_
}

void BeginTxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.BeginTxRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.BeginTxRequest)
}

::google::protobuf::uint8* BeginTxRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.BeginTxRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.BeginTxRequest)
  return target;
}

int BeginTxRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.BeginTxRequest)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginTxRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.BeginTxRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BeginTxRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BeginTxRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.BeginTxRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.BeginTxRequest)
    MergeFrom(*source);
  }
}

void BeginTxRequest::MergeFrom(const BeginTxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.BeginTxRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BeginTxRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.BeginTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginTxRequest::CopyFrom(const BeginTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.BeginTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginTxRequest::IsInitialized() const {

  return true;
}

void BeginTxRequest::Swap(BeginTxRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginTxRequest::InternalSwap(BeginTxRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeginTxRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginTxRequest_descriptor_;
  metadata.reflection = BeginTxRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeginTxRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginTxResponse::kTxidFieldNumber;
const int BeginTxResponse::kPartitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginTxResponse::BeginTxResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.BeginTxResponse)
}

void BeginTxResponse::InitAsDefaultInstance() {
  txid_ = const_cast< ::azino::TxIdentifier*>(&::azino::TxIdentifier::default_instance());
  partition_ = const_cast< ::azino::PartitionPB*>(&::azino::PartitionPB::default_instance());
}

BeginTxResponse::BeginTxResponse(const BeginTxResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.BeginTxResponse)
}

void BeginTxResponse::SharedCtor() {
  _cached_size_ = 0;
  txid_ = NULL;
  partition_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginTxResponse::~BeginTxResponse() {
  // @@protoc_insertion_point(destructor:azino.txplanner.BeginTxResponse)
  SharedDtor();
}

void BeginTxResponse::SharedDtor() {
  if (this != default_instance_) {
    delete txid_;
    delete partition_;
  }
}

void BeginTxResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginTxResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginTxResponse_descriptor_;
}

const BeginTxResponse& BeginTxResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

BeginTxResponse* BeginTxResponse::default_instance_ = NULL;

BeginTxResponse* BeginTxResponse::New(::google::protobuf::Arena* arena) const {
  BeginTxResponse* n = new BeginTxResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeginTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.BeginTxResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_txid()) {
      if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
    }
    if (has_partition()) {
      if (partition_ != NULL) partition_->::azino::PartitionPB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BeginTxResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.BeginTxResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxIdentifier txid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_partition;
        break;
      }

      // optional .azino.PartitionPB partition = 2;
      case 2: {
        if (tag == 18) {
         parse_partition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.BeginTxResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.BeginTxResponse)
  return false;
#undef DO_
}

void BeginTxResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.BeginTxResponse)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->txid_, output);
  }

  // optional .azino.PartitionPB partition = 2;
  if (has_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->partition_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.BeginTxResponse)
}

::google::protobuf::uint8* BeginTxResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.BeginTxResponse)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->txid_, false, target);
  }

  // optional .azino.PartitionPB partition = 2;
  if (has_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->partition_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.BeginTxResponse)
  return target;
}

int BeginTxResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.BeginTxResponse)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .azino.TxIdentifier txid = 1;
    if (has_txid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->txid_);
    }

    // optional .azino.PartitionPB partition = 2;
    if (has_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->partition_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginTxResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.BeginTxResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BeginTxResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BeginTxResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.BeginTxResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.BeginTxResponse)
    MergeFrom(*source);
  }
}

void BeginTxResponse::MergeFrom(const BeginTxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.BeginTxResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txid()) {
      mutable_txid()->::azino::TxIdentifier::MergeFrom(from.txid());
    }
    if (from.has_partition()) {
      mutable_partition()->::azino::PartitionPB::MergeFrom(from.partition());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BeginTxResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.BeginTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginTxResponse::CopyFrom(const BeginTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.BeginTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginTxResponse::IsInitialized() const {

  return true;
}

void BeginTxResponse::Swap(BeginTxResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginTxResponse::InternalSwap(BeginTxResponse* other) {
  std::swap(txid_, other->txid_);
  std::swap(partition_, other->partition_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeginTxResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginTxResponse_descriptor_;
  metadata.reflection = BeginTxResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeginTxResponse

// optional .azino.TxIdentifier txid = 1;
bool BeginTxResponse::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BeginTxResponse::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
void BeginTxResponse::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BeginTxResponse::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
const ::azino::TxIdentifier& BeginTxResponse::txid() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.BeginTxResponse.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
::azino::TxIdentifier* BeginTxResponse::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.BeginTxResponse.txid)
  return txid_;
}
::azino::TxIdentifier* BeginTxResponse::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txplanner.BeginTxResponse.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
void BeginTxResponse::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.BeginTxResponse.txid)
}

// optional .azino.PartitionPB partition = 2;
bool BeginTxResponse::has_partition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BeginTxResponse::set_has_partition() {
  _has_bits_[0] |= 0x00000002u;
}
void BeginTxResponse::clear_has_partition() {
  _has_bits_[0] &= ~0x00000002u;
}
void BeginTxResponse::clear_partition() {
  if (partition_ != NULL) partition_->::azino::PartitionPB::Clear();
  clear_has_partition();
}
const ::azino::PartitionPB& BeginTxResponse::partition() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.BeginTxResponse.partition)
  return partition_ != NULL ? *partition_ : *default_instance_->partition_;
}
::azino::PartitionPB* BeginTxResponse::mutable_partition() {
  set_has_partition();
  if (partition_ == NULL) {
    partition_ = new ::azino::PartitionPB;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.BeginTxResponse.partition)
  return partition_;
}
::azino::PartitionPB* BeginTxResponse::release_partition() {
  // @@protoc_insertion_point(field_release:azino.txplanner.BeginTxResponse.partition)
  clear_has_partition();
  ::azino::PartitionPB* temp = partition_;
  partition_ = NULL;
  return temp;
}
void BeginTxResponse::set_allocated_partition(::azino::PartitionPB* partition) {
  delete partition_;
  partition_ = partition;
  if (partition) {
    set_has_partition();
  } else {
    clear_has_partition();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.BeginTxResponse.partition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitTxRequest::kTxidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitTxRequest::CommitTxRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.CommitTxRequest)
}

void CommitTxRequest::InitAsDefaultInstance() {
  txid_ = const_cast< ::azino::TxIdentifier*>(&::azino::TxIdentifier::default_instance());
}

CommitTxRequest::CommitTxRequest(const CommitTxRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.CommitTxRequest)
}

void CommitTxRequest::SharedCtor() {
  _cached_size_ = 0;
  txid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommitTxRequest::~CommitTxRequest() {
  // @@protoc_insertion_point(destructor:azino.txplanner.CommitTxRequest)
  SharedDtor();
}

void CommitTxRequest::SharedDtor() {
  if (this != default_instance_) {
    delete txid_;
  }
}

void CommitTxRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitTxRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitTxRequest_descriptor_;
}

const CommitTxRequest& CommitTxRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

CommitTxRequest* CommitTxRequest::default_instance_ = NULL;

CommitTxRequest* CommitTxRequest::New(::google::protobuf::Arena* arena) const {
  CommitTxRequest* n = new CommitTxRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.CommitTxRequest)
  if (has_txid()) {
    if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CommitTxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.CommitTxRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxIdentifier txid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.CommitTxRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.CommitTxRequest)
  return false;
#undef DO_
}

void CommitTxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.CommitTxRequest)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->txid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.CommitTxRequest)
}

::google::protobuf::uint8* CommitTxRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.CommitTxRequest)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->txid_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.CommitTxRequest)
  return target;
}

int CommitTxRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.CommitTxRequest)
  int total_size = 0;

  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txid_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitTxRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.CommitTxRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CommitTxRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitTxRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.CommitTxRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.CommitTxRequest)
    MergeFrom(*source);
  }
}

void CommitTxRequest::MergeFrom(const CommitTxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.CommitTxRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txid()) {
      mutable_txid()->::azino::TxIdentifier::MergeFrom(from.txid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CommitTxRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.CommitTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitTxRequest::CopyFrom(const CommitTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.CommitTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitTxRequest::IsInitialized() const {

  return true;
}

void CommitTxRequest::Swap(CommitTxRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitTxRequest::InternalSwap(CommitTxRequest* other) {
  std::swap(txid_, other->txid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitTxRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitTxRequest_descriptor_;
  metadata.reflection = CommitTxRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitTxRequest

// optional .azino.TxIdentifier txid = 1;
bool CommitTxRequest::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommitTxRequest::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
void CommitTxRequest::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommitTxRequest::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
const ::azino::TxIdentifier& CommitTxRequest::txid() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.CommitTxRequest.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
::azino::TxIdentifier* CommitTxRequest::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.CommitTxRequest.txid)
  return txid_;
}
::azino::TxIdentifier* CommitTxRequest::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txplanner.CommitTxRequest.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
void CommitTxRequest::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.CommitTxRequest.txid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitTxResponse::kTxidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitTxResponse::CommitTxResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.CommitTxResponse)
}

void CommitTxResponse::InitAsDefaultInstance() {
  txid_ = const_cast< ::azino::TxIdentifier*>(&::azino::TxIdentifier::default_instance());
}

CommitTxResponse::CommitTxResponse(const CommitTxResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.CommitTxResponse)
}

void CommitTxResponse::SharedCtor() {
  _cached_size_ = 0;
  txid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommitTxResponse::~CommitTxResponse() {
  // @@protoc_insertion_point(destructor:azino.txplanner.CommitTxResponse)
  SharedDtor();
}

void CommitTxResponse::SharedDtor() {
  if (this != default_instance_) {
    delete txid_;
  }
}

void CommitTxResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitTxResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitTxResponse_descriptor_;
}

const CommitTxResponse& CommitTxResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

CommitTxResponse* CommitTxResponse::default_instance_ = NULL;

CommitTxResponse* CommitTxResponse::New(::google::protobuf::Arena* arena) const {
  CommitTxResponse* n = new CommitTxResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.CommitTxResponse)
  if (has_txid()) {
    if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CommitTxResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.CommitTxResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxIdentifier txid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.CommitTxResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.CommitTxResponse)
  return false;
#undef DO_
}

void CommitTxResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.CommitTxResponse)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->txid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.CommitTxResponse)
}

::google::protobuf::uint8* CommitTxResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.CommitTxResponse)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->txid_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.CommitTxResponse)
  return target;
}

int CommitTxResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.CommitTxResponse)
  int total_size = 0;

  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txid_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitTxResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.CommitTxResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CommitTxResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitTxResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.CommitTxResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.CommitTxResponse)
    MergeFrom(*source);
  }
}

void CommitTxResponse::MergeFrom(const CommitTxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.CommitTxResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txid()) {
      mutable_txid()->::azino::TxIdentifier::MergeFrom(from.txid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CommitTxResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.CommitTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitTxResponse::CopyFrom(const CommitTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.CommitTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitTxResponse::IsInitialized() const {

  return true;
}

void CommitTxResponse::Swap(CommitTxResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitTxResponse::InternalSwap(CommitTxResponse* other) {
  std::swap(txid_, other->txid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitTxResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitTxResponse_descriptor_;
  metadata.reflection = CommitTxResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitTxResponse

// optional .azino.TxIdentifier txid = 1;
bool CommitTxResponse::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommitTxResponse::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
void CommitTxResponse::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommitTxResponse::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
const ::azino::TxIdentifier& CommitTxResponse::txid() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.CommitTxResponse.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
::azino::TxIdentifier* CommitTxResponse::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.CommitTxResponse.txid)
  return txid_;
}
::azino::TxIdentifier* CommitTxResponse::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txplanner.CommitTxResponse.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
void CommitTxResponse::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.CommitTxResponse.txid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbortTxRequest::kTxidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbortTxRequest::AbortTxRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.AbortTxRequest)
}

void AbortTxRequest::InitAsDefaultInstance() {
  txid_ = const_cast< ::azino::TxIdentifier*>(&::azino::TxIdentifier::default_instance());
}

AbortTxRequest::AbortTxRequest(const AbortTxRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.AbortTxRequest)
}

void AbortTxRequest::SharedCtor() {
  _cached_size_ = 0;
  txid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AbortTxRequest::~AbortTxRequest() {
  // @@protoc_insertion_point(destructor:azino.txplanner.AbortTxRequest)
  SharedDtor();
}

void AbortTxRequest::SharedDtor() {
  if (this != default_instance_) {
    delete txid_;
  }
}

void AbortTxRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbortTxRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbortTxRequest_descriptor_;
}

const AbortTxRequest& AbortTxRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

AbortTxRequest* AbortTxRequest::default_instance_ = NULL;

AbortTxRequest* AbortTxRequest::New(::google::protobuf::Arena* arena) const {
  AbortTxRequest* n = new AbortTxRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbortTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.AbortTxRequest)
  if (has_txid()) {
    if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AbortTxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.AbortTxRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxIdentifier txid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.AbortTxRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.AbortTxRequest)
  return false;
#undef DO_
}

void AbortTxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.AbortTxRequest)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->txid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.AbortTxRequest)
}

::google::protobuf::uint8* AbortTxRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.AbortTxRequest)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->txid_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.AbortTxRequest)
  return target;
}

int AbortTxRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.AbortTxRequest)
  int total_size = 0;

  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txid_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbortTxRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.AbortTxRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AbortTxRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AbortTxRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.AbortTxRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.AbortTxRequest)
    MergeFrom(*source);
  }
}

void AbortTxRequest::MergeFrom(const AbortTxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.AbortTxRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txid()) {
      mutable_txid()->::azino::TxIdentifier::MergeFrom(from.txid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AbortTxRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.AbortTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbortTxRequest::CopyFrom(const AbortTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.AbortTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbortTxRequest::IsInitialized() const {

  return true;
}

void AbortTxRequest::Swap(AbortTxRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbortTxRequest::InternalSwap(AbortTxRequest* other) {
  std::swap(txid_, other->txid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AbortTxRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AbortTxRequest_descriptor_;
  metadata.reflection = AbortTxRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbortTxRequest

// optional .azino.TxIdentifier txid = 1;
bool AbortTxRequest::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AbortTxRequest::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
void AbortTxRequest::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AbortTxRequest::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
const ::azino::TxIdentifier& AbortTxRequest::txid() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.AbortTxRequest.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
::azino::TxIdentifier* AbortTxRequest::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.AbortTxRequest.txid)
  return txid_;
}
::azino::TxIdentifier* AbortTxRequest::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txplanner.AbortTxRequest.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
void AbortTxRequest::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.AbortTxRequest.txid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbortTxResponse::kTxidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbortTxResponse::AbortTxResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.AbortTxResponse)
}

void AbortTxResponse::InitAsDefaultInstance() {
  txid_ = const_cast< ::azino::TxIdentifier*>(&::azino::TxIdentifier::default_instance());
}

AbortTxResponse::AbortTxResponse(const AbortTxResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.AbortTxResponse)
}

void AbortTxResponse::SharedCtor() {
  _cached_size_ = 0;
  txid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AbortTxResponse::~AbortTxResponse() {
  // @@protoc_insertion_point(destructor:azino.txplanner.AbortTxResponse)
  SharedDtor();
}

void AbortTxResponse::SharedDtor() {
  if (this != default_instance_) {
    delete txid_;
  }
}

void AbortTxResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbortTxResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbortTxResponse_descriptor_;
}

const AbortTxResponse& AbortTxResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

AbortTxResponse* AbortTxResponse::default_instance_ = NULL;

AbortTxResponse* AbortTxResponse::New(::google::protobuf::Arena* arena) const {
  AbortTxResponse* n = new AbortTxResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbortTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.AbortTxResponse)
  if (has_txid()) {
    if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AbortTxResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.AbortTxResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxIdentifier txid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.AbortTxResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.AbortTxResponse)
  return false;
#undef DO_
}

void AbortTxResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.AbortTxResponse)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->txid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.AbortTxResponse)
}

::google::protobuf::uint8* AbortTxResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.AbortTxResponse)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->txid_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.AbortTxResponse)
  return target;
}

int AbortTxResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.AbortTxResponse)
  int total_size = 0;

  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txid_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbortTxResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.AbortTxResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AbortTxResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AbortTxResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.AbortTxResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.AbortTxResponse)
    MergeFrom(*source);
  }
}

void AbortTxResponse::MergeFrom(const AbortTxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.AbortTxResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txid()) {
      mutable_txid()->::azino::TxIdentifier::MergeFrom(from.txid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AbortTxResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.AbortTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbortTxResponse::CopyFrom(const AbortTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.AbortTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbortTxResponse::IsInitialized() const {

  return true;
}

void AbortTxResponse::Swap(AbortTxResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbortTxResponse::InternalSwap(AbortTxResponse* other) {
  std::swap(txid_, other->txid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AbortTxResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AbortTxResponse_descriptor_;
  metadata.reflection = AbortTxResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbortTxResponse

// optional .azino.TxIdentifier txid = 1;
bool AbortTxResponse::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AbortTxResponse::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
void AbortTxResponse::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AbortTxResponse::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
const ::azino::TxIdentifier& AbortTxResponse::txid() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.AbortTxResponse.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
::azino::TxIdentifier* AbortTxResponse::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.AbortTxResponse.txid)
  return txid_;
}
::azino::TxIdentifier* AbortTxResponse::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txplanner.AbortTxResponse.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
void AbortTxResponse::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.AbortTxResponse.txid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValidateTxRequest::kTxidFieldNumber;
const int ValidateTxRequest::kIsEarlyValidationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValidateTxRequest::ValidateTxRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.ValidateTxRequest)
}

void ValidateTxRequest::InitAsDefaultInstance() {
  txid_ = const_cast< ::azino::TxIdentifier*>(&::azino::TxIdentifier::default_instance());
}

ValidateTxRequest::ValidateTxRequest(const ValidateTxRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.ValidateTxRequest)
}

void ValidateTxRequest::SharedCtor() {
  _cached_size_ = 0;
  txid_ = NULL;
  is_early_validation_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValidateTxRequest::~ValidateTxRequest() {
  // @@protoc_insertion_point(destructor:azino.txplanner.ValidateTxRequest)
  SharedDtor();
}

void ValidateTxRequest::SharedDtor() {
  if (this != default_instance_) {
    delete txid_;
  }
}

void ValidateTxRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValidateTxRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValidateTxRequest_descriptor_;
}

const ValidateTxRequest& ValidateTxRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

ValidateTxRequest* ValidateTxRequest::default_instance_ = NULL;

ValidateTxRequest* ValidateTxRequest::New(::google::protobuf::Arena* arena) const {
  ValidateTxRequest* n = new ValidateTxRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValidateTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.ValidateTxRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_txid()) {
      if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
    }
    is_early_validation_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ValidateTxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.ValidateTxRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxIdentifier txid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_early_validation;
        break;
      }

      // optional bool is_early_validation = 2;
      case 2: {
        if (tag == 16) {
         parse_is_early_validation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_early_validation_)));
          set_has_is_early_validation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.ValidateTxRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.ValidateTxRequest)
  return false;
#undef DO_
}

void ValidateTxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.ValidateTxRequest)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->txid_, output);
  }

  // optional bool is_early_validation = 2;
  if (has_is_early_validation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_early_validation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.ValidateTxRequest)
}

::google::protobuf::uint8* ValidateTxRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.ValidateTxRequest)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->txid_, false, target);
  }

  // optional bool is_early_validation = 2;
  if (has_is_early_validation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_early_validation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.ValidateTxRequest)
  return target;
}

int ValidateTxRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.ValidateTxRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .azino.TxIdentifier txid = 1;
    if (has_txid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->txid_);
    }

    // optional bool is_early_validation = 2;
    if (has_is_early_validation()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValidateTxRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.ValidateTxRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ValidateTxRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ValidateTxRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.ValidateTxRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.ValidateTxRequest)
    MergeFrom(*source);
  }
}

void ValidateTxRequest::MergeFrom(const ValidateTxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.ValidateTxRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txid()) {
      mutable_txid()->::azino::TxIdentifier::MergeFrom(from.txid());
    }
    if (from.has_is_early_validation()) {
      set_is_early_validation(from.is_early_validation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ValidateTxRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.ValidateTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateTxRequest::CopyFrom(const ValidateTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.ValidateTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateTxRequest::IsInitialized() const {

  return true;
}

void ValidateTxRequest::Swap(ValidateTxRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValidateTxRequest::InternalSwap(ValidateTxRequest* other) {
  std::swap(txid_, other->txid_);
  std::swap(is_early_validation_, other->is_early_validation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValidateTxRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValidateTxRequest_descriptor_;
  metadata.reflection = ValidateTxRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValidateTxRequest

// optional .azino.TxIdentifier txid = 1;
bool ValidateTxRequest::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ValidateTxRequest::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
void ValidateTxRequest::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ValidateTxRequest::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
const ::azino::TxIdentifier& ValidateTxRequest::txid() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.ValidateTxRequest.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
::azino::TxIdentifier* ValidateTxRequest::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.ValidateTxRequest.txid)
  return txid_;
}
::azino::TxIdentifier* ValidateTxRequest::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txplanner.ValidateTxRequest.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
void ValidateTxRequest::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.ValidateTxRequest.txid)
}

// optional bool is_early_validation = 2;
bool ValidateTxRequest::has_is_early_validation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ValidateTxRequest::set_has_is_early_validation() {
  _has_bits_[0] |= 0x00000002u;
}
void ValidateTxRequest::clear_has_is_early_validation() {
  _has_bits_[0] &= ~0x00000002u;
}
void ValidateTxRequest::clear_is_early_validation() {
  is_early_validation_ = false;
  clear_has_is_early_validation();
}
 bool ValidateTxRequest::is_early_validation() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.ValidateTxRequest.is_early_validation)
  return is_early_validation_;
}
 void ValidateTxRequest::set_is_early_validation(bool value) {
  set_has_is_early_validation();
  is_early_validation_ = value;
  // @@protoc_insertion_point(field_set:azino.txplanner.ValidateTxRequest.is_early_validation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValidateTxResponse::kTxidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValidateTxResponse::ValidateTxResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.ValidateTxResponse)
}

void ValidateTxResponse::InitAsDefaultInstance() {
  txid_ = const_cast< ::azino::TxIdentifier*>(&::azino::TxIdentifier::default_instance());
}

ValidateTxResponse::ValidateTxResponse(const ValidateTxResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.ValidateTxResponse)
}

void ValidateTxResponse::SharedCtor() {
  _cached_size_ = 0;
  txid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValidateTxResponse::~ValidateTxResponse() {
  // @@protoc_insertion_point(destructor:azino.txplanner.ValidateTxResponse)
  SharedDtor();
}

void ValidateTxResponse::SharedDtor() {
  if (this != default_instance_) {
    delete txid_;
  }
}

void ValidateTxResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValidateTxResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValidateTxResponse_descriptor_;
}

const ValidateTxResponse& ValidateTxResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

ValidateTxResponse* ValidateTxResponse::default_instance_ = NULL;

ValidateTxResponse* ValidateTxResponse::New(::google::protobuf::Arena* arena) const {
  ValidateTxResponse* n = new ValidateTxResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValidateTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.ValidateTxResponse)
  if (has_txid()) {
    if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ValidateTxResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.ValidateTxResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxIdentifier txid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.ValidateTxResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.ValidateTxResponse)
  return false;
#undef DO_
}

void ValidateTxResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.ValidateTxResponse)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->txid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.ValidateTxResponse)
}

::google::protobuf::uint8* ValidateTxResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.ValidateTxResponse)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->txid_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.ValidateTxResponse)
  return target;
}

int ValidateTxResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.ValidateTxResponse)
  int total_size = 0;

  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txid_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValidateTxResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.ValidateTxResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ValidateTxResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ValidateTxResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.ValidateTxResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.ValidateTxResponse)
    MergeFrom(*source);
  }
}

void ValidateTxResponse::MergeFrom(const ValidateTxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.ValidateTxResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txid()) {
      mutable_txid()->::azino::TxIdentifier::MergeFrom(from.txid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ValidateTxResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.ValidateTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateTxResponse::CopyFrom(const ValidateTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.ValidateTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateTxResponse::IsInitialized() const {

  return true;
}

void ValidateTxResponse::Swap(ValidateTxResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValidateTxResponse::InternalSwap(ValidateTxResponse* other) {
  std::swap(txid_, other->txid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValidateTxResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValidateTxResponse_descriptor_;
  metadata.reflection = ValidateTxResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValidateTxResponse

// optional .azino.TxIdentifier txid = 1;
bool ValidateTxResponse::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ValidateTxResponse::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
void ValidateTxResponse::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ValidateTxResponse::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
const ::azino::TxIdentifier& ValidateTxResponse::txid() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.ValidateTxResponse.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
::azino::TxIdentifier* ValidateTxResponse::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.ValidateTxResponse.txid)
  return txid_;
}
::azino::TxIdentifier* ValidateTxResponse::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txplanner.ValidateTxResponse.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
void ValidateTxResponse::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.ValidateTxResponse.txid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dep::kKeyFieldNumber;
const int Dep::kT1FieldNumber;
const int Dep::kT2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dep::Dep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.Dep)
}

void Dep::InitAsDefaultInstance() {
  t1_ = const_cast< ::azino::TxIdentifier*>(&::azino::TxIdentifier::default_instance());
  t2_ = const_cast< ::azino::TxIdentifier*>(&::azino::TxIdentifier::default_instance());
}

Dep::Dep(const Dep& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.Dep)
}

void Dep::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  t1_ = NULL;
  t2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dep::~Dep() {
  // @@protoc_insertion_point(destructor:azino.txplanner.Dep)
  SharedDtor();
}

void Dep::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete t1_;
    delete t2_;
  }
}

void Dep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dep_descriptor_;
}

const Dep& Dep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

Dep* Dep::default_instance_ = NULL;

Dep* Dep::New(::google::protobuf::Arena* arena) const {
  Dep* n = new Dep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dep::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.Dep)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_t1()) {
      if (t1_ != NULL) t1_->::azino::TxIdentifier::Clear();
    }
    if (has_t2()) {
      if (t2_ != NULL) t2_->::azino::TxIdentifier::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Dep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.Dep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.txplanner.Dep.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_t1;
        break;
      }

      // optional .azino.TxIdentifier t1 = 2;
      case 2: {
        if (tag == 18) {
         parse_t1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_t2;
        break;
      }

      // optional .azino.TxIdentifier t2 = 3;
      case 3: {
        if (tag == 26) {
         parse_t2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.Dep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.Dep)
  return false;
#undef DO_
}

void Dep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.Dep)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.txplanner.Dep.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional .azino.TxIdentifier t1 = 2;
  if (has_t1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->t1_, output);
  }

  // optional .azino.TxIdentifier t2 = 3;
  if (has_t2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->t2_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.Dep)
}

::google::protobuf::uint8* Dep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.Dep)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.txplanner.Dep.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional .azino.TxIdentifier t1 = 2;
  if (has_t1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->t1_, false, target);
  }

  // optional .azino.TxIdentifier t2 = 3;
  if (has_t2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->t2_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.Dep)
  return target;
}

int Dep::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.Dep)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional .azino.TxIdentifier t1 = 2;
    if (has_t1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->t1_);
    }

    // optional .azino.TxIdentifier t2 = 3;
    if (has_t2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->t2_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.Dep)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Dep* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Dep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.Dep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.Dep)
    MergeFrom(*source);
  }
}

void Dep::MergeFrom(const Dep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.Dep)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_t1()) {
      mutable_t1()->::azino::TxIdentifier::MergeFrom(from.t1());
    }
    if (from.has_t2()) {
      mutable_t2()->::azino::TxIdentifier::MergeFrom(from.t2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Dep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.Dep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dep::CopyFrom(const Dep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.Dep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dep::IsInitialized() const {

  return true;
}

void Dep::Swap(Dep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dep::InternalSwap(Dep* other) {
  key_.Swap(&other->key_);
  std::swap(t1_, other->t1_);
  std::swap(t2_, other->t2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Dep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dep_descriptor_;
  metadata.reflection = Dep_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dep

// optional string key = 1;
bool Dep::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dep::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Dep::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dep::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& Dep::key() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.Dep.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Dep::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.txplanner.Dep.key)
}
 void Dep::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.txplanner.Dep.key)
}
 void Dep::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.txplanner.Dep.key)
}
 ::std::string* Dep::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.txplanner.Dep.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Dep::release_key() {
  // @@protoc_insertion_point(field_release:azino.txplanner.Dep.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Dep::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.Dep.key)
}

// optional .azino.TxIdentifier t1 = 2;
bool Dep::has_t1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dep::set_has_t1() {
  _has_bits_[0] |= 0x00000002u;
}
void Dep::clear_has_t1() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dep::clear_t1() {
  if (t1_ != NULL) t1_->::azino::TxIdentifier::Clear();
  clear_has_t1();
}
const ::azino::TxIdentifier& Dep::t1() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.Dep.t1)
  return t1_ != NULL ? *t1_ : *default_instance_->t1_;
}
::azino::TxIdentifier* Dep::mutable_t1() {
  set_has_t1();
  if (t1_ == NULL) {
    t1_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.Dep.t1)
  return t1_;
}
::azino::TxIdentifier* Dep::release_t1() {
  // @@protoc_insertion_point(field_release:azino.txplanner.Dep.t1)
  clear_has_t1();
  ::azino::TxIdentifier* temp = t1_;
  t1_ = NULL;
  return temp;
}
void Dep::set_allocated_t1(::azino::TxIdentifier* t1) {
  delete t1_;
  t1_ = t1;
  if (t1) {
    set_has_t1();
  } else {
    clear_has_t1();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.Dep.t1)
}

// optional .azino.TxIdentifier t2 = 3;
bool Dep::has_t2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dep::set_has_t2() {
  _has_bits_[0] |= 0x00000004u;
}
void Dep::clear_has_t2() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dep::clear_t2() {
  if (t2_ != NULL) t2_->::azino::TxIdentifier::Clear();
  clear_has_t2();
}
const ::azino::TxIdentifier& Dep::t2() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.Dep.t2)
  return t2_ != NULL ? *t2_ : *default_instance_->t2_;
}
::azino::TxIdentifier* Dep::mutable_t2() {
  set_has_t2();
  if (t2_ == NULL) {
    t2_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.Dep.t2)
  return t2_;
}
::azino::TxIdentifier* Dep::release_t2() {
  // @@protoc_insertion_point(field_release:azino.txplanner.Dep.t2)
  clear_has_t2();
  ::azino::TxIdentifier* temp = t2_;
  t2_ = NULL;
  return temp;
}
void Dep::set_allocated_t2(::azino::TxIdentifier* t2) {
  delete t2_;
  t2_ = t2;
  if (t2) {
    set_has_t2();
  } else {
    clear_has_t2();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.Dep.t2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepRequest::kDepsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepRequest::DepRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.DepRequest)
}

void DepRequest::InitAsDefaultInstance() {
}

DepRequest::DepRequest(const DepRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.DepRequest)
}

void DepRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepRequest::~DepRequest() {
  // @@protoc_insertion_point(destructor:azino.txplanner.DepRequest)
  SharedDtor();
}

void DepRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DepRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepRequest_descriptor_;
}

const DepRequest& DepRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

DepRequest* DepRequest::default_instance_ = NULL;

DepRequest* DepRequest::New(::google::protobuf::Arena* arena) const {
  DepRequest* n = new DepRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DepRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.DepRequest)
  deps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DepRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.DepRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .azino.txplanner.Dep deps = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_deps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_deps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_deps;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.DepRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.DepRequest)
  return false;
#undef DO_
}

void DepRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.DepRequest)
  // repeated .azino.txplanner.Dep deps = 1;
  for (unsigned int i = 0, n = this->deps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deps(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.DepRequest)
}

::google::protobuf::uint8* DepRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.DepRequest)
  // repeated .azino.txplanner.Dep deps = 1;
  for (unsigned int i = 0, n = this->deps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->deps(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.DepRequest)
  return target;
}

int DepRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.DepRequest)
  int total_size = 0;

  // repeated .azino.txplanner.Dep deps = 1;
  total_size += 1 * this->deps_size();
  for (int i = 0; i < this->deps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deps(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.DepRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DepRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DepRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.DepRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.DepRequest)
    MergeFrom(*source);
  }
}

void DepRequest::MergeFrom(const DepRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.DepRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  deps_.MergeFrom(from.deps_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DepRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.DepRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepRequest::CopyFrom(const DepRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.DepRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepRequest::IsInitialized() const {

  return true;
}

void DepRequest::Swap(DepRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepRequest::InternalSwap(DepRequest* other) {
  deps_.UnsafeArenaSwap(&other->deps_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DepRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepRequest_descriptor_;
  metadata.reflection = DepRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DepRequest

// repeated .azino.txplanner.Dep deps = 1;
int DepRequest::deps_size() const {
  return deps_.size();
}
void DepRequest::clear_deps() {
  deps_.Clear();
}
const ::azino::txplanner::Dep& DepRequest::deps(int index) const {
  // @@protoc_insertion_point(field_get:azino.txplanner.DepRequest.deps)
  return deps_.Get(index);
}
::azino::txplanner::Dep* DepRequest::mutable_deps(int index) {
  // @@protoc_insertion_point(field_mutable:azino.txplanner.DepRequest.deps)
  return deps_.Mutable(index);
}
::azino::txplanner::Dep* DepRequest::add_deps() {
  // @@protoc_insertion_point(field_add:azino.txplanner.DepRequest.deps)
  return deps_.Add();
}
::google::protobuf::RepeatedPtrField< ::azino::txplanner::Dep >*
DepRequest::mutable_deps() {
  // @@protoc_insertion_point(field_mutable_list:azino.txplanner.DepRequest.deps)
  return &deps_;
}
const ::google::protobuf::RepeatedPtrField< ::azino::txplanner::Dep >&
DepRequest::deps() const {
  // @@protoc_insertion_point(field_list:azino.txplanner.DepRequest.deps)
  return deps_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepResponse::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepResponse::DepResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.DepResponse)
}

void DepResponse::InitAsDefaultInstance() {
}

DepResponse::DepResponse(const DepResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.DepResponse)
}

void DepResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepResponse::~DepResponse() {
  // @@protoc_insertion_point(destructor:azino.txplanner.DepResponse)
  SharedDtor();
}

void DepResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DepResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepResponse_descriptor_;
}

const DepResponse& DepResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

DepResponse* DepResponse::default_instance_ = NULL;

DepResponse* DepResponse::New(::google::protobuf::Arena* arena) const {
  DepResponse* n = new DepResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DepResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.DepResponse)
  error_code_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DepResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.DepResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.DepResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.DepResponse)
  return false;
#undef DO_
}

void DepResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.DepResponse)
  // optional uint64 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->error_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.DepResponse)
}

::google::protobuf::uint8* DepResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.DepResponse)
  // optional uint64 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->error_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.DepResponse)
  return target;
}

int DepResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.DepResponse)
  int total_size = 0;

  // optional uint64 error_code = 1;
  if (has_error_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->error_code());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.DepResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DepResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DepResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.DepResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.DepResponse)
    MergeFrom(*source);
  }
}

void DepResponse::MergeFrom(const DepResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.DepResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DepResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.DepResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepResponse::CopyFrom(const DepResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.DepResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepResponse::IsInitialized() const {

  return true;
}

void DepResponse::Swap(DepResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepResponse::InternalSwap(DepResponse* other) {
  std::swap(error_code_, other->error_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DepResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepResponse_descriptor_;
  metadata.reflection = DepResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DepResponse

// optional uint64 error_code = 1;
bool DepResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DepResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
void DepResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void DepResponse::clear_error_code() {
  error_code_ = GOOGLE_ULONGLONG(0);
  clear_has_error_code();
}
 ::google::protobuf::uint64 DepResponse::error_code() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.DepResponse.error_code)
  return error_code_;
}
 void DepResponse::set_error_code(::google::protobuf::uint64 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:azino.txplanner.DepResponse.error_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMinATSRequest::GetMinATSRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.GetMinATSRequest)
}

void GetMinATSRequest::InitAsDefaultInstance() {
}

GetMinATSRequest::GetMinATSRequest(const GetMinATSRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.GetMinATSRequest)
}

void GetMinATSRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMinATSRequest::~GetMinATSRequest() {
  // @@protoc_insertion_point(destructor:azino.txplanner.GetMinATSRequest)
  SharedDtor();
}

void GetMinATSRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetMinATSRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMinATSRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMinATSRequest_descriptor_;
}

const GetMinATSRequest& GetMinATSRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

GetMinATSRequest* GetMinATSRequest::default_instance_ = NULL;

GetMinATSRequest* GetMinATSRequest::New(::google::protobuf::Arena* arena) const {
  GetMinATSRequest* n = new GetMinATSRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMinATSRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.GetMinATSRequest)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetMinATSRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.GetMinATSRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.GetMinATSRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.GetMinATSRequest)
  return false;
#undef DO_
}

void GetMinATSRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.GetMinATSRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.GetMinATSRequest)
}

::google::protobuf::uint8* GetMinATSRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.GetMinATSRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.GetMinATSRequest)
  return target;
}

int GetMinATSRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.GetMinATSRequest)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMinATSRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.GetMinATSRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetMinATSRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMinATSRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.GetMinATSRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.GetMinATSRequest)
    MergeFrom(*source);
  }
}

void GetMinATSRequest::MergeFrom(const GetMinATSRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.GetMinATSRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetMinATSRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.GetMinATSRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMinATSRequest::CopyFrom(const GetMinATSRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.GetMinATSRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMinATSRequest::IsInitialized() const {

  return true;
}

void GetMinATSRequest::Swap(GetMinATSRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMinATSRequest::InternalSwap(GetMinATSRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMinATSRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMinATSRequest_descriptor_;
  metadata.reflection = GetMinATSRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMinATSRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMinATSResponse::kMinAtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMinATSResponse::GetMinATSResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.GetMinATSResponse)
}

void GetMinATSResponse::InitAsDefaultInstance() {
}

GetMinATSResponse::GetMinATSResponse(const GetMinATSResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.GetMinATSResponse)
}

void GetMinATSResponse::SharedCtor() {
  _cached_size_ = 0;
  min_ats_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMinATSResponse::~GetMinATSResponse() {
  // @@protoc_insertion_point(destructor:azino.txplanner.GetMinATSResponse)
  SharedDtor();
}

void GetMinATSResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetMinATSResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMinATSResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMinATSResponse_descriptor_;
}

const GetMinATSResponse& GetMinATSResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

GetMinATSResponse* GetMinATSResponse::default_instance_ = NULL;

GetMinATSResponse* GetMinATSResponse::New(::google::protobuf::Arena* arena) const {
  GetMinATSResponse* n = new GetMinATSResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMinATSResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.GetMinATSResponse)
  min_ats_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetMinATSResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.GetMinATSResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 min_ats = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_ats_)));
          set_has_min_ats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.GetMinATSResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.GetMinATSResponse)
  return false;
#undef DO_
}

void GetMinATSResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.GetMinATSResponse)
  // optional uint64 min_ats = 1;
  if (has_min_ats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->min_ats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.GetMinATSResponse)
}

::google::protobuf::uint8* GetMinATSResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.GetMinATSResponse)
  // optional uint64 min_ats = 1;
  if (has_min_ats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->min_ats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.GetMinATSResponse)
  return target;
}

int GetMinATSResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.GetMinATSResponse)
  int total_size = 0;

  // optional uint64 min_ats = 1;
  if (has_min_ats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->min_ats());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMinATSResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.GetMinATSResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetMinATSResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMinATSResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.GetMinATSResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.GetMinATSResponse)
    MergeFrom(*source);
  }
}

void GetMinATSResponse::MergeFrom(const GetMinATSResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.GetMinATSResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_ats()) {
      set_min_ats(from.min_ats());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetMinATSResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.GetMinATSResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMinATSResponse::CopyFrom(const GetMinATSResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.GetMinATSResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMinATSResponse::IsInitialized() const {

  return true;
}

void GetMinATSResponse::Swap(GetMinATSResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMinATSResponse::InternalSwap(GetMinATSResponse* other) {
  std::swap(min_ats_, other->min_ats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMinATSResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMinATSResponse_descriptor_;
  metadata.reflection = GetMinATSResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMinATSResponse

// optional uint64 min_ats = 1;
bool GetMinATSResponse::has_min_ats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetMinATSResponse::set_has_min_ats() {
  _has_bits_[0] |= 0x00000001u;
}
void GetMinATSResponse::clear_has_min_ats() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetMinATSResponse::clear_min_ats() {
  min_ats_ = GOOGLE_ULONGLONG(0);
  clear_has_min_ats();
}
 ::google::protobuf::uint64 GetMinATSResponse::min_ats() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.GetMinATSResponse.min_ats)
  return min_ats_;
}
 void GetMinATSResponse::set_min_ats(::google::protobuf::uint64 value) {
  set_has_min_ats();
  min_ats_ = value;
  // @@protoc_insertion_point(field_set:azino.txplanner.GetMinATSResponse.min_ats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionMetric::kReadQpsFieldNumber;
const int RegionMetric::kWriteQpsFieldNumber;
const int RegionMetric::kPessimismKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionMetric::RegionMetric()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.RegionMetric)
}

void RegionMetric::InitAsDefaultInstance() {
}

RegionMetric::RegionMetric(const RegionMetric& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.RegionMetric)
}

void RegionMetric::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  read_qps_ = GOOGLE_LONGLONG(0);
  write_qps_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionMetric::~RegionMetric() {
  // @@protoc_insertion_point(destructor:azino.txplanner.RegionMetric)
  SharedDtor();
}

void RegionMetric::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegionMetric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionMetric::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionMetric_descriptor_;
}

const RegionMetric& RegionMetric::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

RegionMetric* RegionMetric::default_instance_ = NULL;

RegionMetric* RegionMetric::New(::google::protobuf::Arena* arena) const {
  RegionMetric* n = new RegionMetric;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.RegionMetric)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RegionMetric, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RegionMetric*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(read_qps_, write_qps_);

#undef ZR_HELPER_
#undef ZR_

  pessimism_key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegionMetric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.RegionMetric)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 read_qps = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &read_qps_)));
          set_has_read_qps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_write_qps;
        break;
      }

      // optional int64 write_qps = 2;
      case 2: {
        if (tag == 16) {
         parse_write_qps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &write_qps_)));
          set_has_write_qps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pessimism_key;
        break;
      }

      // repeated string pessimism_key = 3;
      case 3: {
        if (tag == 26) {
         parse_pessimism_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pessimism_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pessimism_key(this->pessimism_key_size() - 1).data(),
            this->pessimism_key(this->pessimism_key_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.txplanner.RegionMetric.pessimism_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pessimism_key;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.RegionMetric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.RegionMetric)
  return false;
#undef DO_
}

void RegionMetric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.RegionMetric)
  // optional int64 read_qps = 1;
  if (has_read_qps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->read_qps(), output);
  }

  // optional int64 write_qps = 2;
  if (has_write_qps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->write_qps(), output);
  }

  // repeated string pessimism_key = 3;
  for (int i = 0; i < this->pessimism_key_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pessimism_key(i).data(), this->pessimism_key(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.txplanner.RegionMetric.pessimism_key");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pessimism_key(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.RegionMetric)
}

::google::protobuf::uint8* RegionMetric::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.RegionMetric)
  // optional int64 read_qps = 1;
  if (has_read_qps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->read_qps(), target);
  }

  // optional int64 write_qps = 2;
  if (has_write_qps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->write_qps(), target);
  }

  // repeated string pessimism_key = 3;
  for (int i = 0; i < this->pessimism_key_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pessimism_key(i).data(), this->pessimism_key(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.txplanner.RegionMetric.pessimism_key");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->pessimism_key(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.RegionMetric)
  return target;
}

int RegionMetric::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.RegionMetric)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 read_qps = 1;
    if (has_read_qps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->read_qps());
    }

    // optional int64 write_qps = 2;
    if (has_write_qps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->write_qps());
    }

  }
  // repeated string pessimism_key = 3;
  total_size += 1 * this->pessimism_key_size();
  for (int i = 0; i < this->pessimism_key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pessimism_key(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionMetric::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.RegionMetric)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegionMetric* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionMetric>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.RegionMetric)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.RegionMetric)
    MergeFrom(*source);
  }
}

void RegionMetric::MergeFrom(const RegionMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.RegionMetric)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pessimism_key_.MergeFrom(from.pessimism_key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_read_qps()) {
      set_read_qps(from.read_qps());
    }
    if (from.has_write_qps()) {
      set_write_qps(from.write_qps());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RegionMetric::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.RegionMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionMetric::CopyFrom(const RegionMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.RegionMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionMetric::IsInitialized() const {

  return true;
}

void RegionMetric::Swap(RegionMetric* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionMetric::InternalSwap(RegionMetric* other) {
  std::swap(read_qps_, other->read_qps_);
  std::swap(write_qps_, other->write_qps_);
  pessimism_key_.UnsafeArenaSwap(&other->pessimism_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionMetric::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionMetric_descriptor_;
  metadata.reflection = RegionMetric_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionMetric

// optional int64 read_qps = 1;
bool RegionMetric::has_read_qps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegionMetric::set_has_read_qps() {
  _has_bits_[0] |= 0x00000001u;
}
void RegionMetric::clear_has_read_qps() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegionMetric::clear_read_qps() {
  read_qps_ = GOOGLE_LONGLONG(0);
  clear_has_read_qps();
}
 ::google::protobuf::int64 RegionMetric::read_qps() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.RegionMetric.read_qps)
  return read_qps_;
}
 void RegionMetric::set_read_qps(::google::protobuf::int64 value) {
  set_has_read_qps();
  read_qps_ = value;
  // @@protoc_insertion_point(field_set:azino.txplanner.RegionMetric.read_qps)
}

// optional int64 write_qps = 2;
bool RegionMetric::has_write_qps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegionMetric::set_has_write_qps() {
  _has_bits_[0] |= 0x00000002u;
}
void RegionMetric::clear_has_write_qps() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegionMetric::clear_write_qps() {
  write_qps_ = GOOGLE_LONGLONG(0);
  clear_has_write_qps();
}
 ::google::protobuf::int64 RegionMetric::write_qps() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.RegionMetric.write_qps)
  return write_qps_;
}
 void RegionMetric::set_write_qps(::google::protobuf::int64 value) {
  set_has_write_qps();
  write_qps_ = value;
  // @@protoc_insertion_point(field_set:azino.txplanner.RegionMetric.write_qps)
}

// repeated string pessimism_key = 3;
int RegionMetric::pessimism_key_size() const {
  return pessimism_key_.size();
}
void RegionMetric::clear_pessimism_key() {
  pessimism_key_.Clear();
}
 const ::std::string& RegionMetric::pessimism_key(int index) const {
  // @@protoc_insertion_point(field_get:azino.txplanner.RegionMetric.pessimism_key)
  return pessimism_key_.Get(index);
}
 ::std::string* RegionMetric::mutable_pessimism_key(int index) {
  // @@protoc_insertion_point(field_mutable:azino.txplanner.RegionMetric.pessimism_key)
  return pessimism_key_.Mutable(index);
}
 void RegionMetric::set_pessimism_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:azino.txplanner.RegionMetric.pessimism_key)
  pessimism_key_.Mutable(index)->assign(value);
}
 void RegionMetric::set_pessimism_key(int index, const char* value) {
  pessimism_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:azino.txplanner.RegionMetric.pessimism_key)
}
 void RegionMetric::set_pessimism_key(int index, const char* value, size_t size) {
  pessimism_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:azino.txplanner.RegionMetric.pessimism_key)
}
 ::std::string* RegionMetric::add_pessimism_key() {
  // @@protoc_insertion_point(field_add_mutable:azino.txplanner.RegionMetric.pessimism_key)
  return pessimism_key_.Add();
}
 void RegionMetric::add_pessimism_key(const ::std::string& value) {
  pessimism_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:azino.txplanner.RegionMetric.pessimism_key)
}
 void RegionMetric::add_pessimism_key(const char* value) {
  pessimism_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:azino.txplanner.RegionMetric.pessimism_key)
}
 void RegionMetric::add_pessimism_key(const char* value, size_t size) {
  pessimism_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:azino.txplanner.RegionMetric.pessimism_key)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
RegionMetric::pessimism_key() const {
  // @@protoc_insertion_point(field_list:azino.txplanner.RegionMetric.pessimism_key)
  return pessimism_key_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
RegionMetric::mutable_pessimism_key() {
  // @@protoc_insertion_point(field_mutable_list:azino.txplanner.RegionMetric.pessimism_key)
  return &pessimism_key_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionMetricRequest::kRangeFieldNumber;
const int RegionMetricRequest::kMetricFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionMetricRequest::RegionMetricRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.RegionMetricRequest)
}

void RegionMetricRequest::InitAsDefaultInstance() {
  range_ = const_cast< ::azino::RangePB*>(&::azino::RangePB::default_instance());
  metric_ = const_cast< ::azino::txplanner::RegionMetric*>(&::azino::txplanner::RegionMetric::default_instance());
}

RegionMetricRequest::RegionMetricRequest(const RegionMetricRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.RegionMetricRequest)
}

void RegionMetricRequest::SharedCtor() {
  _cached_size_ = 0;
  range_ = NULL;
  metric_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionMetricRequest::~RegionMetricRequest() {
  // @@protoc_insertion_point(destructor:azino.txplanner.RegionMetricRequest)
  SharedDtor();
}

void RegionMetricRequest::SharedDtor() {
  if (this != default_instance_) {
    delete range_;
    delete metric_;
  }
}

void RegionMetricRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionMetricRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionMetricRequest_descriptor_;
}

const RegionMetricRequest& RegionMetricRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

RegionMetricRequest* RegionMetricRequest::default_instance_ = NULL;

RegionMetricRequest* RegionMetricRequest::New(::google::protobuf::Arena* arena) const {
  RegionMetricRequest* n = new RegionMetricRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionMetricRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.RegionMetricRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_range()) {
      if (range_ != NULL) range_->::azino::RangePB::Clear();
    }
    if (has_metric()) {
      if (metric_ != NULL) metric_->::azino::txplanner::RegionMetric::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegionMetricRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.RegionMetricRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.RangePB range = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_metric;
        break;
      }

      // optional .azino.txplanner.RegionMetric metric = 2;
      case 2: {
        if (tag == 18) {
         parse_metric:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metric()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.RegionMetricRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.RegionMetricRequest)
  return false;
#undef DO_
}

void RegionMetricRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.RegionMetricRequest)
  // optional .azino.RangePB range = 1;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->range_, output);
  }

  // optional .azino.txplanner.RegionMetric metric = 2;
  if (has_metric()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->metric_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.RegionMetricRequest)
}

::google::protobuf::uint8* RegionMetricRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.RegionMetricRequest)
  // optional .azino.RangePB range = 1;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->range_, false, target);
  }

  // optional .azino.txplanner.RegionMetric metric = 2;
  if (has_metric()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->metric_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.RegionMetricRequest)
  return target;
}

int RegionMetricRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.RegionMetricRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .azino.RangePB range = 1;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->range_);
    }

    // optional .azino.txplanner.RegionMetric metric = 2;
    if (has_metric()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->metric_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionMetricRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.RegionMetricRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegionMetricRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionMetricRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.RegionMetricRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.RegionMetricRequest)
    MergeFrom(*source);
  }
}

void RegionMetricRequest::MergeFrom(const RegionMetricRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.RegionMetricRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range()) {
      mutable_range()->::azino::RangePB::MergeFrom(from.range());
    }
    if (from.has_metric()) {
      mutable_metric()->::azino::txplanner::RegionMetric::MergeFrom(from.metric());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RegionMetricRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.RegionMetricRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionMetricRequest::CopyFrom(const RegionMetricRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.RegionMetricRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionMetricRequest::IsInitialized() const {

  return true;
}

void RegionMetricRequest::Swap(RegionMetricRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionMetricRequest::InternalSwap(RegionMetricRequest* other) {
  std::swap(range_, other->range_);
  std::swap(metric_, other->metric_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionMetricRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionMetricRequest_descriptor_;
  metadata.reflection = RegionMetricRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionMetricRequest

// optional .azino.RangePB range = 1;
bool RegionMetricRequest::has_range() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegionMetricRequest::set_has_range() {
  _has_bits_[0] |= 0x00000001u;
}
void RegionMetricRequest::clear_has_range() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegionMetricRequest::clear_range() {
  if (range_ != NULL) range_->::azino::RangePB::Clear();
  clear_has_range();
}
const ::azino::RangePB& RegionMetricRequest::range() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.RegionMetricRequest.range)
  return range_ != NULL ? *range_ : *default_instance_->range_;
}
::azino::RangePB* RegionMetricRequest::mutable_range() {
  set_has_range();
  if (range_ == NULL) {
    range_ = new ::azino::RangePB;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.RegionMetricRequest.range)
  return range_;
}
::azino::RangePB* RegionMetricRequest::release_range() {
  // @@protoc_insertion_point(field_release:azino.txplanner.RegionMetricRequest.range)
  clear_has_range();
  ::azino::RangePB* temp = range_;
  range_ = NULL;
  return temp;
}
void RegionMetricRequest::set_allocated_range(::azino::RangePB* range) {
  delete range_;
  range_ = range;
  if (range) {
    set_has_range();
  } else {
    clear_has_range();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.RegionMetricRequest.range)
}

// optional .azino.txplanner.RegionMetric metric = 2;
bool RegionMetricRequest::has_metric() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegionMetricRequest::set_has_metric() {
  _has_bits_[0] |= 0x00000002u;
}
void RegionMetricRequest::clear_has_metric() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegionMetricRequest::clear_metric() {
  if (metric_ != NULL) metric_->::azino::txplanner::RegionMetric::Clear();
  clear_has_metric();
}
const ::azino::txplanner::RegionMetric& RegionMetricRequest::metric() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.RegionMetricRequest.metric)
  return metric_ != NULL ? *metric_ : *default_instance_->metric_;
}
::azino::txplanner::RegionMetric* RegionMetricRequest::mutable_metric() {
  set_has_metric();
  if (metric_ == NULL) {
    metric_ = new ::azino::txplanner::RegionMetric;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.RegionMetricRequest.metric)
  return metric_;
}
::azino::txplanner::RegionMetric* RegionMetricRequest::release_metric() {
  // @@protoc_insertion_point(field_release:azino.txplanner.RegionMetricRequest.metric)
  clear_has_metric();
  ::azino::txplanner::RegionMetric* temp = metric_;
  metric_ = NULL;
  return temp;
}
void RegionMetricRequest::set_allocated_metric(::azino::txplanner::RegionMetric* metric) {
  delete metric_;
  metric_ = metric;
  if (metric) {
    set_has_metric();
  } else {
    clear_has_metric();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.RegionMetricRequest.metric)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionMetricResponse::RegionMetricResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.RegionMetricResponse)
}

void RegionMetricResponse::InitAsDefaultInstance() {
}

RegionMetricResponse::RegionMetricResponse(const RegionMetricResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.RegionMetricResponse)
}

void RegionMetricResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionMetricResponse::~RegionMetricResponse() {
  // @@protoc_insertion_point(destructor:azino.txplanner.RegionMetricResponse)
  SharedDtor();
}

void RegionMetricResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegionMetricResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionMetricResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionMetricResponse_descriptor_;
}

const RegionMetricResponse& RegionMetricResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

RegionMetricResponse* RegionMetricResponse::default_instance_ = NULL;

RegionMetricResponse* RegionMetricResponse::New(::google::protobuf::Arena* arena) const {
  RegionMetricResponse* n = new RegionMetricResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionMetricResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.RegionMetricResponse)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegionMetricResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.RegionMetricResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.RegionMetricResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.RegionMetricResponse)
  return false;
#undef DO_
}

void RegionMetricResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.RegionMetricResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.RegionMetricResponse)
}

::google::protobuf::uint8* RegionMetricResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.RegionMetricResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.RegionMetricResponse)
  return target;
}

int RegionMetricResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.RegionMetricResponse)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionMetricResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.RegionMetricResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegionMetricResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionMetricResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.RegionMetricResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.RegionMetricResponse)
    MergeFrom(*source);
  }
}

void RegionMetricResponse::MergeFrom(const RegionMetricResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.RegionMetricResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RegionMetricResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.RegionMetricResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionMetricResponse::CopyFrom(const RegionMetricResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.RegionMetricResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionMetricResponse::IsInitialized() const {

  return true;
}

void RegionMetricResponse::Swap(RegionMetricResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionMetricResponse::InternalSwap(RegionMetricResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionMetricResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionMetricResponse_descriptor_;
  metadata.reflection = RegionMetricResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionMetricResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPartitionRequest::GetPartitionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.GetPartitionRequest)
}

void GetPartitionRequest::InitAsDefaultInstance() {
}

GetPartitionRequest::GetPartitionRequest(const GetPartitionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.GetPartitionRequest)
}

void GetPartitionRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPartitionRequest::~GetPartitionRequest() {
  // @@protoc_insertion_point(destructor:azino.txplanner.GetPartitionRequest)
  SharedDtor();
}

void GetPartitionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPartitionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPartitionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPartitionRequest_descriptor_;
}

const GetPartitionRequest& GetPartitionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

GetPartitionRequest* GetPartitionRequest::default_instance_ = NULL;

GetPartitionRequest* GetPartitionRequest::New(::google::protobuf::Arena* arena) const {
  GetPartitionRequest* n = new GetPartitionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPartitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.GetPartitionRequest)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetPartitionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.GetPartitionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.GetPartitionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.GetPartitionRequest)
  return false;
#undef DO_
}

void GetPartitionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.GetPartitionRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.GetPartitionRequest)
}

::google::protobuf::uint8* GetPartitionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.GetPartitionRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.GetPartitionRequest)
  return target;
}

int GetPartitionRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.GetPartitionRequest)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPartitionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.GetPartitionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetPartitionRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPartitionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.GetPartitionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.GetPartitionRequest)
    MergeFrom(*source);
  }
}

void GetPartitionRequest::MergeFrom(const GetPartitionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.GetPartitionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetPartitionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.GetPartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPartitionRequest::CopyFrom(const GetPartitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.GetPartitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPartitionRequest::IsInitialized() const {

  return true;
}

void GetPartitionRequest::Swap(GetPartitionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPartitionRequest::InternalSwap(GetPartitionRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPartitionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPartitionRequest_descriptor_;
  metadata.reflection = GetPartitionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPartitionRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPartitionResponse::kPartitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPartitionResponse::GetPartitionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txplanner.GetPartitionResponse)
}

void GetPartitionResponse::InitAsDefaultInstance() {
  partition_ = const_cast< ::azino::PartitionPB*>(&::azino::PartitionPB::default_instance());
}

GetPartitionResponse::GetPartitionResponse(const GetPartitionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txplanner.GetPartitionResponse)
}

void GetPartitionResponse::SharedCtor() {
  _cached_size_ = 0;
  partition_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPartitionResponse::~GetPartitionResponse() {
  // @@protoc_insertion_point(destructor:azino.txplanner.GetPartitionResponse)
  SharedDtor();
}

void GetPartitionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete partition_;
  }
}

void GetPartitionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPartitionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPartitionResponse_descriptor_;
}

const GetPartitionResponse& GetPartitionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  return *default_instance_;
}

GetPartitionResponse* GetPartitionResponse::default_instance_ = NULL;

GetPartitionResponse* GetPartitionResponse::New(::google::protobuf::Arena* arena) const {
  GetPartitionResponse* n = new GetPartitionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPartitionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txplanner.GetPartitionResponse)
  if (has_partition()) {
    if (partition_ != NULL) partition_->::azino::PartitionPB::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetPartitionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txplanner.GetPartitionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.PartitionPB partition = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txplanner.GetPartitionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txplanner.GetPartitionResponse)
  return false;
#undef DO_
}

void GetPartitionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txplanner.GetPartitionResponse)
  // optional .azino.PartitionPB partition = 1;
  if (has_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->partition_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txplanner.GetPartitionResponse)
}

::google::protobuf::uint8* GetPartitionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txplanner.GetPartitionResponse)
  // optional .azino.PartitionPB partition = 1;
  if (has_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->partition_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txplanner.GetPartitionResponse)
  return target;
}

int GetPartitionResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txplanner.GetPartitionResponse)
  int total_size = 0;

  // optional .azino.PartitionPB partition = 1;
  if (has_partition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->partition_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPartitionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txplanner.GetPartitionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetPartitionResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPartitionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txplanner.GetPartitionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txplanner.GetPartitionResponse)
    MergeFrom(*source);
  }
}

void GetPartitionResponse::MergeFrom(const GetPartitionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txplanner.GetPartitionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition()) {
      mutable_partition()->::azino::PartitionPB::MergeFrom(from.partition());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetPartitionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txplanner.GetPartitionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPartitionResponse::CopyFrom(const GetPartitionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txplanner.GetPartitionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPartitionResponse::IsInitialized() const {

  return true;
}

void GetPartitionResponse::Swap(GetPartitionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPartitionResponse::InternalSwap(GetPartitionResponse* other) {
  std::swap(partition_, other->partition_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPartitionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPartitionResponse_descriptor_;
  metadata.reflection = GetPartitionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPartitionResponse

// optional .azino.PartitionPB partition = 1;
bool GetPartitionResponse::has_partition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetPartitionResponse::set_has_partition() {
  _has_bits_[0] |= 0x00000001u;
}
void GetPartitionResponse::clear_has_partition() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetPartitionResponse::clear_partition() {
  if (partition_ != NULL) partition_->::azino::PartitionPB::Clear();
  clear_has_partition();
}
const ::azino::PartitionPB& GetPartitionResponse::partition() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.GetPartitionResponse.partition)
  return partition_ != NULL ? *partition_ : *default_instance_->partition_;
}
::azino::PartitionPB* GetPartitionResponse::mutable_partition() {
  set_has_partition();
  if (partition_ == NULL) {
    partition_ = new ::azino::PartitionPB;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.GetPartitionResponse.partition)
  return partition_;
}
::azino::PartitionPB* GetPartitionResponse::release_partition() {
  // @@protoc_insertion_point(field_release:azino.txplanner.GetPartitionResponse.partition)
  clear_has_partition();
  ::azino::PartitionPB* temp = partition_;
  partition_ = NULL;
  return temp;
}
void GetPartitionResponse::set_allocated_partition(::azino::PartitionPB* partition) {
  delete partition_;
  partition_ = partition;
  if (partition) {
    set_has_partition();
  } else {
    clear_has_partition();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.GetPartitionResponse.partition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

TxService::~TxService() {}

const ::google::protobuf::ServiceDescriptor* TxService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* TxService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxService_descriptor_;
}

void TxService::BeginTx(::google::protobuf::RpcController* controller,
                         const ::azino::txplanner::BeginTxRequest*,
                         ::azino::txplanner::BeginTxResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BeginTx() not implemented.");
  done->Run();
}

void TxService::CommitTx(::google::protobuf::RpcController* controller,
                         const ::azino::txplanner::CommitTxRequest*,
                         ::azino::txplanner::CommitTxResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CommitTx() not implemented.");
  done->Run();
}

void TxService::AbortTx(::google::protobuf::RpcController* controller,
                         const ::azino::txplanner::AbortTxRequest*,
                         ::azino::txplanner::AbortTxResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AbortTx() not implemented.");
  done->Run();
}

void TxService::ValidateTx(::google::protobuf::RpcController* controller,
                         const ::azino::txplanner::ValidateTxRequest*,
                         ::azino::txplanner::ValidateTxResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ValidateTx() not implemented.");
  done->Run();
}

void TxService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), TxService_descriptor_);
  switch(method->index()) {
    case 0:
      BeginTx(controller,
             ::google::protobuf::down_cast<const ::azino::txplanner::BeginTxRequest*>(request),
             ::google::protobuf::down_cast< ::azino::txplanner::BeginTxResponse*>(response),
             done);
      break;
    case 1:
      CommitTx(controller,
             ::google::protobuf::down_cast<const ::azino::txplanner::CommitTxRequest*>(request),
             ::google::protobuf::down_cast< ::azino::txplanner::CommitTxResponse*>(response),
             done);
      break;
    case 2:
      AbortTx(controller,
             ::google::protobuf::down_cast<const ::azino::txplanner::AbortTxRequest*>(request),
             ::google::protobuf::down_cast< ::azino::txplanner::AbortTxResponse*>(response),
             done);
      break;
    case 3:
      ValidateTx(controller,
             ::google::protobuf::down_cast<const ::azino::txplanner::ValidateTxRequest*>(request),
             ::google::protobuf::down_cast< ::azino::txplanner::ValidateTxResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& TxService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::azino::txplanner::BeginTxRequest::default_instance();
    case 1:
      return ::azino::txplanner::CommitTxRequest::default_instance();
    case 2:
      return ::azino::txplanner::AbortTxRequest::default_instance();
    case 3:
      return ::azino::txplanner::ValidateTxRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& TxService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::azino::txplanner::BeginTxResponse::default_instance();
    case 1:
      return ::azino::txplanner::CommitTxResponse::default_instance();
    case 2:
      return ::azino::txplanner::AbortTxResponse::default_instance();
    case 3:
      return ::azino::txplanner::ValidateTxResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TxService_Stub::TxService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TxService_Stub::TxService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
TxService_Stub::~TxService_Stub() {
  if (owns_channel_) delete channel_;
}

void TxService_Stub::BeginTx(::google::protobuf::RpcController* controller,
                              const ::azino::txplanner::BeginTxRequest* request,
                              ::azino::txplanner::BeginTxResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TxService_Stub::CommitTx(::google::protobuf::RpcController* controller,
                              const ::azino::txplanner::CommitTxRequest* request,
                              ::azino::txplanner::CommitTxResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void TxService_Stub::AbortTx(::google::protobuf::RpcController* controller,
                              const ::azino::txplanner::AbortTxRequest* request,
                              ::azino::txplanner::AbortTxResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void TxService_Stub::ValidateTx(::google::protobuf::RpcController* controller,
                              const ::azino::txplanner::ValidateTxRequest* request,
                              ::azino::txplanner::ValidateTxResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
// ===================================================================

RegionService::~RegionService() {}

const ::google::protobuf::ServiceDescriptor* RegionService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* RegionService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionService_descriptor_;
}

void RegionService::RWDep(::google::protobuf::RpcController* controller,
                         const ::azino::txplanner::DepRequest*,
                         ::azino::txplanner::DepResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RWDep() not implemented.");
  done->Run();
}

void RegionService::GetMinATS(::google::protobuf::RpcController* controller,
                         const ::azino::txplanner::GetMinATSRequest*,
                         ::azino::txplanner::GetMinATSResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMinATS() not implemented.");
  done->Run();
}

void RegionService::RegionMetric(::google::protobuf::RpcController* controller,
                         const ::azino::txplanner::RegionMetricRequest*,
                         ::azino::txplanner::RegionMetricResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RegionMetric() not implemented.");
  done->Run();
}

void RegionService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), RegionService_descriptor_);
  switch(method->index()) {
    case 0:
      RWDep(controller,
             ::google::protobuf::down_cast<const ::azino::txplanner::DepRequest*>(request),
             ::google::protobuf::down_cast< ::azino::txplanner::DepResponse*>(response),
             done);
      break;
    case 1:
      GetMinATS(controller,
             ::google::protobuf::down_cast<const ::azino::txplanner::GetMinATSRequest*>(request),
             ::google::protobuf::down_cast< ::azino::txplanner::GetMinATSResponse*>(response),
             done);
      break;
    case 2:
      RegionMetric(controller,
             ::google::protobuf::down_cast<const ::azino::txplanner::RegionMetricRequest*>(request),
             ::google::protobuf::down_cast< ::azino::txplanner::RegionMetricResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& RegionService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::azino::txplanner::DepRequest::default_instance();
    case 1:
      return ::azino::txplanner::GetMinATSRequest::default_instance();
    case 2:
      return ::azino::txplanner::RegionMetricRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& RegionService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::azino::txplanner::DepResponse::default_instance();
    case 1:
      return ::azino::txplanner::GetMinATSResponse::default_instance();
    case 2:
      return ::azino::txplanner::RegionMetricResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RegionService_Stub::RegionService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RegionService_Stub::RegionService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
RegionService_Stub::~RegionService_Stub() {
  if (owns_channel_) delete channel_;
}

void RegionService_Stub::RWDep(::google::protobuf::RpcController* controller,
                              const ::azino::txplanner::DepRequest* request,
                              ::azino::txplanner::DepResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RegionService_Stub::GetMinATS(::google::protobuf::RpcController* controller,
                              const ::azino::txplanner::GetMinATSRequest* request,
                              ::azino::txplanner::GetMinATSResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void RegionService_Stub::RegionMetric(::google::protobuf::RpcController* controller,
                              const ::azino::txplanner::RegionMetricRequest* request,
                              ::azino::txplanner::RegionMetricResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
// ===================================================================

PartitionService::~PartitionService() {}

const ::google::protobuf::ServiceDescriptor* PartitionService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartitionService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* PartitionService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartitionService_descriptor_;
}

void PartitionService::GetPartition(::google::protobuf::RpcController* controller,
                         const ::azino::txplanner::GetPartitionRequest*,
                         ::azino::txplanner::GetPartitionResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPartition() not implemented.");
  done->Run();
}

void PartitionService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), PartitionService_descriptor_);
  switch(method->index()) {
    case 0:
      GetPartition(controller,
             ::google::protobuf::down_cast<const ::azino::txplanner::GetPartitionRequest*>(request),
             ::google::protobuf::down_cast< ::azino::txplanner::GetPartitionResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PartitionService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::azino::txplanner::GetPartitionRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& PartitionService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::azino::txplanner::GetPartitionResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

PartitionService_Stub::PartitionService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PartitionService_Stub::PartitionService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PartitionService_Stub::~PartitionService_Stub() {
  if (owns_channel_) delete channel_;
}

void PartitionService_Stub::GetPartition(::google::protobuf::RpcController* controller,
                              const ::azino::txplanner::GetPartitionRequest* request,
                              ::azino::txplanner::GetPartitionResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace txplanner
}  // namespace azino

// @@protoc_insertion_point(global_scope)
