syntax="proto2";
package azino.txplanner;

option cc_generic_services = true;

import "service/tx.proto";

message BeginTxRequest {

}

message BeginTxResponse {
  optional azino.TxIdentifier txid = 1;
  repeated string txindex_addrs = 2; // txindex addresses in form of "0.0.0.0:8000"
  optional string storage_addr = 3; // storage addresses in form of "0.0.0.0:8000"
}

message CommitTxRequest {
  optional azino.TxIdentifier txid = 1;
}

message CommitTxResponse {
  optional azino.TxIdentifier txid = 1;
}

message AbortTxRequest {
  optional azino.TxIdentifier txid = 1;
}

message AbortTxResponse {
  optional azino.TxIdentifier txid = 1;
}

message ValidateTxRequest {
  optional azino.TxIdentifier txid = 1;
  optional bool is_early_validation = 2;
}

message ValidateTxResponse {
  optional azino.TxIdentifier txid = 1;
}

service TxService {
  rpc BeginTx(BeginTxRequest) returns (BeginTxResponse);
  rpc CommitTx(CommitTxRequest) returns (CommitTxResponse);
  rpc AbortTx(AbortTxRequest) returns (AbortTxResponse);
  rpc ValidateTx(ValidateTxRequest) returns (ValidateTxResponse);
}

message Dep {
  optional string key = 1;
  optional azino.TxIdentifier t1 = 2; // t1 pointing to t2, t1 logically happens before t2, t2 depends on t1
  optional azino.TxIdentifier t2 = 3;
}

message DepRequest {
  repeated Dep deps = 1;
}

message DepResponse {
  optional uint64 error_code = 1;
}

message GetMinATSRequest {

}

message GetMinATSResponse {
  optional uint64 min_ats = 1;
}

service RegionService {
  rpc RWDep(DepRequest) returns (DepResponse);
  rpc GetMinATS(GetMinATSRequest) returns (GetMinATSResponse);
}