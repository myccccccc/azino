// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/txplanner/txplanner.proto

#ifndef PROTOBUF_service_2ftxplanner_2ftxplanner_2eproto__INCLUDED
#define PROTOBUF_service_2ftxplanner_2ftxplanner_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "service/tx.pb.h"
#include "service/partition.pb.h"
// @@protoc_insertion_point(includes)

namespace azino {
namespace txplanner {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

class AbortTxRequest;
class AbortTxResponse;
class BeginTxRequest;
class BeginTxResponse;
class CommitTxRequest;
class CommitTxResponse;
class Dep;
class DepRequest;
class DepResponse;
class GetMinATSRequest;
class GetMinATSResponse;
class GetPartitionRequest;
class GetPartitionResponse;
class RegionMetric;
class RegionMetricRequest;
class RegionMetricResponse;
class ValidateTxRequest;
class ValidateTxResponse;

// ===================================================================

class BeginTxRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.BeginTxRequest) */ {
 public:
  BeginTxRequest();
  virtual ~BeginTxRequest();

  BeginTxRequest(const BeginTxRequest& from);

  inline BeginTxRequest& operator=(const BeginTxRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginTxRequest& default_instance();

  void Swap(BeginTxRequest* other);

  // implements Message ----------------------------------------------

  inline BeginTxRequest* New() const { return New(NULL); }

  BeginTxRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeginTxRequest& from);
  void MergeFrom(const BeginTxRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BeginTxRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:azino.txplanner.BeginTxRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static BeginTxRequest* default_instance_;
};
// -------------------------------------------------------------------

class BeginTxResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.BeginTxResponse) */ {
 public:
  BeginTxResponse();
  virtual ~BeginTxResponse();

  BeginTxResponse(const BeginTxResponse& from);

  inline BeginTxResponse& operator=(const BeginTxResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginTxResponse& default_instance();

  void Swap(BeginTxResponse* other);

  // implements Message ----------------------------------------------

  inline BeginTxResponse* New() const { return New(NULL); }

  BeginTxResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeginTxResponse& from);
  void MergeFrom(const BeginTxResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BeginTxResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxIdentifier txid = 1;
  bool has_txid() const;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  const ::azino::TxIdentifier& txid() const;
  ::azino::TxIdentifier* mutable_txid();
  ::azino::TxIdentifier* release_txid();
  void set_allocated_txid(::azino::TxIdentifier* txid);

  // optional .azino.PartitionPB partition = 2;
  bool has_partition() const;
  void clear_partition();
  static const int kPartitionFieldNumber = 2;
  const ::azino::PartitionPB& partition() const;
  ::azino::PartitionPB* mutable_partition();
  ::azino::PartitionPB* release_partition();
  void set_allocated_partition(::azino::PartitionPB* partition);

  // @@protoc_insertion_point(class_scope:azino.txplanner.BeginTxResponse)
 private:
  inline void set_has_txid();
  inline void clear_has_txid();
  inline void set_has_partition();
  inline void clear_has_partition();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxIdentifier* txid_;
  ::azino::PartitionPB* partition_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static BeginTxResponse* default_instance_;
};
// -------------------------------------------------------------------

class CommitTxRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.CommitTxRequest) */ {
 public:
  CommitTxRequest();
  virtual ~CommitTxRequest();

  CommitTxRequest(const CommitTxRequest& from);

  inline CommitTxRequest& operator=(const CommitTxRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitTxRequest& default_instance();

  void Swap(CommitTxRequest* other);

  // implements Message ----------------------------------------------

  inline CommitTxRequest* New() const { return New(NULL); }

  CommitTxRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitTxRequest& from);
  void MergeFrom(const CommitTxRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitTxRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxIdentifier txid = 1;
  bool has_txid() const;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  const ::azino::TxIdentifier& txid() const;
  ::azino::TxIdentifier* mutable_txid();
  ::azino::TxIdentifier* release_txid();
  void set_allocated_txid(::azino::TxIdentifier* txid);

  // @@protoc_insertion_point(class_scope:azino.txplanner.CommitTxRequest)
 private:
  inline void set_has_txid();
  inline void clear_has_txid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxIdentifier* txid_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static CommitTxRequest* default_instance_;
};
// -------------------------------------------------------------------

class CommitTxResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.CommitTxResponse) */ {
 public:
  CommitTxResponse();
  virtual ~CommitTxResponse();

  CommitTxResponse(const CommitTxResponse& from);

  inline CommitTxResponse& operator=(const CommitTxResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitTxResponse& default_instance();

  void Swap(CommitTxResponse* other);

  // implements Message ----------------------------------------------

  inline CommitTxResponse* New() const { return New(NULL); }

  CommitTxResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitTxResponse& from);
  void MergeFrom(const CommitTxResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitTxResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxIdentifier txid = 1;
  bool has_txid() const;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  const ::azino::TxIdentifier& txid() const;
  ::azino::TxIdentifier* mutable_txid();
  ::azino::TxIdentifier* release_txid();
  void set_allocated_txid(::azino::TxIdentifier* txid);

  // @@protoc_insertion_point(class_scope:azino.txplanner.CommitTxResponse)
 private:
  inline void set_has_txid();
  inline void clear_has_txid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxIdentifier* txid_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static CommitTxResponse* default_instance_;
};
// -------------------------------------------------------------------

class AbortTxRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.AbortTxRequest) */ {
 public:
  AbortTxRequest();
  virtual ~AbortTxRequest();

  AbortTxRequest(const AbortTxRequest& from);

  inline AbortTxRequest& operator=(const AbortTxRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AbortTxRequest& default_instance();

  void Swap(AbortTxRequest* other);

  // implements Message ----------------------------------------------

  inline AbortTxRequest* New() const { return New(NULL); }

  AbortTxRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AbortTxRequest& from);
  void MergeFrom(const AbortTxRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AbortTxRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxIdentifier txid = 1;
  bool has_txid() const;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  const ::azino::TxIdentifier& txid() const;
  ::azino::TxIdentifier* mutable_txid();
  ::azino::TxIdentifier* release_txid();
  void set_allocated_txid(::azino::TxIdentifier* txid);

  // @@protoc_insertion_point(class_scope:azino.txplanner.AbortTxRequest)
 private:
  inline void set_has_txid();
  inline void clear_has_txid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxIdentifier* txid_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static AbortTxRequest* default_instance_;
};
// -------------------------------------------------------------------

class AbortTxResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.AbortTxResponse) */ {
 public:
  AbortTxResponse();
  virtual ~AbortTxResponse();

  AbortTxResponse(const AbortTxResponse& from);

  inline AbortTxResponse& operator=(const AbortTxResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AbortTxResponse& default_instance();

  void Swap(AbortTxResponse* other);

  // implements Message ----------------------------------------------

  inline AbortTxResponse* New() const { return New(NULL); }

  AbortTxResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AbortTxResponse& from);
  void MergeFrom(const AbortTxResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AbortTxResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxIdentifier txid = 1;
  bool has_txid() const;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  const ::azino::TxIdentifier& txid() const;
  ::azino::TxIdentifier* mutable_txid();
  ::azino::TxIdentifier* release_txid();
  void set_allocated_txid(::azino::TxIdentifier* txid);

  // @@protoc_insertion_point(class_scope:azino.txplanner.AbortTxResponse)
 private:
  inline void set_has_txid();
  inline void clear_has_txid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxIdentifier* txid_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static AbortTxResponse* default_instance_;
};
// -------------------------------------------------------------------

class ValidateTxRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.ValidateTxRequest) */ {
 public:
  ValidateTxRequest();
  virtual ~ValidateTxRequest();

  ValidateTxRequest(const ValidateTxRequest& from);

  inline ValidateTxRequest& operator=(const ValidateTxRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidateTxRequest& default_instance();

  void Swap(ValidateTxRequest* other);

  // implements Message ----------------------------------------------

  inline ValidateTxRequest* New() const { return New(NULL); }

  ValidateTxRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ValidateTxRequest& from);
  void MergeFrom(const ValidateTxRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ValidateTxRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxIdentifier txid = 1;
  bool has_txid() const;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  const ::azino::TxIdentifier& txid() const;
  ::azino::TxIdentifier* mutable_txid();
  ::azino::TxIdentifier* release_txid();
  void set_allocated_txid(::azino::TxIdentifier* txid);

  // optional bool is_early_validation = 2;
  bool has_is_early_validation() const;
  void clear_is_early_validation();
  static const int kIsEarlyValidationFieldNumber = 2;
  bool is_early_validation() const;
  void set_is_early_validation(bool value);

  // @@protoc_insertion_point(class_scope:azino.txplanner.ValidateTxRequest)
 private:
  inline void set_has_txid();
  inline void clear_has_txid();
  inline void set_has_is_early_validation();
  inline void clear_has_is_early_validation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxIdentifier* txid_;
  bool is_early_validation_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static ValidateTxRequest* default_instance_;
};
// -------------------------------------------------------------------

class ValidateTxResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.ValidateTxResponse) */ {
 public:
  ValidateTxResponse();
  virtual ~ValidateTxResponse();

  ValidateTxResponse(const ValidateTxResponse& from);

  inline ValidateTxResponse& operator=(const ValidateTxResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidateTxResponse& default_instance();

  void Swap(ValidateTxResponse* other);

  // implements Message ----------------------------------------------

  inline ValidateTxResponse* New() const { return New(NULL); }

  ValidateTxResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ValidateTxResponse& from);
  void MergeFrom(const ValidateTxResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ValidateTxResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxIdentifier txid = 1;
  bool has_txid() const;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  const ::azino::TxIdentifier& txid() const;
  ::azino::TxIdentifier* mutable_txid();
  ::azino::TxIdentifier* release_txid();
  void set_allocated_txid(::azino::TxIdentifier* txid);

  // @@protoc_insertion_point(class_scope:azino.txplanner.ValidateTxResponse)
 private:
  inline void set_has_txid();
  inline void clear_has_txid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxIdentifier* txid_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static ValidateTxResponse* default_instance_;
};
// -------------------------------------------------------------------

class Dep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.Dep) */ {
 public:
  Dep();
  virtual ~Dep();

  Dep(const Dep& from);

  inline Dep& operator=(const Dep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dep& default_instance();

  void Swap(Dep* other);

  // implements Message ----------------------------------------------

  inline Dep* New() const { return New(NULL); }

  Dep* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dep& from);
  void MergeFrom(const Dep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional .azino.TxIdentifier t1 = 2;
  bool has_t1() const;
  void clear_t1();
  static const int kT1FieldNumber = 2;
  const ::azino::TxIdentifier& t1() const;
  ::azino::TxIdentifier* mutable_t1();
  ::azino::TxIdentifier* release_t1();
  void set_allocated_t1(::azino::TxIdentifier* t1);

  // optional .azino.TxIdentifier t2 = 3;
  bool has_t2() const;
  void clear_t2();
  static const int kT2FieldNumber = 3;
  const ::azino::TxIdentifier& t2() const;
  ::azino::TxIdentifier* mutable_t2();
  ::azino::TxIdentifier* release_t2();
  void set_allocated_t2(::azino::TxIdentifier* t2);

  // @@protoc_insertion_point(class_scope:azino.txplanner.Dep)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_t1();
  inline void clear_has_t1();
  inline void set_has_t2();
  inline void clear_has_t2();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::azino::TxIdentifier* t1_;
  ::azino::TxIdentifier* t2_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static Dep* default_instance_;
};
// -------------------------------------------------------------------

class DepRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.DepRequest) */ {
 public:
  DepRequest();
  virtual ~DepRequest();

  DepRequest(const DepRequest& from);

  inline DepRequest& operator=(const DepRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DepRequest& default_instance();

  void Swap(DepRequest* other);

  // implements Message ----------------------------------------------

  inline DepRequest* New() const { return New(NULL); }

  DepRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DepRequest& from);
  void MergeFrom(const DepRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DepRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .azino.txplanner.Dep deps = 1;
  int deps_size() const;
  void clear_deps();
  static const int kDepsFieldNumber = 1;
  const ::azino::txplanner::Dep& deps(int index) const;
  ::azino::txplanner::Dep* mutable_deps(int index);
  ::azino::txplanner::Dep* add_deps();
  ::google::protobuf::RepeatedPtrField< ::azino::txplanner::Dep >*
      mutable_deps();
  const ::google::protobuf::RepeatedPtrField< ::azino::txplanner::Dep >&
      deps() const;

  // @@protoc_insertion_point(class_scope:azino.txplanner.DepRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::azino::txplanner::Dep > deps_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static DepRequest* default_instance_;
};
// -------------------------------------------------------------------

class DepResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.DepResponse) */ {
 public:
  DepResponse();
  virtual ~DepResponse();

  DepResponse(const DepResponse& from);

  inline DepResponse& operator=(const DepResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DepResponse& default_instance();

  void Swap(DepResponse* other);

  // implements Message ----------------------------------------------

  inline DepResponse* New() const { return New(NULL); }

  DepResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DepResponse& from);
  void MergeFrom(const DepResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DepResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 error_code = 1;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::google::protobuf::uint64 error_code() const;
  void set_error_code(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:azino.txplanner.DepResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 error_code_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static DepResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetMinATSRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.GetMinATSRequest) */ {
 public:
  GetMinATSRequest();
  virtual ~GetMinATSRequest();

  GetMinATSRequest(const GetMinATSRequest& from);

  inline GetMinATSRequest& operator=(const GetMinATSRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMinATSRequest& default_instance();

  void Swap(GetMinATSRequest* other);

  // implements Message ----------------------------------------------

  inline GetMinATSRequest* New() const { return New(NULL); }

  GetMinATSRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMinATSRequest& from);
  void MergeFrom(const GetMinATSRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetMinATSRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:azino.txplanner.GetMinATSRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static GetMinATSRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetMinATSResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.GetMinATSResponse) */ {
 public:
  GetMinATSResponse();
  virtual ~GetMinATSResponse();

  GetMinATSResponse(const GetMinATSResponse& from);

  inline GetMinATSResponse& operator=(const GetMinATSResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMinATSResponse& default_instance();

  void Swap(GetMinATSResponse* other);

  // implements Message ----------------------------------------------

  inline GetMinATSResponse* New() const { return New(NULL); }

  GetMinATSResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMinATSResponse& from);
  void MergeFrom(const GetMinATSResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetMinATSResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 min_ats = 1;
  bool has_min_ats() const;
  void clear_min_ats();
  static const int kMinAtsFieldNumber = 1;
  ::google::protobuf::uint64 min_ats() const;
  void set_min_ats(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:azino.txplanner.GetMinATSResponse)
 private:
  inline void set_has_min_ats();
  inline void clear_has_min_ats();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 min_ats_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static GetMinATSResponse* default_instance_;
};
// -------------------------------------------------------------------

class RegionMetric : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.RegionMetric) */ {
 public:
  RegionMetric();
  virtual ~RegionMetric();

  RegionMetric(const RegionMetric& from);

  inline RegionMetric& operator=(const RegionMetric& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionMetric& default_instance();

  void Swap(RegionMetric* other);

  // implements Message ----------------------------------------------

  inline RegionMetric* New() const { return New(NULL); }

  RegionMetric* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionMetric& from);
  void MergeFrom(const RegionMetric& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegionMetric* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 read_qps = 1;
  bool has_read_qps() const;
  void clear_read_qps();
  static const int kReadQpsFieldNumber = 1;
  ::google::protobuf::int64 read_qps() const;
  void set_read_qps(::google::protobuf::int64 value);

  // optional int64 write_qps = 2;
  bool has_write_qps() const;
  void clear_write_qps();
  static const int kWriteQpsFieldNumber = 2;
  ::google::protobuf::int64 write_qps() const;
  void set_write_qps(::google::protobuf::int64 value);

  // repeated string pessimism_key = 3;
  int pessimism_key_size() const;
  void clear_pessimism_key();
  static const int kPessimismKeyFieldNumber = 3;
  const ::std::string& pessimism_key(int index) const;
  ::std::string* mutable_pessimism_key(int index);
  void set_pessimism_key(int index, const ::std::string& value);
  void set_pessimism_key(int index, const char* value);
  void set_pessimism_key(int index, const char* value, size_t size);
  ::std::string* add_pessimism_key();
  void add_pessimism_key(const ::std::string& value);
  void add_pessimism_key(const char* value);
  void add_pessimism_key(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pessimism_key() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pessimism_key();

  // @@protoc_insertion_point(class_scope:azino.txplanner.RegionMetric)
 private:
  inline void set_has_read_qps();
  inline void clear_has_read_qps();
  inline void set_has_write_qps();
  inline void clear_has_write_qps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 read_qps_;
  ::google::protobuf::int64 write_qps_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pessimism_key_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static RegionMetric* default_instance_;
};
// -------------------------------------------------------------------

class RegionMetricRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.RegionMetricRequest) */ {
 public:
  RegionMetricRequest();
  virtual ~RegionMetricRequest();

  RegionMetricRequest(const RegionMetricRequest& from);

  inline RegionMetricRequest& operator=(const RegionMetricRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionMetricRequest& default_instance();

  void Swap(RegionMetricRequest* other);

  // implements Message ----------------------------------------------

  inline RegionMetricRequest* New() const { return New(NULL); }

  RegionMetricRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionMetricRequest& from);
  void MergeFrom(const RegionMetricRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegionMetricRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.RangePB range = 1;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 1;
  const ::azino::RangePB& range() const;
  ::azino::RangePB* mutable_range();
  ::azino::RangePB* release_range();
  void set_allocated_range(::azino::RangePB* range);

  // optional .azino.txplanner.RegionMetric metric = 2;
  bool has_metric() const;
  void clear_metric();
  static const int kMetricFieldNumber = 2;
  const ::azino::txplanner::RegionMetric& metric() const;
  ::azino::txplanner::RegionMetric* mutable_metric();
  ::azino::txplanner::RegionMetric* release_metric();
  void set_allocated_metric(::azino::txplanner::RegionMetric* metric);

  // @@protoc_insertion_point(class_scope:azino.txplanner.RegionMetricRequest)
 private:
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_metric();
  inline void clear_has_metric();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::RangePB* range_;
  ::azino::txplanner::RegionMetric* metric_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static RegionMetricRequest* default_instance_;
};
// -------------------------------------------------------------------

class RegionMetricResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.RegionMetricResponse) */ {
 public:
  RegionMetricResponse();
  virtual ~RegionMetricResponse();

  RegionMetricResponse(const RegionMetricResponse& from);

  inline RegionMetricResponse& operator=(const RegionMetricResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionMetricResponse& default_instance();

  void Swap(RegionMetricResponse* other);

  // implements Message ----------------------------------------------

  inline RegionMetricResponse* New() const { return New(NULL); }

  RegionMetricResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionMetricResponse& from);
  void MergeFrom(const RegionMetricResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegionMetricResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:azino.txplanner.RegionMetricResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static RegionMetricResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetPartitionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.GetPartitionRequest) */ {
 public:
  GetPartitionRequest();
  virtual ~GetPartitionRequest();

  GetPartitionRequest(const GetPartitionRequest& from);

  inline GetPartitionRequest& operator=(const GetPartitionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPartitionRequest& default_instance();

  void Swap(GetPartitionRequest* other);

  // implements Message ----------------------------------------------

  inline GetPartitionRequest* New() const { return New(NULL); }

  GetPartitionRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPartitionRequest& from);
  void MergeFrom(const GetPartitionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetPartitionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:azino.txplanner.GetPartitionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static GetPartitionRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetPartitionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txplanner.GetPartitionResponse) */ {
 public:
  GetPartitionResponse();
  virtual ~GetPartitionResponse();

  GetPartitionResponse(const GetPartitionResponse& from);

  inline GetPartitionResponse& operator=(const GetPartitionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPartitionResponse& default_instance();

  void Swap(GetPartitionResponse* other);

  // implements Message ----------------------------------------------

  inline GetPartitionResponse* New() const { return New(NULL); }

  GetPartitionResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPartitionResponse& from);
  void MergeFrom(const GetPartitionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetPartitionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.PartitionPB partition = 1;
  bool has_partition() const;
  void clear_partition();
  static const int kPartitionFieldNumber = 1;
  const ::azino::PartitionPB& partition() const;
  ::azino::PartitionPB* mutable_partition();
  ::azino::PartitionPB* release_partition();
  void set_allocated_partition(::azino::PartitionPB* partition);

  // @@protoc_insertion_point(class_scope:azino.txplanner.GetPartitionResponse)
 private:
  inline void set_has_partition();
  inline void clear_has_partition();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::PartitionPB* partition_;
  friend void  protobuf_AddDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_AssignDesc_service_2ftxplanner_2ftxplanner_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxplanner_2ftxplanner_2eproto();

  void InitAsDefaultInstance();
  static GetPartitionResponse* default_instance_;
};
// ===================================================================

class TxService_Stub;

class TxService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TxService() {};
 public:
  virtual ~TxService();

  typedef TxService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void BeginTx(::google::protobuf::RpcController* controller,
                       const ::azino::txplanner::BeginTxRequest* request,
                       ::azino::txplanner::BeginTxResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CommitTx(::google::protobuf::RpcController* controller,
                       const ::azino::txplanner::CommitTxRequest* request,
                       ::azino::txplanner::CommitTxResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AbortTx(::google::protobuf::RpcController* controller,
                       const ::azino::txplanner::AbortTxRequest* request,
                       ::azino::txplanner::AbortTxResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ValidateTx(::google::protobuf::RpcController* controller,
                       const ::azino::txplanner::ValidateTxRequest* request,
                       ::azino::txplanner::ValidateTxResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TxService);
};

class TxService_Stub : public TxService {
 public:
  TxService_Stub(::google::protobuf::RpcChannel* channel);
  TxService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~TxService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements TxService ------------------------------------------

  void BeginTx(::google::protobuf::RpcController* controller,
                       const ::azino::txplanner::BeginTxRequest* request,
                       ::azino::txplanner::BeginTxResponse* response,
                       ::google::protobuf::Closure* done);
  void CommitTx(::google::protobuf::RpcController* controller,
                       const ::azino::txplanner::CommitTxRequest* request,
                       ::azino::txplanner::CommitTxResponse* response,
                       ::google::protobuf::Closure* done);
  void AbortTx(::google::protobuf::RpcController* controller,
                       const ::azino::txplanner::AbortTxRequest* request,
                       ::azino::txplanner::AbortTxResponse* response,
                       ::google::protobuf::Closure* done);
  void ValidateTx(::google::protobuf::RpcController* controller,
                       const ::azino::txplanner::ValidateTxRequest* request,
                       ::azino::txplanner::ValidateTxResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TxService_Stub);
};


// -------------------------------------------------------------------

class RegionService_Stub;

class RegionService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RegionService() {};
 public:
  virtual ~RegionService();

  typedef RegionService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void RWDep(::google::protobuf::RpcController* controller,
                       const ::azino::txplanner::DepRequest* request,
                       ::azino::txplanner::DepResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetMinATS(::google::protobuf::RpcController* controller,
                       const ::azino::txplanner::GetMinATSRequest* request,
                       ::azino::txplanner::GetMinATSResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RegionMetric(::google::protobuf::RpcController* controller,
                       const ::azino::txplanner::RegionMetricRequest* request,
                       ::azino::txplanner::RegionMetricResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RegionService);
};

class RegionService_Stub : public RegionService {
 public:
  RegionService_Stub(::google::protobuf::RpcChannel* channel);
  RegionService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~RegionService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements RegionService ------------------------------------------

  void RWDep(::google::protobuf::RpcController* controller,
                       const ::azino::txplanner::DepRequest* request,
                       ::azino::txplanner::DepResponse* response,
                       ::google::protobuf::Closure* done);
  void GetMinATS(::google::protobuf::RpcController* controller,
                       const ::azino::txplanner::GetMinATSRequest* request,
                       ::azino::txplanner::GetMinATSResponse* response,
                       ::google::protobuf::Closure* done);
  void RegionMetric(::google::protobuf::RpcController* controller,
                       const ::azino::txplanner::RegionMetricRequest* request,
                       ::azino::txplanner::RegionMetricResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RegionService_Stub);
};


// -------------------------------------------------------------------

class PartitionService_Stub;

class PartitionService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline PartitionService() {};
 public:
  virtual ~PartitionService();

  typedef PartitionService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetPartition(::google::protobuf::RpcController* controller,
                       const ::azino::txplanner::GetPartitionRequest* request,
                       ::azino::txplanner::GetPartitionResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PartitionService);
};

class PartitionService_Stub : public PartitionService {
 public:
  PartitionService_Stub(::google::protobuf::RpcChannel* channel);
  PartitionService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~PartitionService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements PartitionService ------------------------------------------

  void GetPartition(::google::protobuf::RpcController* controller,
                       const ::azino::txplanner::GetPartitionRequest* request,
                       ::azino::txplanner::GetPartitionResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PartitionService_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BeginTxRequest

// -------------------------------------------------------------------

// BeginTxResponse

// optional .azino.TxIdentifier txid = 1;
inline bool BeginTxResponse::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeginTxResponse::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeginTxResponse::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeginTxResponse::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
inline const ::azino::TxIdentifier& BeginTxResponse::txid() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.BeginTxResponse.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
inline ::azino::TxIdentifier* BeginTxResponse::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.BeginTxResponse.txid)
  return txid_;
}
inline ::azino::TxIdentifier* BeginTxResponse::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txplanner.BeginTxResponse.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
inline void BeginTxResponse::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.BeginTxResponse.txid)
}

// optional .azino.PartitionPB partition = 2;
inline bool BeginTxResponse::has_partition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeginTxResponse::set_has_partition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BeginTxResponse::clear_has_partition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BeginTxResponse::clear_partition() {
  if (partition_ != NULL) partition_->::azino::PartitionPB::Clear();
  clear_has_partition();
}
inline const ::azino::PartitionPB& BeginTxResponse::partition() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.BeginTxResponse.partition)
  return partition_ != NULL ? *partition_ : *default_instance_->partition_;
}
inline ::azino::PartitionPB* BeginTxResponse::mutable_partition() {
  set_has_partition();
  if (partition_ == NULL) {
    partition_ = new ::azino::PartitionPB;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.BeginTxResponse.partition)
  return partition_;
}
inline ::azino::PartitionPB* BeginTxResponse::release_partition() {
  // @@protoc_insertion_point(field_release:azino.txplanner.BeginTxResponse.partition)
  clear_has_partition();
  ::azino::PartitionPB* temp = partition_;
  partition_ = NULL;
  return temp;
}
inline void BeginTxResponse::set_allocated_partition(::azino::PartitionPB* partition) {
  delete partition_;
  partition_ = partition;
  if (partition) {
    set_has_partition();
  } else {
    clear_has_partition();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.BeginTxResponse.partition)
}

// -------------------------------------------------------------------

// CommitTxRequest

// optional .azino.TxIdentifier txid = 1;
inline bool CommitTxRequest::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommitTxRequest::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommitTxRequest::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommitTxRequest::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
inline const ::azino::TxIdentifier& CommitTxRequest::txid() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.CommitTxRequest.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
inline ::azino::TxIdentifier* CommitTxRequest::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.CommitTxRequest.txid)
  return txid_;
}
inline ::azino::TxIdentifier* CommitTxRequest::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txplanner.CommitTxRequest.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
inline void CommitTxRequest::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.CommitTxRequest.txid)
}

// -------------------------------------------------------------------

// CommitTxResponse

// optional .azino.TxIdentifier txid = 1;
inline bool CommitTxResponse::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommitTxResponse::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommitTxResponse::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommitTxResponse::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
inline const ::azino::TxIdentifier& CommitTxResponse::txid() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.CommitTxResponse.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
inline ::azino::TxIdentifier* CommitTxResponse::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.CommitTxResponse.txid)
  return txid_;
}
inline ::azino::TxIdentifier* CommitTxResponse::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txplanner.CommitTxResponse.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
inline void CommitTxResponse::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.CommitTxResponse.txid)
}

// -------------------------------------------------------------------

// AbortTxRequest

// optional .azino.TxIdentifier txid = 1;
inline bool AbortTxRequest::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AbortTxRequest::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AbortTxRequest::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AbortTxRequest::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
inline const ::azino::TxIdentifier& AbortTxRequest::txid() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.AbortTxRequest.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
inline ::azino::TxIdentifier* AbortTxRequest::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.AbortTxRequest.txid)
  return txid_;
}
inline ::azino::TxIdentifier* AbortTxRequest::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txplanner.AbortTxRequest.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
inline void AbortTxRequest::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.AbortTxRequest.txid)
}

// -------------------------------------------------------------------

// AbortTxResponse

// optional .azino.TxIdentifier txid = 1;
inline bool AbortTxResponse::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AbortTxResponse::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AbortTxResponse::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AbortTxResponse::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
inline const ::azino::TxIdentifier& AbortTxResponse::txid() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.AbortTxResponse.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
inline ::azino::TxIdentifier* AbortTxResponse::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.AbortTxResponse.txid)
  return txid_;
}
inline ::azino::TxIdentifier* AbortTxResponse::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txplanner.AbortTxResponse.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
inline void AbortTxResponse::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.AbortTxResponse.txid)
}

// -------------------------------------------------------------------

// ValidateTxRequest

// optional .azino.TxIdentifier txid = 1;
inline bool ValidateTxRequest::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValidateTxRequest::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ValidateTxRequest::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ValidateTxRequest::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
inline const ::azino::TxIdentifier& ValidateTxRequest::txid() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.ValidateTxRequest.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
inline ::azino::TxIdentifier* ValidateTxRequest::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.ValidateTxRequest.txid)
  return txid_;
}
inline ::azino::TxIdentifier* ValidateTxRequest::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txplanner.ValidateTxRequest.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
inline void ValidateTxRequest::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.ValidateTxRequest.txid)
}

// optional bool is_early_validation = 2;
inline bool ValidateTxRequest::has_is_early_validation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ValidateTxRequest::set_has_is_early_validation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ValidateTxRequest::clear_has_is_early_validation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ValidateTxRequest::clear_is_early_validation() {
  is_early_validation_ = false;
  clear_has_is_early_validation();
}
inline bool ValidateTxRequest::is_early_validation() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.ValidateTxRequest.is_early_validation)
  return is_early_validation_;
}
inline void ValidateTxRequest::set_is_early_validation(bool value) {
  set_has_is_early_validation();
  is_early_validation_ = value;
  // @@protoc_insertion_point(field_set:azino.txplanner.ValidateTxRequest.is_early_validation)
}

// -------------------------------------------------------------------

// ValidateTxResponse

// optional .azino.TxIdentifier txid = 1;
inline bool ValidateTxResponse::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValidateTxResponse::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ValidateTxResponse::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ValidateTxResponse::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
inline const ::azino::TxIdentifier& ValidateTxResponse::txid() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.ValidateTxResponse.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
inline ::azino::TxIdentifier* ValidateTxResponse::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.ValidateTxResponse.txid)
  return txid_;
}
inline ::azino::TxIdentifier* ValidateTxResponse::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txplanner.ValidateTxResponse.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
inline void ValidateTxResponse::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.ValidateTxResponse.txid)
}

// -------------------------------------------------------------------

// Dep

// optional string key = 1;
inline bool Dep::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dep::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dep::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dep::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Dep::key() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.Dep.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Dep::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.txplanner.Dep.key)
}
inline void Dep::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.txplanner.Dep.key)
}
inline void Dep::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.txplanner.Dep.key)
}
inline ::std::string* Dep::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.txplanner.Dep.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Dep::release_key() {
  // @@protoc_insertion_point(field_release:azino.txplanner.Dep.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Dep::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.Dep.key)
}

// optional .azino.TxIdentifier t1 = 2;
inline bool Dep::has_t1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dep::set_has_t1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dep::clear_has_t1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dep::clear_t1() {
  if (t1_ != NULL) t1_->::azino::TxIdentifier::Clear();
  clear_has_t1();
}
inline const ::azino::TxIdentifier& Dep::t1() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.Dep.t1)
  return t1_ != NULL ? *t1_ : *default_instance_->t1_;
}
inline ::azino::TxIdentifier* Dep::mutable_t1() {
  set_has_t1();
  if (t1_ == NULL) {
    t1_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.Dep.t1)
  return t1_;
}
inline ::azino::TxIdentifier* Dep::release_t1() {
  // @@protoc_insertion_point(field_release:azino.txplanner.Dep.t1)
  clear_has_t1();
  ::azino::TxIdentifier* temp = t1_;
  t1_ = NULL;
  return temp;
}
inline void Dep::set_allocated_t1(::azino::TxIdentifier* t1) {
  delete t1_;
  t1_ = t1;
  if (t1) {
    set_has_t1();
  } else {
    clear_has_t1();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.Dep.t1)
}

// optional .azino.TxIdentifier t2 = 3;
inline bool Dep::has_t2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dep::set_has_t2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dep::clear_has_t2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dep::clear_t2() {
  if (t2_ != NULL) t2_->::azino::TxIdentifier::Clear();
  clear_has_t2();
}
inline const ::azino::TxIdentifier& Dep::t2() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.Dep.t2)
  return t2_ != NULL ? *t2_ : *default_instance_->t2_;
}
inline ::azino::TxIdentifier* Dep::mutable_t2() {
  set_has_t2();
  if (t2_ == NULL) {
    t2_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.Dep.t2)
  return t2_;
}
inline ::azino::TxIdentifier* Dep::release_t2() {
  // @@protoc_insertion_point(field_release:azino.txplanner.Dep.t2)
  clear_has_t2();
  ::azino::TxIdentifier* temp = t2_;
  t2_ = NULL;
  return temp;
}
inline void Dep::set_allocated_t2(::azino::TxIdentifier* t2) {
  delete t2_;
  t2_ = t2;
  if (t2) {
    set_has_t2();
  } else {
    clear_has_t2();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.Dep.t2)
}

// -------------------------------------------------------------------

// DepRequest

// repeated .azino.txplanner.Dep deps = 1;
inline int DepRequest::deps_size() const {
  return deps_.size();
}
inline void DepRequest::clear_deps() {
  deps_.Clear();
}
inline const ::azino::txplanner::Dep& DepRequest::deps(int index) const {
  // @@protoc_insertion_point(field_get:azino.txplanner.DepRequest.deps)
  return deps_.Get(index);
}
inline ::azino::txplanner::Dep* DepRequest::mutable_deps(int index) {
  // @@protoc_insertion_point(field_mutable:azino.txplanner.DepRequest.deps)
  return deps_.Mutable(index);
}
inline ::azino::txplanner::Dep* DepRequest::add_deps() {
  // @@protoc_insertion_point(field_add:azino.txplanner.DepRequest.deps)
  return deps_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::azino::txplanner::Dep >*
DepRequest::mutable_deps() {
  // @@protoc_insertion_point(field_mutable_list:azino.txplanner.DepRequest.deps)
  return &deps_;
}
inline const ::google::protobuf::RepeatedPtrField< ::azino::txplanner::Dep >&
DepRequest::deps() const {
  // @@protoc_insertion_point(field_list:azino.txplanner.DepRequest.deps)
  return deps_;
}

// -------------------------------------------------------------------

// DepResponse

// optional uint64 error_code = 1;
inline bool DepResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DepResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DepResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DepResponse::clear_error_code() {
  error_code_ = GOOGLE_ULONGLONG(0);
  clear_has_error_code();
}
inline ::google::protobuf::uint64 DepResponse::error_code() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.DepResponse.error_code)
  return error_code_;
}
inline void DepResponse::set_error_code(::google::protobuf::uint64 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:azino.txplanner.DepResponse.error_code)
}

// -------------------------------------------------------------------

// GetMinATSRequest

// -------------------------------------------------------------------

// GetMinATSResponse

// optional uint64 min_ats = 1;
inline bool GetMinATSResponse::has_min_ats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMinATSResponse::set_has_min_ats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMinATSResponse::clear_has_min_ats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMinATSResponse::clear_min_ats() {
  min_ats_ = GOOGLE_ULONGLONG(0);
  clear_has_min_ats();
}
inline ::google::protobuf::uint64 GetMinATSResponse::min_ats() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.GetMinATSResponse.min_ats)
  return min_ats_;
}
inline void GetMinATSResponse::set_min_ats(::google::protobuf::uint64 value) {
  set_has_min_ats();
  min_ats_ = value;
  // @@protoc_insertion_point(field_set:azino.txplanner.GetMinATSResponse.min_ats)
}

// -------------------------------------------------------------------

// RegionMetric

// optional int64 read_qps = 1;
inline bool RegionMetric::has_read_qps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionMetric::set_has_read_qps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionMetric::clear_has_read_qps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionMetric::clear_read_qps() {
  read_qps_ = GOOGLE_LONGLONG(0);
  clear_has_read_qps();
}
inline ::google::protobuf::int64 RegionMetric::read_qps() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.RegionMetric.read_qps)
  return read_qps_;
}
inline void RegionMetric::set_read_qps(::google::protobuf::int64 value) {
  set_has_read_qps();
  read_qps_ = value;
  // @@protoc_insertion_point(field_set:azino.txplanner.RegionMetric.read_qps)
}

// optional int64 write_qps = 2;
inline bool RegionMetric::has_write_qps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegionMetric::set_has_write_qps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegionMetric::clear_has_write_qps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegionMetric::clear_write_qps() {
  write_qps_ = GOOGLE_LONGLONG(0);
  clear_has_write_qps();
}
inline ::google::protobuf::int64 RegionMetric::write_qps() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.RegionMetric.write_qps)
  return write_qps_;
}
inline void RegionMetric::set_write_qps(::google::protobuf::int64 value) {
  set_has_write_qps();
  write_qps_ = value;
  // @@protoc_insertion_point(field_set:azino.txplanner.RegionMetric.write_qps)
}

// repeated string pessimism_key = 3;
inline int RegionMetric::pessimism_key_size() const {
  return pessimism_key_.size();
}
inline void RegionMetric::clear_pessimism_key() {
  pessimism_key_.Clear();
}
inline const ::std::string& RegionMetric::pessimism_key(int index) const {
  // @@protoc_insertion_point(field_get:azino.txplanner.RegionMetric.pessimism_key)
  return pessimism_key_.Get(index);
}
inline ::std::string* RegionMetric::mutable_pessimism_key(int index) {
  // @@protoc_insertion_point(field_mutable:azino.txplanner.RegionMetric.pessimism_key)
  return pessimism_key_.Mutable(index);
}
inline void RegionMetric::set_pessimism_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:azino.txplanner.RegionMetric.pessimism_key)
  pessimism_key_.Mutable(index)->assign(value);
}
inline void RegionMetric::set_pessimism_key(int index, const char* value) {
  pessimism_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:azino.txplanner.RegionMetric.pessimism_key)
}
inline void RegionMetric::set_pessimism_key(int index, const char* value, size_t size) {
  pessimism_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:azino.txplanner.RegionMetric.pessimism_key)
}
inline ::std::string* RegionMetric::add_pessimism_key() {
  // @@protoc_insertion_point(field_add_mutable:azino.txplanner.RegionMetric.pessimism_key)
  return pessimism_key_.Add();
}
inline void RegionMetric::add_pessimism_key(const ::std::string& value) {
  pessimism_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:azino.txplanner.RegionMetric.pessimism_key)
}
inline void RegionMetric::add_pessimism_key(const char* value) {
  pessimism_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:azino.txplanner.RegionMetric.pessimism_key)
}
inline void RegionMetric::add_pessimism_key(const char* value, size_t size) {
  pessimism_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:azino.txplanner.RegionMetric.pessimism_key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RegionMetric::pessimism_key() const {
  // @@protoc_insertion_point(field_list:azino.txplanner.RegionMetric.pessimism_key)
  return pessimism_key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RegionMetric::mutable_pessimism_key() {
  // @@protoc_insertion_point(field_mutable_list:azino.txplanner.RegionMetric.pessimism_key)
  return &pessimism_key_;
}

// -------------------------------------------------------------------

// RegionMetricRequest

// optional .azino.RangePB range = 1;
inline bool RegionMetricRequest::has_range() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegionMetricRequest::set_has_range() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegionMetricRequest::clear_has_range() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegionMetricRequest::clear_range() {
  if (range_ != NULL) range_->::azino::RangePB::Clear();
  clear_has_range();
}
inline const ::azino::RangePB& RegionMetricRequest::range() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.RegionMetricRequest.range)
  return range_ != NULL ? *range_ : *default_instance_->range_;
}
inline ::azino::RangePB* RegionMetricRequest::mutable_range() {
  set_has_range();
  if (range_ == NULL) {
    range_ = new ::azino::RangePB;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.RegionMetricRequest.range)
  return range_;
}
inline ::azino::RangePB* RegionMetricRequest::release_range() {
  // @@protoc_insertion_point(field_release:azino.txplanner.RegionMetricRequest.range)
  clear_has_range();
  ::azino::RangePB* temp = range_;
  range_ = NULL;
  return temp;
}
inline void RegionMetricRequest::set_allocated_range(::azino::RangePB* range) {
  delete range_;
  range_ = range;
  if (range) {
    set_has_range();
  } else {
    clear_has_range();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.RegionMetricRequest.range)
}

// optional .azino.txplanner.RegionMetric metric = 2;
inline bool RegionMetricRequest::has_metric() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegionMetricRequest::set_has_metric() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegionMetricRequest::clear_has_metric() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegionMetricRequest::clear_metric() {
  if (metric_ != NULL) metric_->::azino::txplanner::RegionMetric::Clear();
  clear_has_metric();
}
inline const ::azino::txplanner::RegionMetric& RegionMetricRequest::metric() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.RegionMetricRequest.metric)
  return metric_ != NULL ? *metric_ : *default_instance_->metric_;
}
inline ::azino::txplanner::RegionMetric* RegionMetricRequest::mutable_metric() {
  set_has_metric();
  if (metric_ == NULL) {
    metric_ = new ::azino::txplanner::RegionMetric;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.RegionMetricRequest.metric)
  return metric_;
}
inline ::azino::txplanner::RegionMetric* RegionMetricRequest::release_metric() {
  // @@protoc_insertion_point(field_release:azino.txplanner.RegionMetricRequest.metric)
  clear_has_metric();
  ::azino::txplanner::RegionMetric* temp = metric_;
  metric_ = NULL;
  return temp;
}
inline void RegionMetricRequest::set_allocated_metric(::azino::txplanner::RegionMetric* metric) {
  delete metric_;
  metric_ = metric;
  if (metric) {
    set_has_metric();
  } else {
    clear_has_metric();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.RegionMetricRequest.metric)
}

// -------------------------------------------------------------------

// RegionMetricResponse

// -------------------------------------------------------------------

// GetPartitionRequest

// -------------------------------------------------------------------

// GetPartitionResponse

// optional .azino.PartitionPB partition = 1;
inline bool GetPartitionResponse::has_partition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPartitionResponse::set_has_partition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPartitionResponse::clear_has_partition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPartitionResponse::clear_partition() {
  if (partition_ != NULL) partition_->::azino::PartitionPB::Clear();
  clear_has_partition();
}
inline const ::azino::PartitionPB& GetPartitionResponse::partition() const {
  // @@protoc_insertion_point(field_get:azino.txplanner.GetPartitionResponse.partition)
  return partition_ != NULL ? *partition_ : *default_instance_->partition_;
}
inline ::azino::PartitionPB* GetPartitionResponse::mutable_partition() {
  set_has_partition();
  if (partition_ == NULL) {
    partition_ = new ::azino::PartitionPB;
  }
  // @@protoc_insertion_point(field_mutable:azino.txplanner.GetPartitionResponse.partition)
  return partition_;
}
inline ::azino::PartitionPB* GetPartitionResponse::release_partition() {
  // @@protoc_insertion_point(field_release:azino.txplanner.GetPartitionResponse.partition)
  clear_has_partition();
  ::azino::PartitionPB* temp = partition_;
  partition_ = NULL;
  return temp;
}
inline void GetPartitionResponse::set_allocated_partition(::azino::PartitionPB* partition) {
  delete partition_;
  partition_ = partition;
  if (partition) {
    set_has_partition();
  } else {
    clear_has_partition();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txplanner.GetPartitionResponse.partition)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace txplanner
}  // namespace azino

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2ftxplanner_2ftxplanner_2eproto__INCLUDED
