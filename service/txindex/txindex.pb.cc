// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/txindex/txindex.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/txindex/txindex.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace azino {
namespace txindex {

namespace {

const ::google::protobuf::Descriptor* WriteLockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteLockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteLockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteLockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteIntentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteIntentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteIntentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteIntentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CleanRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CleanRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CleanResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CleanResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* TxOpService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2ftxindex_2ftxindex_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_service_2ftxindex_2ftxindex_2eproto() {
  protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/txindex/txindex.proto");
  GOOGLE_CHECK(file != NULL);
  WriteLockRequest_descriptor_ = file->message_type(0);
  static const int WriteLockRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteLockRequest, txid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteLockRequest, key_),
  };
  WriteLockRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WriteLockRequest_descriptor_,
      WriteLockRequest::default_instance_,
      WriteLockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteLockRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(WriteLockRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteLockRequest, _internal_metadata_),
      -1);
  WriteLockResponse_descriptor_ = file->message_type(1);
  static const int WriteLockResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteLockResponse, tx_op_status_),
  };
  WriteLockResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WriteLockResponse_descriptor_,
      WriteLockResponse::default_instance_,
      WriteLockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteLockResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(WriteLockResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteLockResponse, _internal_metadata_),
      -1);
  WriteIntentRequest_descriptor_ = file->message_type(2);
  static const int WriteIntentRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentRequest, txid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentRequest, value_),
  };
  WriteIntentRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WriteIntentRequest_descriptor_,
      WriteIntentRequest::default_instance_,
      WriteIntentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(WriteIntentRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentRequest, _internal_metadata_),
      -1);
  WriteIntentResponse_descriptor_ = file->message_type(3);
  static const int WriteIntentResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentResponse, tx_op_status_),
  };
  WriteIntentResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WriteIntentResponse_descriptor_,
      WriteIntentResponse::default_instance_,
      WriteIntentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(WriteIntentResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentResponse, _internal_metadata_),
      -1);
  CleanRequest_descriptor_ = file->message_type(4);
  static const int CleanRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanRequest, txid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanRequest, key_),
  };
  CleanRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CleanRequest_descriptor_,
      CleanRequest::default_instance_,
      CleanRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CleanRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanRequest, _internal_metadata_),
      -1);
  CleanResponse_descriptor_ = file->message_type(5);
  static const int CleanResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanResponse, tx_op_status_),
  };
  CleanResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CleanResponse_descriptor_,
      CleanResponse::default_instance_,
      CleanResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CleanResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanResponse, _internal_metadata_),
      -1);
  CommitRequest_descriptor_ = file->message_type(6);
  static const int CommitRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, txid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, key_),
  };
  CommitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitRequest_descriptor_,
      CommitRequest::default_instance_,
      CommitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CommitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, _internal_metadata_),
      -1);
  CommitResponse_descriptor_ = file->message_type(7);
  static const int CommitResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, tx_op_status_),
  };
  CommitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitResponse_descriptor_,
      CommitResponse::default_instance_,
      CommitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CommitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, _internal_metadata_),
      -1);
  ReadRequest_descriptor_ = file->message_type(8);
  static const int ReadRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, txid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, key_),
  };
  ReadRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadRequest_descriptor_,
      ReadRequest::default_instance_,
      ReadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReadRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, _internal_metadata_),
      -1);
  ReadResponse_descriptor_ = file->message_type(9);
  static const int ReadResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResponse, tx_op_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResponse, value_),
  };
  ReadResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadResponse_descriptor_,
      ReadResponse::default_instance_,
      ReadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReadResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResponse, _internal_metadata_),
      -1);
  TxOpService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2ftxindex_2ftxindex_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WriteLockRequest_descriptor_, &WriteLockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WriteLockResponse_descriptor_, &WriteLockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WriteIntentRequest_descriptor_, &WriteIntentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WriteIntentResponse_descriptor_, &WriteIntentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CleanRequest_descriptor_, &CleanRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CleanResponse_descriptor_, &CleanResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitRequest_descriptor_, &CommitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitResponse_descriptor_, &CommitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadRequest_descriptor_, &ReadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadResponse_descriptor_, &ReadResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2ftxindex_2ftxindex_2eproto() {
  delete WriteLockRequest::default_instance_;
  delete WriteLockRequest_reflection_;
  delete WriteLockResponse::default_instance_;
  delete WriteLockResponse_reflection_;
  delete WriteIntentRequest::default_instance_;
  delete WriteIntentRequest_reflection_;
  delete WriteIntentResponse::default_instance_;
  delete WriteIntentResponse_reflection_;
  delete CleanRequest::default_instance_;
  delete CleanRequest_reflection_;
  delete CleanResponse::default_instance_;
  delete CleanResponse_reflection_;
  delete CommitRequest::default_instance_;
  delete CommitRequest_reflection_;
  delete CommitResponse::default_instance_;
  delete CommitResponse_reflection_;
  delete ReadRequest::default_instance_;
  delete ReadRequest_reflection_;
  delete ReadResponse::default_instance_;
  delete ReadResponse_reflection_;
}

void protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::azino::protobuf_AddDesc_service_2ftx_2eproto();
  ::azino::protobuf_AddDesc_service_2fkv_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035service/txindex/txindex.proto\022\razino.t"
    "xindex\032\020service/tx.proto\032\020service/kv.pro"
    "to\"B\n\020WriteLockRequest\022!\n\004txid\030\001 \001(\0132\023.a"
    "zino.TxIdentifier\022\013\n\003key\030\002 \001(\t\"<\n\021WriteL"
    "ockResponse\022\'\n\014tx_op_status\030\001 \001(\0132\021.azin"
    "o.TxOpStatus\"a\n\022WriteIntentRequest\022!\n\004tx"
    "id\030\001 \001(\0132\023.azino.TxIdentifier\022\013\n\003key\030\002 \001"
    "(\t\022\033\n\005value\030\003 \001(\0132\014.azino.Value\">\n\023Write"
    "IntentResponse\022\'\n\014tx_op_status\030\001 \001(\0132\021.a"
    "zino.TxOpStatus\">\n\014CleanRequest\022!\n\004txid\030"
    "\001 \001(\0132\023.azino.TxIdentifier\022\013\n\003key\030\002 \001(\t\""
    "8\n\rCleanResponse\022\'\n\014tx_op_status\030\001 \001(\0132\021"
    ".azino.TxOpStatus\"\?\n\rCommitRequest\022!\n\004tx"
    "id\030\001 \001(\0132\023.azino.TxIdentifier\022\013\n\003key\030\002 \001"
    "(\t\"9\n\016CommitResponse\022\'\n\014tx_op_status\030\001 \001"
    "(\0132\021.azino.TxOpStatus\"=\n\013ReadRequest\022!\n\004"
    "txid\030\001 \001(\0132\023.azino.TxIdentifier\022\013\n\003key\030\002"
    " \001(\t\"T\n\014ReadResponse\022\'\n\014tx_op_status\030\001 \001"
    "(\0132\021.azino.TxOpStatus\022\033\n\005value\030\002 \001(\0132\014.a"
    "zino.Value2\377\002\n\013TxOpService\022T\n\013WriteInten"
    "t\022!.azino.txindex.WriteIntentRequest\032\".a"
    "zino.txindex.WriteIntentResponse\022N\n\tWrit"
    "eLock\022\037.azino.txindex.WriteLockRequest\032 "
    ".azino.txindex.WriteLockResponse\022B\n\005Clea"
    "n\022\033.azino.txindex.CleanRequest\032\034.azino.t"
    "xindex.CleanResponse\022E\n\006Commit\022\034.azino.t"
    "xindex.CommitRequest\032\035.azino.txindex.Com"
    "mitResponse\022\?\n\004Read\022\032.azino.txindex.Read"
    "Request\032\033.azino.txindex.ReadResponseB\003\200\001"
    "\001", 1161);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/txindex/txindex.proto", &protobuf_RegisterTypes);
  WriteLockRequest::default_instance_ = new WriteLockRequest();
  WriteLockResponse::default_instance_ = new WriteLockResponse();
  WriteIntentRequest::default_instance_ = new WriteIntentRequest();
  WriteIntentResponse::default_instance_ = new WriteIntentResponse();
  CleanRequest::default_instance_ = new CleanRequest();
  CleanResponse::default_instance_ = new CleanResponse();
  CommitRequest::default_instance_ = new CommitRequest();
  CommitResponse::default_instance_ = new CommitResponse();
  ReadRequest::default_instance_ = new ReadRequest();
  ReadResponse::default_instance_ = new ReadResponse();
  WriteLockRequest::default_instance_->InitAsDefaultInstance();
  WriteLockResponse::default_instance_->InitAsDefaultInstance();
  WriteIntentRequest::default_instance_->InitAsDefaultInstance();
  WriteIntentResponse::default_instance_->InitAsDefaultInstance();
  CleanRequest::default_instance_->InitAsDefaultInstance();
  CleanResponse::default_instance_->InitAsDefaultInstance();
  CommitRequest::default_instance_->InitAsDefaultInstance();
  CommitResponse::default_instance_->InitAsDefaultInstance();
  ReadRequest::default_instance_->InitAsDefaultInstance();
  ReadResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2ftxindex_2ftxindex_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2ftxindex_2ftxindex_2eproto {
  StaticDescriptorInitializer_service_2ftxindex_2ftxindex_2eproto() {
    protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  }
} static_descriptor_initializer_service_2ftxindex_2ftxindex_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteLockRequest::kTxidFieldNumber;
const int WriteLockRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteLockRequest::WriteLockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txindex.WriteLockRequest)
}

void WriteLockRequest::InitAsDefaultInstance() {
  txid_ = const_cast< ::azino::TxIdentifier*>(&::azino::TxIdentifier::default_instance());
}

WriteLockRequest::WriteLockRequest(const WriteLockRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txindex.WriteLockRequest)
}

void WriteLockRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  txid_ = NULL;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteLockRequest::~WriteLockRequest() {
  // @@protoc_insertion_point(destructor:azino.txindex.WriteLockRequest)
  SharedDtor();
}

void WriteLockRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete txid_;
  }
}

void WriteLockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteLockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteLockRequest_descriptor_;
}

const WriteLockRequest& WriteLockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  return *default_instance_;
}

WriteLockRequest* WriteLockRequest::default_instance_ = NULL;

WriteLockRequest* WriteLockRequest::New(::google::protobuf::Arena* arena) const {
  WriteLockRequest* n = new WriteLockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WriteLockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txindex.WriteLockRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_txid()) {
      if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WriteLockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txindex.WriteLockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxIdentifier txid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.txindex.WriteLockRequest.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txindex.WriteLockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txindex.WriteLockRequest)
  return false;
#undef DO_
}

void WriteLockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txindex.WriteLockRequest)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->txid_, output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.txindex.WriteLockRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txindex.WriteLockRequest)
}

::google::protobuf::uint8* WriteLockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txindex.WriteLockRequest)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->txid_, false, target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.txindex.WriteLockRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txindex.WriteLockRequest)
  return target;
}

int WriteLockRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txindex.WriteLockRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .azino.TxIdentifier txid = 1;
    if (has_txid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->txid_);
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteLockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txindex.WriteLockRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WriteLockRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteLockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txindex.WriteLockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txindex.WriteLockRequest)
    MergeFrom(*source);
  }
}

void WriteLockRequest::MergeFrom(const WriteLockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txindex.WriteLockRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txid()) {
      mutable_txid()->::azino::TxIdentifier::MergeFrom(from.txid());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WriteLockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txindex.WriteLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteLockRequest::CopyFrom(const WriteLockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txindex.WriteLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteLockRequest::IsInitialized() const {

  return true;
}

void WriteLockRequest::Swap(WriteLockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteLockRequest::InternalSwap(WriteLockRequest* other) {
  std::swap(txid_, other->txid_);
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteLockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteLockRequest_descriptor_;
  metadata.reflection = WriteLockRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteLockRequest

// optional .azino.TxIdentifier txid = 1;
bool WriteLockRequest::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WriteLockRequest::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
void WriteLockRequest::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
void WriteLockRequest::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
const ::azino::TxIdentifier& WriteLockRequest::txid() const {
  // @@protoc_insertion_point(field_get:azino.txindex.WriteLockRequest.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
::azino::TxIdentifier* WriteLockRequest::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.WriteLockRequest.txid)
  return txid_;
}
::azino::TxIdentifier* WriteLockRequest::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txindex.WriteLockRequest.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
void WriteLockRequest::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.WriteLockRequest.txid)
}

// optional string key = 2;
bool WriteLockRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WriteLockRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void WriteLockRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void WriteLockRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& WriteLockRequest::key() const {
  // @@protoc_insertion_point(field_get:azino.txindex.WriteLockRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WriteLockRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.txindex.WriteLockRequest.key)
}
 void WriteLockRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.txindex.WriteLockRequest.key)
}
 void WriteLockRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.txindex.WriteLockRequest.key)
}
 ::std::string* WriteLockRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.txindex.WriteLockRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WriteLockRequest::release_key() {
  // @@protoc_insertion_point(field_release:azino.txindex.WriteLockRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WriteLockRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.WriteLockRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteLockResponse::kTxOpStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteLockResponse::WriteLockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txindex.WriteLockResponse)
}

void WriteLockResponse::InitAsDefaultInstance() {
  tx_op_status_ = const_cast< ::azino::TxOpStatus*>(&::azino::TxOpStatus::default_instance());
}

WriteLockResponse::WriteLockResponse(const WriteLockResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txindex.WriteLockResponse)
}

void WriteLockResponse::SharedCtor() {
  _cached_size_ = 0;
  tx_op_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteLockResponse::~WriteLockResponse() {
  // @@protoc_insertion_point(destructor:azino.txindex.WriteLockResponse)
  SharedDtor();
}

void WriteLockResponse::SharedDtor() {
  if (this != default_instance_) {
    delete tx_op_status_;
  }
}

void WriteLockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteLockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteLockResponse_descriptor_;
}

const WriteLockResponse& WriteLockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  return *default_instance_;
}

WriteLockResponse* WriteLockResponse::default_instance_ = NULL;

WriteLockResponse* WriteLockResponse::New(::google::protobuf::Arena* arena) const {
  WriteLockResponse* n = new WriteLockResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WriteLockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txindex.WriteLockResponse)
  if (has_tx_op_status()) {
    if (tx_op_status_ != NULL) tx_op_status_->::azino::TxOpStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WriteLockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txindex.WriteLockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxOpStatus tx_op_status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tx_op_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txindex.WriteLockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txindex.WriteLockResponse)
  return false;
#undef DO_
}

void WriteLockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txindex.WriteLockResponse)
  // optional .azino.TxOpStatus tx_op_status = 1;
  if (has_tx_op_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tx_op_status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txindex.WriteLockResponse)
}

::google::protobuf::uint8* WriteLockResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txindex.WriteLockResponse)
  // optional .azino.TxOpStatus tx_op_status = 1;
  if (has_tx_op_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tx_op_status_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txindex.WriteLockResponse)
  return target;
}

int WriteLockResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txindex.WriteLockResponse)
  int total_size = 0;

  // optional .azino.TxOpStatus tx_op_status = 1;
  if (has_tx_op_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tx_op_status_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteLockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txindex.WriteLockResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WriteLockResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteLockResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txindex.WriteLockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txindex.WriteLockResponse)
    MergeFrom(*source);
  }
}

void WriteLockResponse::MergeFrom(const WriteLockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txindex.WriteLockResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tx_op_status()) {
      mutable_tx_op_status()->::azino::TxOpStatus::MergeFrom(from.tx_op_status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WriteLockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txindex.WriteLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteLockResponse::CopyFrom(const WriteLockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txindex.WriteLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteLockResponse::IsInitialized() const {

  return true;
}

void WriteLockResponse::Swap(WriteLockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteLockResponse::InternalSwap(WriteLockResponse* other) {
  std::swap(tx_op_status_, other->tx_op_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteLockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteLockResponse_descriptor_;
  metadata.reflection = WriteLockResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteLockResponse

// optional .azino.TxOpStatus tx_op_status = 1;
bool WriteLockResponse::has_tx_op_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WriteLockResponse::set_has_tx_op_status() {
  _has_bits_[0] |= 0x00000001u;
}
void WriteLockResponse::clear_has_tx_op_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void WriteLockResponse::clear_tx_op_status() {
  if (tx_op_status_ != NULL) tx_op_status_->::azino::TxOpStatus::Clear();
  clear_has_tx_op_status();
}
const ::azino::TxOpStatus& WriteLockResponse::tx_op_status() const {
  // @@protoc_insertion_point(field_get:azino.txindex.WriteLockResponse.tx_op_status)
  return tx_op_status_ != NULL ? *tx_op_status_ : *default_instance_->tx_op_status_;
}
::azino::TxOpStatus* WriteLockResponse::mutable_tx_op_status() {
  set_has_tx_op_status();
  if (tx_op_status_ == NULL) {
    tx_op_status_ = new ::azino::TxOpStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.WriteLockResponse.tx_op_status)
  return tx_op_status_;
}
::azino::TxOpStatus* WriteLockResponse::release_tx_op_status() {
  // @@protoc_insertion_point(field_release:azino.txindex.WriteLockResponse.tx_op_status)
  clear_has_tx_op_status();
  ::azino::TxOpStatus* temp = tx_op_status_;
  tx_op_status_ = NULL;
  return temp;
}
void WriteLockResponse::set_allocated_tx_op_status(::azino::TxOpStatus* tx_op_status) {
  delete tx_op_status_;
  tx_op_status_ = tx_op_status;
  if (tx_op_status) {
    set_has_tx_op_status();
  } else {
    clear_has_tx_op_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.WriteLockResponse.tx_op_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteIntentRequest::kTxidFieldNumber;
const int WriteIntentRequest::kKeyFieldNumber;
const int WriteIntentRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteIntentRequest::WriteIntentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txindex.WriteIntentRequest)
}

void WriteIntentRequest::InitAsDefaultInstance() {
  txid_ = const_cast< ::azino::TxIdentifier*>(&::azino::TxIdentifier::default_instance());
  value_ = const_cast< ::azino::Value*>(&::azino::Value::default_instance());
}

WriteIntentRequest::WriteIntentRequest(const WriteIntentRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txindex.WriteIntentRequest)
}

void WriteIntentRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  txid_ = NULL;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteIntentRequest::~WriteIntentRequest() {
  // @@protoc_insertion_point(destructor:azino.txindex.WriteIntentRequest)
  SharedDtor();
}

void WriteIntentRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete txid_;
    delete value_;
  }
}

void WriteIntentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteIntentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteIntentRequest_descriptor_;
}

const WriteIntentRequest& WriteIntentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  return *default_instance_;
}

WriteIntentRequest* WriteIntentRequest::default_instance_ = NULL;

WriteIntentRequest* WriteIntentRequest::New(::google::protobuf::Arena* arena) const {
  WriteIntentRequest* n = new WriteIntentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WriteIntentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txindex.WriteIntentRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_txid()) {
      if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      if (value_ != NULL) value_->::azino::Value::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WriteIntentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txindex.WriteIntentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxIdentifier txid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.txindex.WriteIntentRequest.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional .azino.Value value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txindex.WriteIntentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txindex.WriteIntentRequest)
  return false;
#undef DO_
}

void WriteIntentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txindex.WriteIntentRequest)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->txid_, output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.txindex.WriteIntentRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // optional .azino.Value value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txindex.WriteIntentRequest)
}

::google::protobuf::uint8* WriteIntentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txindex.WriteIntentRequest)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->txid_, false, target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.txindex.WriteIntentRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional .azino.Value value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txindex.WriteIntentRequest)
  return target;
}

int WriteIntentRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txindex.WriteIntentRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .azino.TxIdentifier txid = 1;
    if (has_txid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->txid_);
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional .azino.Value value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->value_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteIntentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txindex.WriteIntentRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WriteIntentRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteIntentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txindex.WriteIntentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txindex.WriteIntentRequest)
    MergeFrom(*source);
  }
}

void WriteIntentRequest::MergeFrom(const WriteIntentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txindex.WriteIntentRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txid()) {
      mutable_txid()->::azino::TxIdentifier::MergeFrom(from.txid());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      mutable_value()->::azino::Value::MergeFrom(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WriteIntentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txindex.WriteIntentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteIntentRequest::CopyFrom(const WriteIntentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txindex.WriteIntentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteIntentRequest::IsInitialized() const {

  return true;
}

void WriteIntentRequest::Swap(WriteIntentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteIntentRequest::InternalSwap(WriteIntentRequest* other) {
  std::swap(txid_, other->txid_);
  key_.Swap(&other->key_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteIntentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteIntentRequest_descriptor_;
  metadata.reflection = WriteIntentRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteIntentRequest

// optional .azino.TxIdentifier txid = 1;
bool WriteIntentRequest::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WriteIntentRequest::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
void WriteIntentRequest::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
void WriteIntentRequest::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
const ::azino::TxIdentifier& WriteIntentRequest::txid() const {
  // @@protoc_insertion_point(field_get:azino.txindex.WriteIntentRequest.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
::azino::TxIdentifier* WriteIntentRequest::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.WriteIntentRequest.txid)
  return txid_;
}
::azino::TxIdentifier* WriteIntentRequest::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txindex.WriteIntentRequest.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
void WriteIntentRequest::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.WriteIntentRequest.txid)
}

// optional string key = 2;
bool WriteIntentRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WriteIntentRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void WriteIntentRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void WriteIntentRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& WriteIntentRequest::key() const {
  // @@protoc_insertion_point(field_get:azino.txindex.WriteIntentRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WriteIntentRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.txindex.WriteIntentRequest.key)
}
 void WriteIntentRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.txindex.WriteIntentRequest.key)
}
 void WriteIntentRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.txindex.WriteIntentRequest.key)
}
 ::std::string* WriteIntentRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.txindex.WriteIntentRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WriteIntentRequest::release_key() {
  // @@protoc_insertion_point(field_release:azino.txindex.WriteIntentRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WriteIntentRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.WriteIntentRequest.key)
}

// optional .azino.Value value = 3;
bool WriteIntentRequest::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WriteIntentRequest::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void WriteIntentRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void WriteIntentRequest::clear_value() {
  if (value_ != NULL) value_->::azino::Value::Clear();
  clear_has_value();
}
const ::azino::Value& WriteIntentRequest::value() const {
  // @@protoc_insertion_point(field_get:azino.txindex.WriteIntentRequest.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::azino::Value* WriteIntentRequest::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::azino::Value;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.WriteIntentRequest.value)
  return value_;
}
::azino::Value* WriteIntentRequest::release_value() {
  // @@protoc_insertion_point(field_release:azino.txindex.WriteIntentRequest.value)
  clear_has_value();
  ::azino::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void WriteIntentRequest::set_allocated_value(::azino::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.WriteIntentRequest.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteIntentResponse::kTxOpStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteIntentResponse::WriteIntentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txindex.WriteIntentResponse)
}

void WriteIntentResponse::InitAsDefaultInstance() {
  tx_op_status_ = const_cast< ::azino::TxOpStatus*>(&::azino::TxOpStatus::default_instance());
}

WriteIntentResponse::WriteIntentResponse(const WriteIntentResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txindex.WriteIntentResponse)
}

void WriteIntentResponse::SharedCtor() {
  _cached_size_ = 0;
  tx_op_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteIntentResponse::~WriteIntentResponse() {
  // @@protoc_insertion_point(destructor:azino.txindex.WriteIntentResponse)
  SharedDtor();
}

void WriteIntentResponse::SharedDtor() {
  if (this != default_instance_) {
    delete tx_op_status_;
  }
}

void WriteIntentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteIntentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteIntentResponse_descriptor_;
}

const WriteIntentResponse& WriteIntentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  return *default_instance_;
}

WriteIntentResponse* WriteIntentResponse::default_instance_ = NULL;

WriteIntentResponse* WriteIntentResponse::New(::google::protobuf::Arena* arena) const {
  WriteIntentResponse* n = new WriteIntentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WriteIntentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txindex.WriteIntentResponse)
  if (has_tx_op_status()) {
    if (tx_op_status_ != NULL) tx_op_status_->::azino::TxOpStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WriteIntentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txindex.WriteIntentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxOpStatus tx_op_status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tx_op_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txindex.WriteIntentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txindex.WriteIntentResponse)
  return false;
#undef DO_
}

void WriteIntentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txindex.WriteIntentResponse)
  // optional .azino.TxOpStatus tx_op_status = 1;
  if (has_tx_op_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tx_op_status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txindex.WriteIntentResponse)
}

::google::protobuf::uint8* WriteIntentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txindex.WriteIntentResponse)
  // optional .azino.TxOpStatus tx_op_status = 1;
  if (has_tx_op_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tx_op_status_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txindex.WriteIntentResponse)
  return target;
}

int WriteIntentResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txindex.WriteIntentResponse)
  int total_size = 0;

  // optional .azino.TxOpStatus tx_op_status = 1;
  if (has_tx_op_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tx_op_status_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteIntentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txindex.WriteIntentResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WriteIntentResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteIntentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txindex.WriteIntentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txindex.WriteIntentResponse)
    MergeFrom(*source);
  }
}

void WriteIntentResponse::MergeFrom(const WriteIntentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txindex.WriteIntentResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tx_op_status()) {
      mutable_tx_op_status()->::azino::TxOpStatus::MergeFrom(from.tx_op_status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WriteIntentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txindex.WriteIntentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteIntentResponse::CopyFrom(const WriteIntentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txindex.WriteIntentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteIntentResponse::IsInitialized() const {

  return true;
}

void WriteIntentResponse::Swap(WriteIntentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteIntentResponse::InternalSwap(WriteIntentResponse* other) {
  std::swap(tx_op_status_, other->tx_op_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteIntentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteIntentResponse_descriptor_;
  metadata.reflection = WriteIntentResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteIntentResponse

// optional .azino.TxOpStatus tx_op_status = 1;
bool WriteIntentResponse::has_tx_op_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WriteIntentResponse::set_has_tx_op_status() {
  _has_bits_[0] |= 0x00000001u;
}
void WriteIntentResponse::clear_has_tx_op_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void WriteIntentResponse::clear_tx_op_status() {
  if (tx_op_status_ != NULL) tx_op_status_->::azino::TxOpStatus::Clear();
  clear_has_tx_op_status();
}
const ::azino::TxOpStatus& WriteIntentResponse::tx_op_status() const {
  // @@protoc_insertion_point(field_get:azino.txindex.WriteIntentResponse.tx_op_status)
  return tx_op_status_ != NULL ? *tx_op_status_ : *default_instance_->tx_op_status_;
}
::azino::TxOpStatus* WriteIntentResponse::mutable_tx_op_status() {
  set_has_tx_op_status();
  if (tx_op_status_ == NULL) {
    tx_op_status_ = new ::azino::TxOpStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.WriteIntentResponse.tx_op_status)
  return tx_op_status_;
}
::azino::TxOpStatus* WriteIntentResponse::release_tx_op_status() {
  // @@protoc_insertion_point(field_release:azino.txindex.WriteIntentResponse.tx_op_status)
  clear_has_tx_op_status();
  ::azino::TxOpStatus* temp = tx_op_status_;
  tx_op_status_ = NULL;
  return temp;
}
void WriteIntentResponse::set_allocated_tx_op_status(::azino::TxOpStatus* tx_op_status) {
  delete tx_op_status_;
  tx_op_status_ = tx_op_status;
  if (tx_op_status) {
    set_has_tx_op_status();
  } else {
    clear_has_tx_op_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.WriteIntentResponse.tx_op_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanRequest::kTxidFieldNumber;
const int CleanRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanRequest::CleanRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txindex.CleanRequest)
}

void CleanRequest::InitAsDefaultInstance() {
  txid_ = const_cast< ::azino::TxIdentifier*>(&::azino::TxIdentifier::default_instance());
}

CleanRequest::CleanRequest(const CleanRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txindex.CleanRequest)
}

void CleanRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  txid_ = NULL;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CleanRequest::~CleanRequest() {
  // @@protoc_insertion_point(destructor:azino.txindex.CleanRequest)
  SharedDtor();
}

void CleanRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete txid_;
  }
}

void CleanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CleanRequest_descriptor_;
}

const CleanRequest& CleanRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  return *default_instance_;
}

CleanRequest* CleanRequest::default_instance_ = NULL;

CleanRequest* CleanRequest::New(::google::protobuf::Arena* arena) const {
  CleanRequest* n = new CleanRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CleanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txindex.CleanRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_txid()) {
      if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CleanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txindex.CleanRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxIdentifier txid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.txindex.CleanRequest.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txindex.CleanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txindex.CleanRequest)
  return false;
#undef DO_
}

void CleanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txindex.CleanRequest)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->txid_, output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.txindex.CleanRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txindex.CleanRequest)
}

::google::protobuf::uint8* CleanRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txindex.CleanRequest)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->txid_, false, target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.txindex.CleanRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txindex.CleanRequest)
  return target;
}

int CleanRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txindex.CleanRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .azino.TxIdentifier txid = 1;
    if (has_txid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->txid_);
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txindex.CleanRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CleanRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txindex.CleanRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txindex.CleanRequest)
    MergeFrom(*source);
  }
}

void CleanRequest::MergeFrom(const CleanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txindex.CleanRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txid()) {
      mutable_txid()->::azino::TxIdentifier::MergeFrom(from.txid());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CleanRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txindex.CleanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanRequest::CopyFrom(const CleanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txindex.CleanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanRequest::IsInitialized() const {

  return true;
}

void CleanRequest::Swap(CleanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanRequest::InternalSwap(CleanRequest* other) {
  std::swap(txid_, other->txid_);
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CleanRequest_descriptor_;
  metadata.reflection = CleanRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanRequest

// optional .azino.TxIdentifier txid = 1;
bool CleanRequest::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CleanRequest::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
void CleanRequest::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CleanRequest::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
const ::azino::TxIdentifier& CleanRequest::txid() const {
  // @@protoc_insertion_point(field_get:azino.txindex.CleanRequest.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
::azino::TxIdentifier* CleanRequest::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.CleanRequest.txid)
  return txid_;
}
::azino::TxIdentifier* CleanRequest::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txindex.CleanRequest.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
void CleanRequest::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.CleanRequest.txid)
}

// optional string key = 2;
bool CleanRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CleanRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void CleanRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void CleanRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& CleanRequest::key() const {
  // @@protoc_insertion_point(field_get:azino.txindex.CleanRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CleanRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.txindex.CleanRequest.key)
}
 void CleanRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.txindex.CleanRequest.key)
}
 void CleanRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.txindex.CleanRequest.key)
}
 ::std::string* CleanRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.txindex.CleanRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CleanRequest::release_key() {
  // @@protoc_insertion_point(field_release:azino.txindex.CleanRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CleanRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.CleanRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanResponse::kTxOpStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanResponse::CleanResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txindex.CleanResponse)
}

void CleanResponse::InitAsDefaultInstance() {
  tx_op_status_ = const_cast< ::azino::TxOpStatus*>(&::azino::TxOpStatus::default_instance());
}

CleanResponse::CleanResponse(const CleanResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txindex.CleanResponse)
}

void CleanResponse::SharedCtor() {
  _cached_size_ = 0;
  tx_op_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CleanResponse::~CleanResponse() {
  // @@protoc_insertion_point(destructor:azino.txindex.CleanResponse)
  SharedDtor();
}

void CleanResponse::SharedDtor() {
  if (this != default_instance_) {
    delete tx_op_status_;
  }
}

void CleanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CleanResponse_descriptor_;
}

const CleanResponse& CleanResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  return *default_instance_;
}

CleanResponse* CleanResponse::default_instance_ = NULL;

CleanResponse* CleanResponse::New(::google::protobuf::Arena* arena) const {
  CleanResponse* n = new CleanResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CleanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txindex.CleanResponse)
  if (has_tx_op_status()) {
    if (tx_op_status_ != NULL) tx_op_status_->::azino::TxOpStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CleanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txindex.CleanResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxOpStatus tx_op_status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tx_op_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txindex.CleanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txindex.CleanResponse)
  return false;
#undef DO_
}

void CleanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txindex.CleanResponse)
  // optional .azino.TxOpStatus tx_op_status = 1;
  if (has_tx_op_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tx_op_status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txindex.CleanResponse)
}

::google::protobuf::uint8* CleanResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txindex.CleanResponse)
  // optional .azino.TxOpStatus tx_op_status = 1;
  if (has_tx_op_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tx_op_status_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txindex.CleanResponse)
  return target;
}

int CleanResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txindex.CleanResponse)
  int total_size = 0;

  // optional .azino.TxOpStatus tx_op_status = 1;
  if (has_tx_op_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tx_op_status_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txindex.CleanResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CleanResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txindex.CleanResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txindex.CleanResponse)
    MergeFrom(*source);
  }
}

void CleanResponse::MergeFrom(const CleanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txindex.CleanResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tx_op_status()) {
      mutable_tx_op_status()->::azino::TxOpStatus::MergeFrom(from.tx_op_status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CleanResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txindex.CleanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanResponse::CopyFrom(const CleanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txindex.CleanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanResponse::IsInitialized() const {

  return true;
}

void CleanResponse::Swap(CleanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanResponse::InternalSwap(CleanResponse* other) {
  std::swap(tx_op_status_, other->tx_op_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CleanResponse_descriptor_;
  metadata.reflection = CleanResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanResponse

// optional .azino.TxOpStatus tx_op_status = 1;
bool CleanResponse::has_tx_op_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CleanResponse::set_has_tx_op_status() {
  _has_bits_[0] |= 0x00000001u;
}
void CleanResponse::clear_has_tx_op_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void CleanResponse::clear_tx_op_status() {
  if (tx_op_status_ != NULL) tx_op_status_->::azino::TxOpStatus::Clear();
  clear_has_tx_op_status();
}
const ::azino::TxOpStatus& CleanResponse::tx_op_status() const {
  // @@protoc_insertion_point(field_get:azino.txindex.CleanResponse.tx_op_status)
  return tx_op_status_ != NULL ? *tx_op_status_ : *default_instance_->tx_op_status_;
}
::azino::TxOpStatus* CleanResponse::mutable_tx_op_status() {
  set_has_tx_op_status();
  if (tx_op_status_ == NULL) {
    tx_op_status_ = new ::azino::TxOpStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.CleanResponse.tx_op_status)
  return tx_op_status_;
}
::azino::TxOpStatus* CleanResponse::release_tx_op_status() {
  // @@protoc_insertion_point(field_release:azino.txindex.CleanResponse.tx_op_status)
  clear_has_tx_op_status();
  ::azino::TxOpStatus* temp = tx_op_status_;
  tx_op_status_ = NULL;
  return temp;
}
void CleanResponse::set_allocated_tx_op_status(::azino::TxOpStatus* tx_op_status) {
  delete tx_op_status_;
  tx_op_status_ = tx_op_status;
  if (tx_op_status) {
    set_has_tx_op_status();
  } else {
    clear_has_tx_op_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.CleanResponse.tx_op_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitRequest::kTxidFieldNumber;
const int CommitRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitRequest::CommitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txindex.CommitRequest)
}

void CommitRequest::InitAsDefaultInstance() {
  txid_ = const_cast< ::azino::TxIdentifier*>(&::azino::TxIdentifier::default_instance());
}

CommitRequest::CommitRequest(const CommitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txindex.CommitRequest)
}

void CommitRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  txid_ = NULL;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommitRequest::~CommitRequest() {
  // @@protoc_insertion_point(destructor:azino.txindex.CommitRequest)
  SharedDtor();
}

void CommitRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete txid_;
  }
}

void CommitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitRequest_descriptor_;
}

const CommitRequest& CommitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  return *default_instance_;
}

CommitRequest* CommitRequest::default_instance_ = NULL;

CommitRequest* CommitRequest::New(::google::protobuf::Arena* arena) const {
  CommitRequest* n = new CommitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txindex.CommitRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_txid()) {
      if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CommitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txindex.CommitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxIdentifier txid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.txindex.CommitRequest.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txindex.CommitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txindex.CommitRequest)
  return false;
#undef DO_
}

void CommitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txindex.CommitRequest)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->txid_, output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.txindex.CommitRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txindex.CommitRequest)
}

::google::protobuf::uint8* CommitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txindex.CommitRequest)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->txid_, false, target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.txindex.CommitRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txindex.CommitRequest)
  return target;
}

int CommitRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txindex.CommitRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .azino.TxIdentifier txid = 1;
    if (has_txid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->txid_);
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txindex.CommitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CommitRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txindex.CommitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txindex.CommitRequest)
    MergeFrom(*source);
  }
}

void CommitRequest::MergeFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txindex.CommitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txid()) {
      mutable_txid()->::azino::TxIdentifier::MergeFrom(from.txid());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CommitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txindex.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitRequest::CopyFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txindex.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitRequest::IsInitialized() const {

  return true;
}

void CommitRequest::Swap(CommitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitRequest::InternalSwap(CommitRequest* other) {
  std::swap(txid_, other->txid_);
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitRequest_descriptor_;
  metadata.reflection = CommitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitRequest

// optional .azino.TxIdentifier txid = 1;
bool CommitRequest::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommitRequest::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
void CommitRequest::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommitRequest::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
const ::azino::TxIdentifier& CommitRequest::txid() const {
  // @@protoc_insertion_point(field_get:azino.txindex.CommitRequest.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
::azino::TxIdentifier* CommitRequest::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.CommitRequest.txid)
  return txid_;
}
::azino::TxIdentifier* CommitRequest::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txindex.CommitRequest.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
void CommitRequest::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.CommitRequest.txid)
}

// optional string key = 2;
bool CommitRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommitRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void CommitRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommitRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& CommitRequest::key() const {
  // @@protoc_insertion_point(field_get:azino.txindex.CommitRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommitRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.txindex.CommitRequest.key)
}
 void CommitRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.txindex.CommitRequest.key)
}
 void CommitRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.txindex.CommitRequest.key)
}
 ::std::string* CommitRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.txindex.CommitRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommitRequest::release_key() {
  // @@protoc_insertion_point(field_release:azino.txindex.CommitRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommitRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.CommitRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitResponse::kTxOpStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitResponse::CommitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txindex.CommitResponse)
}

void CommitResponse::InitAsDefaultInstance() {
  tx_op_status_ = const_cast< ::azino::TxOpStatus*>(&::azino::TxOpStatus::default_instance());
}

CommitResponse::CommitResponse(const CommitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txindex.CommitResponse)
}

void CommitResponse::SharedCtor() {
  _cached_size_ = 0;
  tx_op_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommitResponse::~CommitResponse() {
  // @@protoc_insertion_point(destructor:azino.txindex.CommitResponse)
  SharedDtor();
}

void CommitResponse::SharedDtor() {
  if (this != default_instance_) {
    delete tx_op_status_;
  }
}

void CommitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitResponse_descriptor_;
}

const CommitResponse& CommitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  return *default_instance_;
}

CommitResponse* CommitResponse::default_instance_ = NULL;

CommitResponse* CommitResponse::New(::google::protobuf::Arena* arena) const {
  CommitResponse* n = new CommitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txindex.CommitResponse)
  if (has_tx_op_status()) {
    if (tx_op_status_ != NULL) tx_op_status_->::azino::TxOpStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txindex.CommitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxOpStatus tx_op_status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tx_op_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txindex.CommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txindex.CommitResponse)
  return false;
#undef DO_
}

void CommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txindex.CommitResponse)
  // optional .azino.TxOpStatus tx_op_status = 1;
  if (has_tx_op_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tx_op_status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txindex.CommitResponse)
}

::google::protobuf::uint8* CommitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txindex.CommitResponse)
  // optional .azino.TxOpStatus tx_op_status = 1;
  if (has_tx_op_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tx_op_status_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txindex.CommitResponse)
  return target;
}

int CommitResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txindex.CommitResponse)
  int total_size = 0;

  // optional .azino.TxOpStatus tx_op_status = 1;
  if (has_tx_op_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tx_op_status_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txindex.CommitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CommitResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txindex.CommitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txindex.CommitResponse)
    MergeFrom(*source);
  }
}

void CommitResponse::MergeFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txindex.CommitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tx_op_status()) {
      mutable_tx_op_status()->::azino::TxOpStatus::MergeFrom(from.tx_op_status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CommitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txindex.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txindex.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse::IsInitialized() const {

  return true;
}

void CommitResponse::Swap(CommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitResponse::InternalSwap(CommitResponse* other) {
  std::swap(tx_op_status_, other->tx_op_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitResponse_descriptor_;
  metadata.reflection = CommitResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitResponse

// optional .azino.TxOpStatus tx_op_status = 1;
bool CommitResponse::has_tx_op_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommitResponse::set_has_tx_op_status() {
  _has_bits_[0] |= 0x00000001u;
}
void CommitResponse::clear_has_tx_op_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommitResponse::clear_tx_op_status() {
  if (tx_op_status_ != NULL) tx_op_status_->::azino::TxOpStatus::Clear();
  clear_has_tx_op_status();
}
const ::azino::TxOpStatus& CommitResponse::tx_op_status() const {
  // @@protoc_insertion_point(field_get:azino.txindex.CommitResponse.tx_op_status)
  return tx_op_status_ != NULL ? *tx_op_status_ : *default_instance_->tx_op_status_;
}
::azino::TxOpStatus* CommitResponse::mutable_tx_op_status() {
  set_has_tx_op_status();
  if (tx_op_status_ == NULL) {
    tx_op_status_ = new ::azino::TxOpStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.CommitResponse.tx_op_status)
  return tx_op_status_;
}
::azino::TxOpStatus* CommitResponse::release_tx_op_status() {
  // @@protoc_insertion_point(field_release:azino.txindex.CommitResponse.tx_op_status)
  clear_has_tx_op_status();
  ::azino::TxOpStatus* temp = tx_op_status_;
  tx_op_status_ = NULL;
  return temp;
}
void CommitResponse::set_allocated_tx_op_status(::azino::TxOpStatus* tx_op_status) {
  delete tx_op_status_;
  tx_op_status_ = tx_op_status;
  if (tx_op_status) {
    set_has_tx_op_status();
  } else {
    clear_has_tx_op_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.CommitResponse.tx_op_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadRequest::kTxidFieldNumber;
const int ReadRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadRequest::ReadRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txindex.ReadRequest)
}

void ReadRequest::InitAsDefaultInstance() {
  txid_ = const_cast< ::azino::TxIdentifier*>(&::azino::TxIdentifier::default_instance());
}

ReadRequest::ReadRequest(const ReadRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txindex.ReadRequest)
}

void ReadRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  txid_ = NULL;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadRequest::~ReadRequest() {
  // @@protoc_insertion_point(destructor:azino.txindex.ReadRequest)
  SharedDtor();
}

void ReadRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete txid_;
  }
}

void ReadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadRequest_descriptor_;
}

const ReadRequest& ReadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  return *default_instance_;
}

ReadRequest* ReadRequest::default_instance_ = NULL;

ReadRequest* ReadRequest::New(::google::protobuf::Arena* arena) const {
  ReadRequest* n = new ReadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txindex.ReadRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_txid()) {
      if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txindex.ReadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxIdentifier txid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.txindex.ReadRequest.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txindex.ReadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txindex.ReadRequest)
  return false;
#undef DO_
}

void ReadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txindex.ReadRequest)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->txid_, output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.txindex.ReadRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txindex.ReadRequest)
}

::google::protobuf::uint8* ReadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txindex.ReadRequest)
  // optional .azino.TxIdentifier txid = 1;
  if (has_txid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->txid_, false, target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.txindex.ReadRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txindex.ReadRequest)
  return target;
}

int ReadRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txindex.ReadRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .azino.TxIdentifier txid = 1;
    if (has_txid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->txid_);
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txindex.ReadRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReadRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txindex.ReadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txindex.ReadRequest)
    MergeFrom(*source);
  }
}

void ReadRequest::MergeFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txindex.ReadRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txid()) {
      mutable_txid()->::azino::TxIdentifier::MergeFrom(from.txid());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReadRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txindex.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRequest::CopyFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txindex.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRequest::IsInitialized() const {

  return true;
}

void ReadRequest::Swap(ReadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadRequest::InternalSwap(ReadRequest* other) {
  std::swap(txid_, other->txid_);
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadRequest_descriptor_;
  metadata.reflection = ReadRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadRequest

// optional .azino.TxIdentifier txid = 1;
bool ReadRequest::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReadRequest::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReadRequest::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReadRequest::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
const ::azino::TxIdentifier& ReadRequest::txid() const {
  // @@protoc_insertion_point(field_get:azino.txindex.ReadRequest.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
::azino::TxIdentifier* ReadRequest::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.ReadRequest.txid)
  return txid_;
}
::azino::TxIdentifier* ReadRequest::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txindex.ReadRequest.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
void ReadRequest::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.ReadRequest.txid)
}

// optional string key = 2;
bool ReadRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReadRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void ReadRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReadRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& ReadRequest::key() const {
  // @@protoc_insertion_point(field_get:azino.txindex.ReadRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.txindex.ReadRequest.key)
}
 void ReadRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.txindex.ReadRequest.key)
}
 void ReadRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.txindex.ReadRequest.key)
}
 ::std::string* ReadRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.txindex.ReadRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReadRequest::release_key() {
  // @@protoc_insertion_point(field_release:azino.txindex.ReadRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.ReadRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadResponse::kTxOpStatusFieldNumber;
const int ReadResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadResponse::ReadResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.txindex.ReadResponse)
}

void ReadResponse::InitAsDefaultInstance() {
  tx_op_status_ = const_cast< ::azino::TxOpStatus*>(&::azino::TxOpStatus::default_instance());
  value_ = const_cast< ::azino::Value*>(&::azino::Value::default_instance());
}

ReadResponse::ReadResponse(const ReadResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.txindex.ReadResponse)
}

void ReadResponse::SharedCtor() {
  _cached_size_ = 0;
  tx_op_status_ = NULL;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadResponse::~ReadResponse() {
  // @@protoc_insertion_point(destructor:azino.txindex.ReadResponse)
  SharedDtor();
}

void ReadResponse::SharedDtor() {
  if (this != default_instance_) {
    delete tx_op_status_;
    delete value_;
  }
}

void ReadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadResponse_descriptor_;
}

const ReadResponse& ReadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  return *default_instance_;
}

ReadResponse* ReadResponse::default_instance_ = NULL;

ReadResponse* ReadResponse::New(::google::protobuf::Arena* arena) const {
  ReadResponse* n = new ReadResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.txindex.ReadResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_tx_op_status()) {
      if (tx_op_status_ != NULL) tx_op_status_->::azino::TxOpStatus::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::azino::Value::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.txindex.ReadResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.TxOpStatus tx_op_status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tx_op_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .azino.Value value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.txindex.ReadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.txindex.ReadResponse)
  return false;
#undef DO_
}

void ReadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.txindex.ReadResponse)
  // optional .azino.TxOpStatus tx_op_status = 1;
  if (has_tx_op_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tx_op_status_, output);
  }

  // optional .azino.Value value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.txindex.ReadResponse)
}

::google::protobuf::uint8* ReadResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.txindex.ReadResponse)
  // optional .azino.TxOpStatus tx_op_status = 1;
  if (has_tx_op_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tx_op_status_, false, target);
  }

  // optional .azino.Value value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.txindex.ReadResponse)
  return target;
}

int ReadResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.txindex.ReadResponse)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .azino.TxOpStatus tx_op_status = 1;
    if (has_tx_op_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tx_op_status_);
    }

    // optional .azino.Value value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->value_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.txindex.ReadResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReadResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.txindex.ReadResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.txindex.ReadResponse)
    MergeFrom(*source);
  }
}

void ReadResponse::MergeFrom(const ReadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.txindex.ReadResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tx_op_status()) {
      mutable_tx_op_status()->::azino::TxOpStatus::MergeFrom(from.tx_op_status());
    }
    if (from.has_value()) {
      mutable_value()->::azino::Value::MergeFrom(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReadResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.txindex.ReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResponse::CopyFrom(const ReadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.txindex.ReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResponse::IsInitialized() const {

  return true;
}

void ReadResponse::Swap(ReadResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadResponse::InternalSwap(ReadResponse* other) {
  std::swap(tx_op_status_, other->tx_op_status_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadResponse_descriptor_;
  metadata.reflection = ReadResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadResponse

// optional .azino.TxOpStatus tx_op_status = 1;
bool ReadResponse::has_tx_op_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReadResponse::set_has_tx_op_status() {
  _has_bits_[0] |= 0x00000001u;
}
void ReadResponse::clear_has_tx_op_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReadResponse::clear_tx_op_status() {
  if (tx_op_status_ != NULL) tx_op_status_->::azino::TxOpStatus::Clear();
  clear_has_tx_op_status();
}
const ::azino::TxOpStatus& ReadResponse::tx_op_status() const {
  // @@protoc_insertion_point(field_get:azino.txindex.ReadResponse.tx_op_status)
  return tx_op_status_ != NULL ? *tx_op_status_ : *default_instance_->tx_op_status_;
}
::azino::TxOpStatus* ReadResponse::mutable_tx_op_status() {
  set_has_tx_op_status();
  if (tx_op_status_ == NULL) {
    tx_op_status_ = new ::azino::TxOpStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.ReadResponse.tx_op_status)
  return tx_op_status_;
}
::azino::TxOpStatus* ReadResponse::release_tx_op_status() {
  // @@protoc_insertion_point(field_release:azino.txindex.ReadResponse.tx_op_status)
  clear_has_tx_op_status();
  ::azino::TxOpStatus* temp = tx_op_status_;
  tx_op_status_ = NULL;
  return temp;
}
void ReadResponse::set_allocated_tx_op_status(::azino::TxOpStatus* tx_op_status) {
  delete tx_op_status_;
  tx_op_status_ = tx_op_status;
  if (tx_op_status) {
    set_has_tx_op_status();
  } else {
    clear_has_tx_op_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.ReadResponse.tx_op_status)
}

// optional .azino.Value value = 2;
bool ReadResponse::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReadResponse::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void ReadResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReadResponse::clear_value() {
  if (value_ != NULL) value_->::azino::Value::Clear();
  clear_has_value();
}
const ::azino::Value& ReadResponse::value() const {
  // @@protoc_insertion_point(field_get:azino.txindex.ReadResponse.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::azino::Value* ReadResponse::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::azino::Value;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.ReadResponse.value)
  return value_;
}
::azino::Value* ReadResponse::release_value() {
  // @@protoc_insertion_point(field_release:azino.txindex.ReadResponse.value)
  clear_has_value();
  ::azino::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void ReadResponse::set_allocated_value(::azino::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.ReadResponse.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

TxOpService::~TxOpService() {}

const ::google::protobuf::ServiceDescriptor* TxOpService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxOpService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* TxOpService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxOpService_descriptor_;
}

void TxOpService::WriteIntent(::google::protobuf::RpcController* controller,
                         const ::azino::txindex::WriteIntentRequest*,
                         ::azino::txindex::WriteIntentResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WriteIntent() not implemented.");
  done->Run();
}

void TxOpService::WriteLock(::google::protobuf::RpcController* controller,
                         const ::azino::txindex::WriteLockRequest*,
                         ::azino::txindex::WriteLockResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WriteLock() not implemented.");
  done->Run();
}

void TxOpService::Clean(::google::protobuf::RpcController* controller,
                         const ::azino::txindex::CleanRequest*,
                         ::azino::txindex::CleanResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Clean() not implemented.");
  done->Run();
}

void TxOpService::Commit(::google::protobuf::RpcController* controller,
                         const ::azino::txindex::CommitRequest*,
                         ::azino::txindex::CommitResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Commit() not implemented.");
  done->Run();
}

void TxOpService::Read(::google::protobuf::RpcController* controller,
                         const ::azino::txindex::ReadRequest*,
                         ::azino::txindex::ReadResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Read() not implemented.");
  done->Run();
}

void TxOpService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), TxOpService_descriptor_);
  switch(method->index()) {
    case 0:
      WriteIntent(controller,
             ::google::protobuf::down_cast<const ::azino::txindex::WriteIntentRequest*>(request),
             ::google::protobuf::down_cast< ::azino::txindex::WriteIntentResponse*>(response),
             done);
      break;
    case 1:
      WriteLock(controller,
             ::google::protobuf::down_cast<const ::azino::txindex::WriteLockRequest*>(request),
             ::google::protobuf::down_cast< ::azino::txindex::WriteLockResponse*>(response),
             done);
      break;
    case 2:
      Clean(controller,
             ::google::protobuf::down_cast<const ::azino::txindex::CleanRequest*>(request),
             ::google::protobuf::down_cast< ::azino::txindex::CleanResponse*>(response),
             done);
      break;
    case 3:
      Commit(controller,
             ::google::protobuf::down_cast<const ::azino::txindex::CommitRequest*>(request),
             ::google::protobuf::down_cast< ::azino::txindex::CommitResponse*>(response),
             done);
      break;
    case 4:
      Read(controller,
             ::google::protobuf::down_cast<const ::azino::txindex::ReadRequest*>(request),
             ::google::protobuf::down_cast< ::azino::txindex::ReadResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& TxOpService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::azino::txindex::WriteIntentRequest::default_instance();
    case 1:
      return ::azino::txindex::WriteLockRequest::default_instance();
    case 2:
      return ::azino::txindex::CleanRequest::default_instance();
    case 3:
      return ::azino::txindex::CommitRequest::default_instance();
    case 4:
      return ::azino::txindex::ReadRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& TxOpService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::azino::txindex::WriteIntentResponse::default_instance();
    case 1:
      return ::azino::txindex::WriteLockResponse::default_instance();
    case 2:
      return ::azino::txindex::CleanResponse::default_instance();
    case 3:
      return ::azino::txindex::CommitResponse::default_instance();
    case 4:
      return ::azino::txindex::ReadResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TxOpService_Stub::TxOpService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TxOpService_Stub::TxOpService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
TxOpService_Stub::~TxOpService_Stub() {
  if (owns_channel_) delete channel_;
}

void TxOpService_Stub::WriteIntent(::google::protobuf::RpcController* controller,
                              const ::azino::txindex::WriteIntentRequest* request,
                              ::azino::txindex::WriteIntentResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TxOpService_Stub::WriteLock(::google::protobuf::RpcController* controller,
                              const ::azino::txindex::WriteLockRequest* request,
                              ::azino::txindex::WriteLockResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void TxOpService_Stub::Clean(::google::protobuf::RpcController* controller,
                              const ::azino::txindex::CleanRequest* request,
                              ::azino::txindex::CleanResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void TxOpService_Stub::Commit(::google::protobuf::RpcController* controller,
                              const ::azino::txindex::CommitRequest* request,
                              ::azino::txindex::CommitResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void TxOpService_Stub::Read(::google::protobuf::RpcController* controller,
                              const ::azino::txindex::ReadRequest* request,
                              ::azino::txindex::ReadResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace txindex
}  // namespace azino

// @@protoc_insertion_point(global_scope)
