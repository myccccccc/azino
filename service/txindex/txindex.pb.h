// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/txindex/txindex.proto

#ifndef PROTOBUF_service_2ftxindex_2ftxindex_2eproto__INCLUDED
#define PROTOBUF_service_2ftxindex_2ftxindex_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "service/tx.pb.h"
#include "service/kv.pb.h"
// @@protoc_insertion_point(includes)

namespace azino {
namespace txindex {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
void protobuf_AssignDesc_service_2ftxindex_2ftxindex_2eproto();
void protobuf_ShutdownFile_service_2ftxindex_2ftxindex_2eproto();

class CleanRequest;
class CleanResponse;
class CommitRequest;
class CommitResponse;
class ReadRequest;
class ReadResponse;
class WriteIntentRequest;
class WriteIntentResponse;
class WriteLockRequest;
class WriteLockResponse;

// ===================================================================

class WriteLockRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txindex.WriteLockRequest) */ {
 public:
  WriteLockRequest();
  virtual ~WriteLockRequest();

  WriteLockRequest(const WriteLockRequest& from);

  inline WriteLockRequest& operator=(const WriteLockRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteLockRequest& default_instance();

  void Swap(WriteLockRequest* other);

  // implements Message ----------------------------------------------

  inline WriteLockRequest* New() const { return New(NULL); }

  WriteLockRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteLockRequest& from);
  void MergeFrom(const WriteLockRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteLockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxIdentifier txid = 1;
  bool has_txid() const;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  const ::azino::TxIdentifier& txid() const;
  ::azino::TxIdentifier* mutable_txid();
  ::azino::TxIdentifier* release_txid();
  void set_allocated_txid(::azino::TxIdentifier* txid);

  // optional string key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:azino.txindex.WriteLockRequest)
 private:
  inline void set_has_txid();
  inline void clear_has_txid();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxIdentifier* txid_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  friend void  protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_AssignDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxindex_2ftxindex_2eproto();

  void InitAsDefaultInstance();
  static WriteLockRequest* default_instance_;
};
// -------------------------------------------------------------------

class WriteLockResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txindex.WriteLockResponse) */ {
 public:
  WriteLockResponse();
  virtual ~WriteLockResponse();

  WriteLockResponse(const WriteLockResponse& from);

  inline WriteLockResponse& operator=(const WriteLockResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteLockResponse& default_instance();

  void Swap(WriteLockResponse* other);

  // implements Message ----------------------------------------------

  inline WriteLockResponse* New() const { return New(NULL); }

  WriteLockResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteLockResponse& from);
  void MergeFrom(const WriteLockResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteLockResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxOpStatus tx_op_status = 1;
  bool has_tx_op_status() const;
  void clear_tx_op_status();
  static const int kTxOpStatusFieldNumber = 1;
  const ::azino::TxOpStatus& tx_op_status() const;
  ::azino::TxOpStatus* mutable_tx_op_status();
  ::azino::TxOpStatus* release_tx_op_status();
  void set_allocated_tx_op_status(::azino::TxOpStatus* tx_op_status);

  // @@protoc_insertion_point(class_scope:azino.txindex.WriteLockResponse)
 private:
  inline void set_has_tx_op_status();
  inline void clear_has_tx_op_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxOpStatus* tx_op_status_;
  friend void  protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_AssignDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxindex_2ftxindex_2eproto();

  void InitAsDefaultInstance();
  static WriteLockResponse* default_instance_;
};
// -------------------------------------------------------------------

class WriteIntentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txindex.WriteIntentRequest) */ {
 public:
  WriteIntentRequest();
  virtual ~WriteIntentRequest();

  WriteIntentRequest(const WriteIntentRequest& from);

  inline WriteIntentRequest& operator=(const WriteIntentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteIntentRequest& default_instance();

  void Swap(WriteIntentRequest* other);

  // implements Message ----------------------------------------------

  inline WriteIntentRequest* New() const { return New(NULL); }

  WriteIntentRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteIntentRequest& from);
  void MergeFrom(const WriteIntentRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteIntentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxIdentifier txid = 1;
  bool has_txid() const;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  const ::azino::TxIdentifier& txid() const;
  ::azino::TxIdentifier* mutable_txid();
  ::azino::TxIdentifier* release_txid();
  void set_allocated_txid(::azino::TxIdentifier* txid);

  // optional string key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional .azino.Value value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::azino::Value& value() const;
  ::azino::Value* mutable_value();
  ::azino::Value* release_value();
  void set_allocated_value(::azino::Value* value);

  // @@protoc_insertion_point(class_scope:azino.txindex.WriteIntentRequest)
 private:
  inline void set_has_txid();
  inline void clear_has_txid();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxIdentifier* txid_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::azino::Value* value_;
  friend void  protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_AssignDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxindex_2ftxindex_2eproto();

  void InitAsDefaultInstance();
  static WriteIntentRequest* default_instance_;
};
// -------------------------------------------------------------------

class WriteIntentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txindex.WriteIntentResponse) */ {
 public:
  WriteIntentResponse();
  virtual ~WriteIntentResponse();

  WriteIntentResponse(const WriteIntentResponse& from);

  inline WriteIntentResponse& operator=(const WriteIntentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteIntentResponse& default_instance();

  void Swap(WriteIntentResponse* other);

  // implements Message ----------------------------------------------

  inline WriteIntentResponse* New() const { return New(NULL); }

  WriteIntentResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteIntentResponse& from);
  void MergeFrom(const WriteIntentResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteIntentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxOpStatus tx_op_status = 1;
  bool has_tx_op_status() const;
  void clear_tx_op_status();
  static const int kTxOpStatusFieldNumber = 1;
  const ::azino::TxOpStatus& tx_op_status() const;
  ::azino::TxOpStatus* mutable_tx_op_status();
  ::azino::TxOpStatus* release_tx_op_status();
  void set_allocated_tx_op_status(::azino::TxOpStatus* tx_op_status);

  // @@protoc_insertion_point(class_scope:azino.txindex.WriteIntentResponse)
 private:
  inline void set_has_tx_op_status();
  inline void clear_has_tx_op_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxOpStatus* tx_op_status_;
  friend void  protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_AssignDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxindex_2ftxindex_2eproto();

  void InitAsDefaultInstance();
  static WriteIntentResponse* default_instance_;
};
// -------------------------------------------------------------------

class CleanRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txindex.CleanRequest) */ {
 public:
  CleanRequest();
  virtual ~CleanRequest();

  CleanRequest(const CleanRequest& from);

  inline CleanRequest& operator=(const CleanRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CleanRequest& default_instance();

  void Swap(CleanRequest* other);

  // implements Message ----------------------------------------------

  inline CleanRequest* New() const { return New(NULL); }

  CleanRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CleanRequest& from);
  void MergeFrom(const CleanRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CleanRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxIdentifier txid = 1;
  bool has_txid() const;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  const ::azino::TxIdentifier& txid() const;
  ::azino::TxIdentifier* mutable_txid();
  ::azino::TxIdentifier* release_txid();
  void set_allocated_txid(::azino::TxIdentifier* txid);

  // optional string key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:azino.txindex.CleanRequest)
 private:
  inline void set_has_txid();
  inline void clear_has_txid();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxIdentifier* txid_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  friend void  protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_AssignDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxindex_2ftxindex_2eproto();

  void InitAsDefaultInstance();
  static CleanRequest* default_instance_;
};
// -------------------------------------------------------------------

class CleanResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txindex.CleanResponse) */ {
 public:
  CleanResponse();
  virtual ~CleanResponse();

  CleanResponse(const CleanResponse& from);

  inline CleanResponse& operator=(const CleanResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CleanResponse& default_instance();

  void Swap(CleanResponse* other);

  // implements Message ----------------------------------------------

  inline CleanResponse* New() const { return New(NULL); }

  CleanResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CleanResponse& from);
  void MergeFrom(const CleanResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CleanResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxOpStatus tx_op_status = 1;
  bool has_tx_op_status() const;
  void clear_tx_op_status();
  static const int kTxOpStatusFieldNumber = 1;
  const ::azino::TxOpStatus& tx_op_status() const;
  ::azino::TxOpStatus* mutable_tx_op_status();
  ::azino::TxOpStatus* release_tx_op_status();
  void set_allocated_tx_op_status(::azino::TxOpStatus* tx_op_status);

  // @@protoc_insertion_point(class_scope:azino.txindex.CleanResponse)
 private:
  inline void set_has_tx_op_status();
  inline void clear_has_tx_op_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxOpStatus* tx_op_status_;
  friend void  protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_AssignDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxindex_2ftxindex_2eproto();

  void InitAsDefaultInstance();
  static CleanResponse* default_instance_;
};
// -------------------------------------------------------------------

class CommitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txindex.CommitRequest) */ {
 public:
  CommitRequest();
  virtual ~CommitRequest();

  CommitRequest(const CommitRequest& from);

  inline CommitRequest& operator=(const CommitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitRequest& default_instance();

  void Swap(CommitRequest* other);

  // implements Message ----------------------------------------------

  inline CommitRequest* New() const { return New(NULL); }

  CommitRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitRequest& from);
  void MergeFrom(const CommitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxIdentifier txid = 1;
  bool has_txid() const;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  const ::azino::TxIdentifier& txid() const;
  ::azino::TxIdentifier* mutable_txid();
  ::azino::TxIdentifier* release_txid();
  void set_allocated_txid(::azino::TxIdentifier* txid);

  // optional string key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:azino.txindex.CommitRequest)
 private:
  inline void set_has_txid();
  inline void clear_has_txid();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxIdentifier* txid_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  friend void  protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_AssignDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxindex_2ftxindex_2eproto();

  void InitAsDefaultInstance();
  static CommitRequest* default_instance_;
};
// -------------------------------------------------------------------

class CommitResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txindex.CommitResponse) */ {
 public:
  CommitResponse();
  virtual ~CommitResponse();

  CommitResponse(const CommitResponse& from);

  inline CommitResponse& operator=(const CommitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitResponse& default_instance();

  void Swap(CommitResponse* other);

  // implements Message ----------------------------------------------

  inline CommitResponse* New() const { return New(NULL); }

  CommitResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitResponse& from);
  void MergeFrom(const CommitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxOpStatus tx_op_status = 1;
  bool has_tx_op_status() const;
  void clear_tx_op_status();
  static const int kTxOpStatusFieldNumber = 1;
  const ::azino::TxOpStatus& tx_op_status() const;
  ::azino::TxOpStatus* mutable_tx_op_status();
  ::azino::TxOpStatus* release_tx_op_status();
  void set_allocated_tx_op_status(::azino::TxOpStatus* tx_op_status);

  // @@protoc_insertion_point(class_scope:azino.txindex.CommitResponse)
 private:
  inline void set_has_tx_op_status();
  inline void clear_has_tx_op_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxOpStatus* tx_op_status_;
  friend void  protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_AssignDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxindex_2ftxindex_2eproto();

  void InitAsDefaultInstance();
  static CommitResponse* default_instance_;
};
// -------------------------------------------------------------------

class ReadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txindex.ReadRequest) */ {
 public:
  ReadRequest();
  virtual ~ReadRequest();

  ReadRequest(const ReadRequest& from);

  inline ReadRequest& operator=(const ReadRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadRequest& default_instance();

  void Swap(ReadRequest* other);

  // implements Message ----------------------------------------------

  inline ReadRequest* New() const { return New(NULL); }

  ReadRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadRequest& from);
  void MergeFrom(const ReadRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxIdentifier txid = 1;
  bool has_txid() const;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  const ::azino::TxIdentifier& txid() const;
  ::azino::TxIdentifier* mutable_txid();
  ::azino::TxIdentifier* release_txid();
  void set_allocated_txid(::azino::TxIdentifier* txid);

  // optional string key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bool lock = 3;
  bool has_lock() const;
  void clear_lock();
  static const int kLockFieldNumber = 3;
  bool lock() const;
  void set_lock(bool value);

  // @@protoc_insertion_point(class_scope:azino.txindex.ReadRequest)
 private:
  inline void set_has_txid();
  inline void clear_has_txid();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_lock();
  inline void clear_has_lock();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxIdentifier* txid_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  bool lock_;
  friend void  protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_AssignDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxindex_2ftxindex_2eproto();

  void InitAsDefaultInstance();
  static ReadRequest* default_instance_;
};
// -------------------------------------------------------------------

class ReadResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:azino.txindex.ReadResponse) */ {
 public:
  ReadResponse();
  virtual ~ReadResponse();

  ReadResponse(const ReadResponse& from);

  inline ReadResponse& operator=(const ReadResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadResponse& default_instance();

  void Swap(ReadResponse* other);

  // implements Message ----------------------------------------------

  inline ReadResponse* New() const { return New(NULL); }

  ReadResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadResponse& from);
  void MergeFrom(const ReadResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .azino.TxOpStatus tx_op_status = 1;
  bool has_tx_op_status() const;
  void clear_tx_op_status();
  static const int kTxOpStatusFieldNumber = 1;
  const ::azino::TxOpStatus& tx_op_status() const;
  ::azino::TxOpStatus* mutable_tx_op_status();
  ::azino::TxOpStatus* release_tx_op_status();
  void set_allocated_tx_op_status(::azino::TxOpStatus* tx_op_status);

  // optional .azino.Value value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::azino::Value& value() const;
  ::azino::Value* mutable_value();
  ::azino::Value* release_value();
  void set_allocated_value(::azino::Value* value);

  // @@protoc_insertion_point(class_scope:azino.txindex.ReadResponse)
 private:
  inline void set_has_tx_op_status();
  inline void clear_has_tx_op_status();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::azino::TxOpStatus* tx_op_status_;
  ::azino::Value* value_;
  friend void  protobuf_AddDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_AssignDesc_service_2ftxindex_2ftxindex_2eproto();
  friend void protobuf_ShutdownFile_service_2ftxindex_2ftxindex_2eproto();

  void InitAsDefaultInstance();
  static ReadResponse* default_instance_;
};
// ===================================================================

class TxOpService_Stub;

class TxOpService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TxOpService() {};
 public:
  virtual ~TxOpService();

  typedef TxOpService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void WriteIntent(::google::protobuf::RpcController* controller,
                       const ::azino::txindex::WriteIntentRequest* request,
                       ::azino::txindex::WriteIntentResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void WriteLock(::google::protobuf::RpcController* controller,
                       const ::azino::txindex::WriteLockRequest* request,
                       ::azino::txindex::WriteLockResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Clean(::google::protobuf::RpcController* controller,
                       const ::azino::txindex::CleanRequest* request,
                       ::azino::txindex::CleanResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Commit(::google::protobuf::RpcController* controller,
                       const ::azino::txindex::CommitRequest* request,
                       ::azino::txindex::CommitResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Read(::google::protobuf::RpcController* controller,
                       const ::azino::txindex::ReadRequest* request,
                       ::azino::txindex::ReadResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TxOpService);
};

class TxOpService_Stub : public TxOpService {
 public:
  TxOpService_Stub(::google::protobuf::RpcChannel* channel);
  TxOpService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~TxOpService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements TxOpService ------------------------------------------

  void WriteIntent(::google::protobuf::RpcController* controller,
                       const ::azino::txindex::WriteIntentRequest* request,
                       ::azino::txindex::WriteIntentResponse* response,
                       ::google::protobuf::Closure* done);
  void WriteLock(::google::protobuf::RpcController* controller,
                       const ::azino::txindex::WriteLockRequest* request,
                       ::azino::txindex::WriteLockResponse* response,
                       ::google::protobuf::Closure* done);
  void Clean(::google::protobuf::RpcController* controller,
                       const ::azino::txindex::CleanRequest* request,
                       ::azino::txindex::CleanResponse* response,
                       ::google::protobuf::Closure* done);
  void Commit(::google::protobuf::RpcController* controller,
                       const ::azino::txindex::CommitRequest* request,
                       ::azino::txindex::CommitResponse* response,
                       ::google::protobuf::Closure* done);
  void Read(::google::protobuf::RpcController* controller,
                       const ::azino::txindex::ReadRequest* request,
                       ::azino::txindex::ReadResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TxOpService_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteLockRequest

// optional .azino.TxIdentifier txid = 1;
inline bool WriteLockRequest::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteLockRequest::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteLockRequest::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteLockRequest::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
inline const ::azino::TxIdentifier& WriteLockRequest::txid() const {
  // @@protoc_insertion_point(field_get:azino.txindex.WriteLockRequest.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
inline ::azino::TxIdentifier* WriteLockRequest::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.WriteLockRequest.txid)
  return txid_;
}
inline ::azino::TxIdentifier* WriteLockRequest::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txindex.WriteLockRequest.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
inline void WriteLockRequest::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.WriteLockRequest.txid)
}

// optional string key = 2;
inline bool WriteLockRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WriteLockRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WriteLockRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WriteLockRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& WriteLockRequest::key() const {
  // @@protoc_insertion_point(field_get:azino.txindex.WriteLockRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteLockRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.txindex.WriteLockRequest.key)
}
inline void WriteLockRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.txindex.WriteLockRequest.key)
}
inline void WriteLockRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.txindex.WriteLockRequest.key)
}
inline ::std::string* WriteLockRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.txindex.WriteLockRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteLockRequest::release_key() {
  // @@protoc_insertion_point(field_release:azino.txindex.WriteLockRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteLockRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.WriteLockRequest.key)
}

// -------------------------------------------------------------------

// WriteLockResponse

// optional .azino.TxOpStatus tx_op_status = 1;
inline bool WriteLockResponse::has_tx_op_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteLockResponse::set_has_tx_op_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteLockResponse::clear_has_tx_op_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteLockResponse::clear_tx_op_status() {
  if (tx_op_status_ != NULL) tx_op_status_->::azino::TxOpStatus::Clear();
  clear_has_tx_op_status();
}
inline const ::azino::TxOpStatus& WriteLockResponse::tx_op_status() const {
  // @@protoc_insertion_point(field_get:azino.txindex.WriteLockResponse.tx_op_status)
  return tx_op_status_ != NULL ? *tx_op_status_ : *default_instance_->tx_op_status_;
}
inline ::azino::TxOpStatus* WriteLockResponse::mutable_tx_op_status() {
  set_has_tx_op_status();
  if (tx_op_status_ == NULL) {
    tx_op_status_ = new ::azino::TxOpStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.WriteLockResponse.tx_op_status)
  return tx_op_status_;
}
inline ::azino::TxOpStatus* WriteLockResponse::release_tx_op_status() {
  // @@protoc_insertion_point(field_release:azino.txindex.WriteLockResponse.tx_op_status)
  clear_has_tx_op_status();
  ::azino::TxOpStatus* temp = tx_op_status_;
  tx_op_status_ = NULL;
  return temp;
}
inline void WriteLockResponse::set_allocated_tx_op_status(::azino::TxOpStatus* tx_op_status) {
  delete tx_op_status_;
  tx_op_status_ = tx_op_status;
  if (tx_op_status) {
    set_has_tx_op_status();
  } else {
    clear_has_tx_op_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.WriteLockResponse.tx_op_status)
}

// -------------------------------------------------------------------

// WriteIntentRequest

// optional .azino.TxIdentifier txid = 1;
inline bool WriteIntentRequest::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteIntentRequest::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteIntentRequest::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteIntentRequest::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
inline const ::azino::TxIdentifier& WriteIntentRequest::txid() const {
  // @@protoc_insertion_point(field_get:azino.txindex.WriteIntentRequest.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
inline ::azino::TxIdentifier* WriteIntentRequest::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.WriteIntentRequest.txid)
  return txid_;
}
inline ::azino::TxIdentifier* WriteIntentRequest::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txindex.WriteIntentRequest.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
inline void WriteIntentRequest::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.WriteIntentRequest.txid)
}

// optional string key = 2;
inline bool WriteIntentRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WriteIntentRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WriteIntentRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WriteIntentRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& WriteIntentRequest::key() const {
  // @@protoc_insertion_point(field_get:azino.txindex.WriteIntentRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteIntentRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.txindex.WriteIntentRequest.key)
}
inline void WriteIntentRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.txindex.WriteIntentRequest.key)
}
inline void WriteIntentRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.txindex.WriteIntentRequest.key)
}
inline ::std::string* WriteIntentRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.txindex.WriteIntentRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteIntentRequest::release_key() {
  // @@protoc_insertion_point(field_release:azino.txindex.WriteIntentRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteIntentRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.WriteIntentRequest.key)
}

// optional .azino.Value value = 3;
inline bool WriteIntentRequest::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WriteIntentRequest::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WriteIntentRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WriteIntentRequest::clear_value() {
  if (value_ != NULL) value_->::azino::Value::Clear();
  clear_has_value();
}
inline const ::azino::Value& WriteIntentRequest::value() const {
  // @@protoc_insertion_point(field_get:azino.txindex.WriteIntentRequest.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::azino::Value* WriteIntentRequest::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::azino::Value;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.WriteIntentRequest.value)
  return value_;
}
inline ::azino::Value* WriteIntentRequest::release_value() {
  // @@protoc_insertion_point(field_release:azino.txindex.WriteIntentRequest.value)
  clear_has_value();
  ::azino::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void WriteIntentRequest::set_allocated_value(::azino::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.WriteIntentRequest.value)
}

// -------------------------------------------------------------------

// WriteIntentResponse

// optional .azino.TxOpStatus tx_op_status = 1;
inline bool WriteIntentResponse::has_tx_op_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteIntentResponse::set_has_tx_op_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteIntentResponse::clear_has_tx_op_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteIntentResponse::clear_tx_op_status() {
  if (tx_op_status_ != NULL) tx_op_status_->::azino::TxOpStatus::Clear();
  clear_has_tx_op_status();
}
inline const ::azino::TxOpStatus& WriteIntentResponse::tx_op_status() const {
  // @@protoc_insertion_point(field_get:azino.txindex.WriteIntentResponse.tx_op_status)
  return tx_op_status_ != NULL ? *tx_op_status_ : *default_instance_->tx_op_status_;
}
inline ::azino::TxOpStatus* WriteIntentResponse::mutable_tx_op_status() {
  set_has_tx_op_status();
  if (tx_op_status_ == NULL) {
    tx_op_status_ = new ::azino::TxOpStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.WriteIntentResponse.tx_op_status)
  return tx_op_status_;
}
inline ::azino::TxOpStatus* WriteIntentResponse::release_tx_op_status() {
  // @@protoc_insertion_point(field_release:azino.txindex.WriteIntentResponse.tx_op_status)
  clear_has_tx_op_status();
  ::azino::TxOpStatus* temp = tx_op_status_;
  tx_op_status_ = NULL;
  return temp;
}
inline void WriteIntentResponse::set_allocated_tx_op_status(::azino::TxOpStatus* tx_op_status) {
  delete tx_op_status_;
  tx_op_status_ = tx_op_status;
  if (tx_op_status) {
    set_has_tx_op_status();
  } else {
    clear_has_tx_op_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.WriteIntentResponse.tx_op_status)
}

// -------------------------------------------------------------------

// CleanRequest

// optional .azino.TxIdentifier txid = 1;
inline bool CleanRequest::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CleanRequest::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CleanRequest::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CleanRequest::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
inline const ::azino::TxIdentifier& CleanRequest::txid() const {
  // @@protoc_insertion_point(field_get:azino.txindex.CleanRequest.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
inline ::azino::TxIdentifier* CleanRequest::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.CleanRequest.txid)
  return txid_;
}
inline ::azino::TxIdentifier* CleanRequest::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txindex.CleanRequest.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
inline void CleanRequest::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.CleanRequest.txid)
}

// optional string key = 2;
inline bool CleanRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CleanRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CleanRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CleanRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& CleanRequest::key() const {
  // @@protoc_insertion_point(field_get:azino.txindex.CleanRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CleanRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.txindex.CleanRequest.key)
}
inline void CleanRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.txindex.CleanRequest.key)
}
inline void CleanRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.txindex.CleanRequest.key)
}
inline ::std::string* CleanRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.txindex.CleanRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CleanRequest::release_key() {
  // @@protoc_insertion_point(field_release:azino.txindex.CleanRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CleanRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.CleanRequest.key)
}

// -------------------------------------------------------------------

// CleanResponse

// optional .azino.TxOpStatus tx_op_status = 1;
inline bool CleanResponse::has_tx_op_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CleanResponse::set_has_tx_op_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CleanResponse::clear_has_tx_op_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CleanResponse::clear_tx_op_status() {
  if (tx_op_status_ != NULL) tx_op_status_->::azino::TxOpStatus::Clear();
  clear_has_tx_op_status();
}
inline const ::azino::TxOpStatus& CleanResponse::tx_op_status() const {
  // @@protoc_insertion_point(field_get:azino.txindex.CleanResponse.tx_op_status)
  return tx_op_status_ != NULL ? *tx_op_status_ : *default_instance_->tx_op_status_;
}
inline ::azino::TxOpStatus* CleanResponse::mutable_tx_op_status() {
  set_has_tx_op_status();
  if (tx_op_status_ == NULL) {
    tx_op_status_ = new ::azino::TxOpStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.CleanResponse.tx_op_status)
  return tx_op_status_;
}
inline ::azino::TxOpStatus* CleanResponse::release_tx_op_status() {
  // @@protoc_insertion_point(field_release:azino.txindex.CleanResponse.tx_op_status)
  clear_has_tx_op_status();
  ::azino::TxOpStatus* temp = tx_op_status_;
  tx_op_status_ = NULL;
  return temp;
}
inline void CleanResponse::set_allocated_tx_op_status(::azino::TxOpStatus* tx_op_status) {
  delete tx_op_status_;
  tx_op_status_ = tx_op_status;
  if (tx_op_status) {
    set_has_tx_op_status();
  } else {
    clear_has_tx_op_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.CleanResponse.tx_op_status)
}

// -------------------------------------------------------------------

// CommitRequest

// optional .azino.TxIdentifier txid = 1;
inline bool CommitRequest::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommitRequest::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommitRequest::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommitRequest::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
inline const ::azino::TxIdentifier& CommitRequest::txid() const {
  // @@protoc_insertion_point(field_get:azino.txindex.CommitRequest.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
inline ::azino::TxIdentifier* CommitRequest::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.CommitRequest.txid)
  return txid_;
}
inline ::azino::TxIdentifier* CommitRequest::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txindex.CommitRequest.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
inline void CommitRequest::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.CommitRequest.txid)
}

// optional string key = 2;
inline bool CommitRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommitRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommitRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommitRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& CommitRequest::key() const {
  // @@protoc_insertion_point(field_get:azino.txindex.CommitRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommitRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.txindex.CommitRequest.key)
}
inline void CommitRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.txindex.CommitRequest.key)
}
inline void CommitRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.txindex.CommitRequest.key)
}
inline ::std::string* CommitRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.txindex.CommitRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommitRequest::release_key() {
  // @@protoc_insertion_point(field_release:azino.txindex.CommitRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommitRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.CommitRequest.key)
}

// -------------------------------------------------------------------

// CommitResponse

// optional .azino.TxOpStatus tx_op_status = 1;
inline bool CommitResponse::has_tx_op_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommitResponse::set_has_tx_op_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommitResponse::clear_has_tx_op_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommitResponse::clear_tx_op_status() {
  if (tx_op_status_ != NULL) tx_op_status_->::azino::TxOpStatus::Clear();
  clear_has_tx_op_status();
}
inline const ::azino::TxOpStatus& CommitResponse::tx_op_status() const {
  // @@protoc_insertion_point(field_get:azino.txindex.CommitResponse.tx_op_status)
  return tx_op_status_ != NULL ? *tx_op_status_ : *default_instance_->tx_op_status_;
}
inline ::azino::TxOpStatus* CommitResponse::mutable_tx_op_status() {
  set_has_tx_op_status();
  if (tx_op_status_ == NULL) {
    tx_op_status_ = new ::azino::TxOpStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.CommitResponse.tx_op_status)
  return tx_op_status_;
}
inline ::azino::TxOpStatus* CommitResponse::release_tx_op_status() {
  // @@protoc_insertion_point(field_release:azino.txindex.CommitResponse.tx_op_status)
  clear_has_tx_op_status();
  ::azino::TxOpStatus* temp = tx_op_status_;
  tx_op_status_ = NULL;
  return temp;
}
inline void CommitResponse::set_allocated_tx_op_status(::azino::TxOpStatus* tx_op_status) {
  delete tx_op_status_;
  tx_op_status_ = tx_op_status;
  if (tx_op_status) {
    set_has_tx_op_status();
  } else {
    clear_has_tx_op_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.CommitResponse.tx_op_status)
}

// -------------------------------------------------------------------

// ReadRequest

// optional .azino.TxIdentifier txid = 1;
inline bool ReadRequest::has_txid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadRequest::set_has_txid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadRequest::clear_has_txid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadRequest::clear_txid() {
  if (txid_ != NULL) txid_->::azino::TxIdentifier::Clear();
  clear_has_txid();
}
inline const ::azino::TxIdentifier& ReadRequest::txid() const {
  // @@protoc_insertion_point(field_get:azino.txindex.ReadRequest.txid)
  return txid_ != NULL ? *txid_ : *default_instance_->txid_;
}
inline ::azino::TxIdentifier* ReadRequest::mutable_txid() {
  set_has_txid();
  if (txid_ == NULL) {
    txid_ = new ::azino::TxIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.ReadRequest.txid)
  return txid_;
}
inline ::azino::TxIdentifier* ReadRequest::release_txid() {
  // @@protoc_insertion_point(field_release:azino.txindex.ReadRequest.txid)
  clear_has_txid();
  ::azino::TxIdentifier* temp = txid_;
  txid_ = NULL;
  return temp;
}
inline void ReadRequest::set_allocated_txid(::azino::TxIdentifier* txid) {
  delete txid_;
  txid_ = txid;
  if (txid) {
    set_has_txid();
  } else {
    clear_has_txid();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.ReadRequest.txid)
}

// optional string key = 2;
inline bool ReadRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReadRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReadRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& ReadRequest::key() const {
  // @@protoc_insertion_point(field_get:azino.txindex.ReadRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.txindex.ReadRequest.key)
}
inline void ReadRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.txindex.ReadRequest.key)
}
inline void ReadRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.txindex.ReadRequest.key)
}
inline ::std::string* ReadRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.txindex.ReadRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadRequest::release_key() {
  // @@protoc_insertion_point(field_release:azino.txindex.ReadRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.ReadRequest.key)
}

// optional bool lock = 3;
inline bool ReadRequest::has_lock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReadRequest::set_has_lock() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReadRequest::clear_has_lock() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReadRequest::clear_lock() {
  lock_ = false;
  clear_has_lock();
}
inline bool ReadRequest::lock() const {
  // @@protoc_insertion_point(field_get:azino.txindex.ReadRequest.lock)
  return lock_;
}
inline void ReadRequest::set_lock(bool value) {
  set_has_lock();
  lock_ = value;
  // @@protoc_insertion_point(field_set:azino.txindex.ReadRequest.lock)
}

// -------------------------------------------------------------------

// ReadResponse

// optional .azino.TxOpStatus tx_op_status = 1;
inline bool ReadResponse::has_tx_op_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadResponse::set_has_tx_op_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadResponse::clear_has_tx_op_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadResponse::clear_tx_op_status() {
  if (tx_op_status_ != NULL) tx_op_status_->::azino::TxOpStatus::Clear();
  clear_has_tx_op_status();
}
inline const ::azino::TxOpStatus& ReadResponse::tx_op_status() const {
  // @@protoc_insertion_point(field_get:azino.txindex.ReadResponse.tx_op_status)
  return tx_op_status_ != NULL ? *tx_op_status_ : *default_instance_->tx_op_status_;
}
inline ::azino::TxOpStatus* ReadResponse::mutable_tx_op_status() {
  set_has_tx_op_status();
  if (tx_op_status_ == NULL) {
    tx_op_status_ = new ::azino::TxOpStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.ReadResponse.tx_op_status)
  return tx_op_status_;
}
inline ::azino::TxOpStatus* ReadResponse::release_tx_op_status() {
  // @@protoc_insertion_point(field_release:azino.txindex.ReadResponse.tx_op_status)
  clear_has_tx_op_status();
  ::azino::TxOpStatus* temp = tx_op_status_;
  tx_op_status_ = NULL;
  return temp;
}
inline void ReadResponse::set_allocated_tx_op_status(::azino::TxOpStatus* tx_op_status) {
  delete tx_op_status_;
  tx_op_status_ = tx_op_status;
  if (tx_op_status) {
    set_has_tx_op_status();
  } else {
    clear_has_tx_op_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.ReadResponse.tx_op_status)
}

// optional .azino.Value value = 2;
inline bool ReadResponse::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadResponse::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReadResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReadResponse::clear_value() {
  if (value_ != NULL) value_->::azino::Value::Clear();
  clear_has_value();
}
inline const ::azino::Value& ReadResponse::value() const {
  // @@protoc_insertion_point(field_get:azino.txindex.ReadResponse.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::azino::Value* ReadResponse::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::azino::Value;
  }
  // @@protoc_insertion_point(field_mutable:azino.txindex.ReadResponse.value)
  return value_;
}
inline ::azino::Value* ReadResponse::release_value() {
  // @@protoc_insertion_point(field_release:azino.txindex.ReadResponse.value)
  clear_has_value();
  ::azino::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void ReadResponse::set_allocated_value(::azino::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.txindex.ReadResponse.value)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace txindex
}  // namespace azino

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2ftxindex_2ftxindex_2eproto__INCLUDED
