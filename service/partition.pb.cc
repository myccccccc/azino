// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/partition.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/partition.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace azino {

namespace {

const ::google::protobuf::Descriptor* RangePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartitionConfigPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartitionConfigPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartitionConfigMapPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartitionConfigMapPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartitionPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartitionPB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fpartition_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_service_2fpartition_2eproto() {
  protobuf_AddDesc_service_2fpartition_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/partition.proto");
  GOOGLE_CHECK(file != NULL);
  RangePB_descriptor_ = file->message_type(0);
  static const int RangePB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangePB, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangePB, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangePB, left_include_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangePB, right_include_),
  };
  RangePB_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RangePB_descriptor_,
      RangePB::default_instance_,
      RangePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangePB, _has_bits_[0]),
      -1,
      -1,
      sizeof(RangePB),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangePB, _internal_metadata_),
      -1);
  PartitionConfigPB_descriptor_ = file->message_type(1);
  static const int PartitionConfigPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionConfigPB, txindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionConfigPB, pessimism_key_),
  };
  PartitionConfigPB_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PartitionConfigPB_descriptor_,
      PartitionConfigPB::default_instance_,
      PartitionConfigPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionConfigPB, _has_bits_[0]),
      -1,
      -1,
      sizeof(PartitionConfigPB),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionConfigPB, _internal_metadata_),
      -1);
  PartitionConfigMapPB_descriptor_ = file->message_type(2);
  static const int PartitionConfigMapPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionConfigMapPB, ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionConfigMapPB, partition_configs_),
  };
  PartitionConfigMapPB_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PartitionConfigMapPB_descriptor_,
      PartitionConfigMapPB::default_instance_,
      PartitionConfigMapPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionConfigMapPB, _has_bits_[0]),
      -1,
      -1,
      sizeof(PartitionConfigMapPB),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionConfigMapPB, _internal_metadata_),
      -1);
  PartitionPB_descriptor_ = file->message_type(3);
  static const int PartitionPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionPB, pcm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionPB, storage_),
  };
  PartitionPB_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PartitionPB_descriptor_,
      PartitionPB::default_instance_,
      PartitionPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionPB, _has_bits_[0]),
      -1,
      -1,
      sizeof(PartitionPB),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartitionPB, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fpartition_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RangePB_descriptor_, &RangePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PartitionConfigPB_descriptor_, &PartitionConfigPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PartitionConfigMapPB_descriptor_, &PartitionConfigMapPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PartitionPB_descriptor_, &PartitionPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2fpartition_2eproto() {
  delete RangePB::default_instance_;
  delete RangePB_reflection_;
  delete PartitionConfigPB::default_instance_;
  delete PartitionConfigPB_reflection_;
  delete PartitionConfigMapPB::default_instance_;
  delete PartitionConfigMapPB_reflection_;
  delete PartitionPB::default_instance_;
  delete PartitionPB_reflection_;
}

void protobuf_AddDesc_service_2fpartition_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_service_2fpartition_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027service/partition.proto\022\005azino\"S\n\007Rang"
    "ePB\022\014\n\004left\030\001 \001(\t\022\r\n\005right\030\002 \001(\t\022\024\n\014left"
    "_include\030\003 \001(\005\022\025\n\rright_include\030\004 \001(\005\";\n"
    "\021PartitionConfigPB\022\017\n\007txindex\030\001 \001(\t\022\025\n\rp"
    "essimism_key\030\002 \003(\t\"k\n\024PartitionConfigMap"
    "PB\022\036\n\006ranges\030\001 \003(\0132\016.azino.RangePB\0223\n\021pa"
    "rtition_configs\030\002 \003(\0132\030.azino.PartitionC"
    "onfigPB\"H\n\013PartitionPB\022(\n\003pcm\030\001 \001(\0132\033.az"
    "ino.PartitionConfigMapPB\022\017\n\007storage\030\002 \001("
    "\t", 361);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/partition.proto", &protobuf_RegisterTypes);
  RangePB::default_instance_ = new RangePB();
  PartitionConfigPB::default_instance_ = new PartitionConfigPB();
  PartitionConfigMapPB::default_instance_ = new PartitionConfigMapPB();
  PartitionPB::default_instance_ = new PartitionPB();
  RangePB::default_instance_->InitAsDefaultInstance();
  PartitionConfigPB::default_instance_->InitAsDefaultInstance();
  PartitionConfigMapPB::default_instance_->InitAsDefaultInstance();
  PartitionPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fpartition_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fpartition_2eproto {
  StaticDescriptorInitializer_service_2fpartition_2eproto() {
    protobuf_AddDesc_service_2fpartition_2eproto();
  }
} static_descriptor_initializer_service_2fpartition_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangePB::kLeftFieldNumber;
const int RangePB::kRightFieldNumber;
const int RangePB::kLeftIncludeFieldNumber;
const int RangePB::kRightIncludeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangePB::RangePB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.RangePB)
}

void RangePB::InitAsDefaultInstance() {
}

RangePB::RangePB(const RangePB& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.RangePB)
}

void RangePB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  left_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_include_ = 0;
  right_include_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangePB::~RangePB() {
  // @@protoc_insertion_point(destructor:azino.RangePB)
  SharedDtor();
}

void RangePB::SharedDtor() {
  left_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RangePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangePB_descriptor_;
}

const RangePB& RangePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fpartition_2eproto();
  return *default_instance_;
}

RangePB* RangePB::default_instance_ = NULL;

RangePB* RangePB::New(::google::protobuf::Arena* arena) const {
  RangePB* n = new RangePB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangePB::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.RangePB)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RangePB, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RangePB*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(left_include_, right_include_);
    if (has_left()) {
      left_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_right()) {
      right_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RangePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.RangePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string left = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_left()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->left().data(), this->left().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.RangePB.left");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_right;
        break;
      }

      // optional string right = 2;
      case 2: {
        if (tag == 18) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_right()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->right().data(), this->right().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.RangePB.right");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_left_include;
        break;
      }

      // optional int32 left_include = 3;
      case 3: {
        if (tag == 24) {
         parse_left_include:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_include_)));
          set_has_left_include();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_right_include;
        break;
      }

      // optional int32 right_include = 4;
      case 4: {
        if (tag == 32) {
         parse_right_include:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_include_)));
          set_has_right_include();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.RangePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.RangePB)
  return false;
#undef DO_
}

void RangePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.RangePB)
  // optional string left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->left().data(), this->left().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.RangePB.left");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->left(), output);
  }

  // optional string right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->right().data(), this->right().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.RangePB.right");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->right(), output);
  }

  // optional int32 left_include = 3;
  if (has_left_include()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_include(), output);
  }

  // optional int32 right_include = 4;
  if (has_right_include()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->right_include(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.RangePB)
}

::google::protobuf::uint8* RangePB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.RangePB)
  // optional string left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->left().data(), this->left().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.RangePB.left");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->left(), target);
  }

  // optional string right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->right().data(), this->right().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.RangePB.right");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->right(), target);
  }

  // optional int32 left_include = 3;
  if (has_left_include()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_include(), target);
  }

  // optional int32 right_include = 4;
  if (has_right_include()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->right_include(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.RangePB)
  return target;
}

int RangePB::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.RangePB)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->left());
    }

    // optional string right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->right());
    }

    // optional int32 left_include = 3;
    if (has_left_include()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_include());
    }

    // optional int32 right_include = 4;
    if (has_right_include()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right_include());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangePB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.RangePB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RangePB* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RangePB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.RangePB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.RangePB)
    MergeFrom(*source);
  }
}

void RangePB::MergeFrom(const RangePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.RangePB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_has_left();
      left_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.left_);
    }
    if (from.has_right()) {
      set_has_right();
      right_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_);
    }
    if (from.has_left_include()) {
      set_left_include(from.left_include());
    }
    if (from.has_right_include()) {
      set_right_include(from.right_include());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RangePB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.RangePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangePB::CopyFrom(const RangePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.RangePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangePB::IsInitialized() const {

  return true;
}

void RangePB::Swap(RangePB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangePB::InternalSwap(RangePB* other) {
  left_.Swap(&other->left_);
  right_.Swap(&other->right_);
  std::swap(left_include_, other->left_include_);
  std::swap(right_include_, other->right_include_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangePB_descriptor_;
  metadata.reflection = RangePB_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangePB

// optional string left = 1;
bool RangePB::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RangePB::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
void RangePB::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
void RangePB::clear_left() {
  left_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_left();
}
 const ::std::string& RangePB::left() const {
  // @@protoc_insertion_point(field_get:azino.RangePB.left)
  return left_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangePB::set_left(const ::std::string& value) {
  set_has_left();
  left_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.RangePB.left)
}
 void RangePB::set_left(const char* value) {
  set_has_left();
  left_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.RangePB.left)
}
 void RangePB::set_left(const char* value, size_t size) {
  set_has_left();
  left_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.RangePB.left)
}
 ::std::string* RangePB::mutable_left() {
  set_has_left();
  // @@protoc_insertion_point(field_mutable:azino.RangePB.left)
  return left_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RangePB::release_left() {
  // @@protoc_insertion_point(field_release:azino.RangePB.left)
  clear_has_left();
  return left_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangePB::set_allocated_left(::std::string* left) {
  if (left != NULL) {
    set_has_left();
  } else {
    clear_has_left();
  }
  left_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), left);
  // @@protoc_insertion_point(field_set_allocated:azino.RangePB.left)
}

// optional string right = 2;
bool RangePB::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RangePB::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
void RangePB::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
void RangePB::clear_right() {
  right_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_right();
}
 const ::std::string& RangePB::right() const {
  // @@protoc_insertion_point(field_get:azino.RangePB.right)
  return right_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangePB::set_right(const ::std::string& value) {
  set_has_right();
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.RangePB.right)
}
 void RangePB::set_right(const char* value) {
  set_has_right();
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.RangePB.right)
}
 void RangePB::set_right(const char* value, size_t size) {
  set_has_right();
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.RangePB.right)
}
 ::std::string* RangePB::mutable_right() {
  set_has_right();
  // @@protoc_insertion_point(field_mutable:azino.RangePB.right)
  return right_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RangePB::release_right() {
  // @@protoc_insertion_point(field_release:azino.RangePB.right)
  clear_has_right();
  return right_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangePB::set_allocated_right(::std::string* right) {
  if (right != NULL) {
    set_has_right();
  } else {
    clear_has_right();
  }
  right_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right);
  // @@protoc_insertion_point(field_set_allocated:azino.RangePB.right)
}

// optional int32 left_include = 3;
bool RangePB::has_left_include() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RangePB::set_has_left_include() {
  _has_bits_[0] |= 0x00000004u;
}
void RangePB::clear_has_left_include() {
  _has_bits_[0] &= ~0x00000004u;
}
void RangePB::clear_left_include() {
  left_include_ = 0;
  clear_has_left_include();
}
 ::google::protobuf::int32 RangePB::left_include() const {
  // @@protoc_insertion_point(field_get:azino.RangePB.left_include)
  return left_include_;
}
 void RangePB::set_left_include(::google::protobuf::int32 value) {
  set_has_left_include();
  left_include_ = value;
  // @@protoc_insertion_point(field_set:azino.RangePB.left_include)
}

// optional int32 right_include = 4;
bool RangePB::has_right_include() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RangePB::set_has_right_include() {
  _has_bits_[0] |= 0x00000008u;
}
void RangePB::clear_has_right_include() {
  _has_bits_[0] &= ~0x00000008u;
}
void RangePB::clear_right_include() {
  right_include_ = 0;
  clear_has_right_include();
}
 ::google::protobuf::int32 RangePB::right_include() const {
  // @@protoc_insertion_point(field_get:azino.RangePB.right_include)
  return right_include_;
}
 void RangePB::set_right_include(::google::protobuf::int32 value) {
  set_has_right_include();
  right_include_ = value;
  // @@protoc_insertion_point(field_set:azino.RangePB.right_include)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartitionConfigPB::kTxindexFieldNumber;
const int PartitionConfigPB::kPessimismKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartitionConfigPB::PartitionConfigPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.PartitionConfigPB)
}

void PartitionConfigPB::InitAsDefaultInstance() {
}

PartitionConfigPB::PartitionConfigPB(const PartitionConfigPB& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.PartitionConfigPB)
}

void PartitionConfigPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  txindex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartitionConfigPB::~PartitionConfigPB() {
  // @@protoc_insertion_point(destructor:azino.PartitionConfigPB)
  SharedDtor();
}

void PartitionConfigPB::SharedDtor() {
  txindex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PartitionConfigPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartitionConfigPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartitionConfigPB_descriptor_;
}

const PartitionConfigPB& PartitionConfigPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fpartition_2eproto();
  return *default_instance_;
}

PartitionConfigPB* PartitionConfigPB::default_instance_ = NULL;

PartitionConfigPB* PartitionConfigPB::New(::google::protobuf::Arena* arena) const {
  PartitionConfigPB* n = new PartitionConfigPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartitionConfigPB::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.PartitionConfigPB)
  if (has_txindex()) {
    txindex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  pessimism_key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PartitionConfigPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.PartitionConfigPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string txindex = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txindex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->txindex().data(), this->txindex().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.PartitionConfigPB.txindex");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pessimism_key;
        break;
      }

      // repeated string pessimism_key = 2;
      case 2: {
        if (tag == 18) {
         parse_pessimism_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pessimism_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pessimism_key(this->pessimism_key_size() - 1).data(),
            this->pessimism_key(this->pessimism_key_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.PartitionConfigPB.pessimism_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pessimism_key;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.PartitionConfigPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.PartitionConfigPB)
  return false;
#undef DO_
}

void PartitionConfigPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.PartitionConfigPB)
  // optional string txindex = 1;
  if (has_txindex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txindex().data(), this->txindex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.PartitionConfigPB.txindex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txindex(), output);
  }

  // repeated string pessimism_key = 2;
  for (int i = 0; i < this->pessimism_key_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pessimism_key(i).data(), this->pessimism_key(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.PartitionConfigPB.pessimism_key");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pessimism_key(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.PartitionConfigPB)
}

::google::protobuf::uint8* PartitionConfigPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.PartitionConfigPB)
  // optional string txindex = 1;
  if (has_txindex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txindex().data(), this->txindex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.PartitionConfigPB.txindex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txindex(), target);
  }

  // repeated string pessimism_key = 2;
  for (int i = 0; i < this->pessimism_key_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pessimism_key(i).data(), this->pessimism_key(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.PartitionConfigPB.pessimism_key");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->pessimism_key(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.PartitionConfigPB)
  return target;
}

int PartitionConfigPB::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.PartitionConfigPB)
  int total_size = 0;

  // optional string txindex = 1;
  if (has_txindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txindex());
  }

  // repeated string pessimism_key = 2;
  total_size += 1 * this->pessimism_key_size();
  for (int i = 0; i < this->pessimism_key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pessimism_key(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartitionConfigPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.PartitionConfigPB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PartitionConfigPB* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PartitionConfigPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.PartitionConfigPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.PartitionConfigPB)
    MergeFrom(*source);
  }
}

void PartitionConfigPB::MergeFrom(const PartitionConfigPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.PartitionConfigPB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pessimism_key_.MergeFrom(from.pessimism_key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txindex()) {
      set_has_txindex();
      txindex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txindex_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PartitionConfigPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.PartitionConfigPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionConfigPB::CopyFrom(const PartitionConfigPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.PartitionConfigPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionConfigPB::IsInitialized() const {

  return true;
}

void PartitionConfigPB::Swap(PartitionConfigPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartitionConfigPB::InternalSwap(PartitionConfigPB* other) {
  txindex_.Swap(&other->txindex_);
  pessimism_key_.UnsafeArenaSwap(&other->pessimism_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartitionConfigPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartitionConfigPB_descriptor_;
  metadata.reflection = PartitionConfigPB_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartitionConfigPB

// optional string txindex = 1;
bool PartitionConfigPB::has_txindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PartitionConfigPB::set_has_txindex() {
  _has_bits_[0] |= 0x00000001u;
}
void PartitionConfigPB::clear_has_txindex() {
  _has_bits_[0] &= ~0x00000001u;
}
void PartitionConfigPB::clear_txindex() {
  txindex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txindex();
}
 const ::std::string& PartitionConfigPB::txindex() const {
  // @@protoc_insertion_point(field_get:azino.PartitionConfigPB.txindex)
  return txindex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PartitionConfigPB::set_txindex(const ::std::string& value) {
  set_has_txindex();
  txindex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.PartitionConfigPB.txindex)
}
 void PartitionConfigPB::set_txindex(const char* value) {
  set_has_txindex();
  txindex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.PartitionConfigPB.txindex)
}
 void PartitionConfigPB::set_txindex(const char* value, size_t size) {
  set_has_txindex();
  txindex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.PartitionConfigPB.txindex)
}
 ::std::string* PartitionConfigPB::mutable_txindex() {
  set_has_txindex();
  // @@protoc_insertion_point(field_mutable:azino.PartitionConfigPB.txindex)
  return txindex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PartitionConfigPB::release_txindex() {
  // @@protoc_insertion_point(field_release:azino.PartitionConfigPB.txindex)
  clear_has_txindex();
  return txindex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PartitionConfigPB::set_allocated_txindex(::std::string* txindex) {
  if (txindex != NULL) {
    set_has_txindex();
  } else {
    clear_has_txindex();
  }
  txindex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txindex);
  // @@protoc_insertion_point(field_set_allocated:azino.PartitionConfigPB.txindex)
}

// repeated string pessimism_key = 2;
int PartitionConfigPB::pessimism_key_size() const {
  return pessimism_key_.size();
}
void PartitionConfigPB::clear_pessimism_key() {
  pessimism_key_.Clear();
}
 const ::std::string& PartitionConfigPB::pessimism_key(int index) const {
  // @@protoc_insertion_point(field_get:azino.PartitionConfigPB.pessimism_key)
  return pessimism_key_.Get(index);
}
 ::std::string* PartitionConfigPB::mutable_pessimism_key(int index) {
  // @@protoc_insertion_point(field_mutable:azino.PartitionConfigPB.pessimism_key)
  return pessimism_key_.Mutable(index);
}
 void PartitionConfigPB::set_pessimism_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:azino.PartitionConfigPB.pessimism_key)
  pessimism_key_.Mutable(index)->assign(value);
}
 void PartitionConfigPB::set_pessimism_key(int index, const char* value) {
  pessimism_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:azino.PartitionConfigPB.pessimism_key)
}
 void PartitionConfigPB::set_pessimism_key(int index, const char* value, size_t size) {
  pessimism_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:azino.PartitionConfigPB.pessimism_key)
}
 ::std::string* PartitionConfigPB::add_pessimism_key() {
  // @@protoc_insertion_point(field_add_mutable:azino.PartitionConfigPB.pessimism_key)
  return pessimism_key_.Add();
}
 void PartitionConfigPB::add_pessimism_key(const ::std::string& value) {
  pessimism_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:azino.PartitionConfigPB.pessimism_key)
}
 void PartitionConfigPB::add_pessimism_key(const char* value) {
  pessimism_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:azino.PartitionConfigPB.pessimism_key)
}
 void PartitionConfigPB::add_pessimism_key(const char* value, size_t size) {
  pessimism_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:azino.PartitionConfigPB.pessimism_key)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PartitionConfigPB::pessimism_key() const {
  // @@protoc_insertion_point(field_list:azino.PartitionConfigPB.pessimism_key)
  return pessimism_key_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PartitionConfigPB::mutable_pessimism_key() {
  // @@protoc_insertion_point(field_mutable_list:azino.PartitionConfigPB.pessimism_key)
  return &pessimism_key_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartitionConfigMapPB::kRangesFieldNumber;
const int PartitionConfigMapPB::kPartitionConfigsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartitionConfigMapPB::PartitionConfigMapPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.PartitionConfigMapPB)
}

void PartitionConfigMapPB::InitAsDefaultInstance() {
}

PartitionConfigMapPB::PartitionConfigMapPB(const PartitionConfigMapPB& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.PartitionConfigMapPB)
}

void PartitionConfigMapPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartitionConfigMapPB::~PartitionConfigMapPB() {
  // @@protoc_insertion_point(destructor:azino.PartitionConfigMapPB)
  SharedDtor();
}

void PartitionConfigMapPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PartitionConfigMapPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartitionConfigMapPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartitionConfigMapPB_descriptor_;
}

const PartitionConfigMapPB& PartitionConfigMapPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fpartition_2eproto();
  return *default_instance_;
}

PartitionConfigMapPB* PartitionConfigMapPB::default_instance_ = NULL;

PartitionConfigMapPB* PartitionConfigMapPB::New(::google::protobuf::Arena* arena) const {
  PartitionConfigMapPB* n = new PartitionConfigMapPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartitionConfigMapPB::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.PartitionConfigMapPB)
  ranges_.Clear();
  partition_configs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PartitionConfigMapPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.PartitionConfigMapPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .azino.RangePB ranges = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ranges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_ranges;
        if (input->ExpectTag(18)) goto parse_loop_partition_configs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .azino.PartitionConfigPB partition_configs = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_partition_configs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_partition_configs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_partition_configs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.PartitionConfigMapPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.PartitionConfigMapPB)
  return false;
#undef DO_
}

void PartitionConfigMapPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.PartitionConfigMapPB)
  // repeated .azino.RangePB ranges = 1;
  for (unsigned int i = 0, n = this->ranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranges(i), output);
  }

  // repeated .azino.PartitionConfigPB partition_configs = 2;
  for (unsigned int i = 0, n = this->partition_configs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->partition_configs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.PartitionConfigMapPB)
}

::google::protobuf::uint8* PartitionConfigMapPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.PartitionConfigMapPB)
  // repeated .azino.RangePB ranges = 1;
  for (unsigned int i = 0, n = this->ranges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->ranges(i), false, target);
  }

  // repeated .azino.PartitionConfigPB partition_configs = 2;
  for (unsigned int i = 0, n = this->partition_configs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->partition_configs(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.PartitionConfigMapPB)
  return target;
}

int PartitionConfigMapPB::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.PartitionConfigMapPB)
  int total_size = 0;

  // repeated .azino.RangePB ranges = 1;
  total_size += 1 * this->ranges_size();
  for (int i = 0; i < this->ranges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranges(i));
  }

  // repeated .azino.PartitionConfigPB partition_configs = 2;
  total_size += 1 * this->partition_configs_size();
  for (int i = 0; i < this->partition_configs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partition_configs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartitionConfigMapPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.PartitionConfigMapPB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PartitionConfigMapPB* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PartitionConfigMapPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.PartitionConfigMapPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.PartitionConfigMapPB)
    MergeFrom(*source);
  }
}

void PartitionConfigMapPB::MergeFrom(const PartitionConfigMapPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.PartitionConfigMapPB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ranges_.MergeFrom(from.ranges_);
  partition_configs_.MergeFrom(from.partition_configs_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PartitionConfigMapPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.PartitionConfigMapPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionConfigMapPB::CopyFrom(const PartitionConfigMapPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.PartitionConfigMapPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionConfigMapPB::IsInitialized() const {

  return true;
}

void PartitionConfigMapPB::Swap(PartitionConfigMapPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartitionConfigMapPB::InternalSwap(PartitionConfigMapPB* other) {
  ranges_.UnsafeArenaSwap(&other->ranges_);
  partition_configs_.UnsafeArenaSwap(&other->partition_configs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartitionConfigMapPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartitionConfigMapPB_descriptor_;
  metadata.reflection = PartitionConfigMapPB_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartitionConfigMapPB

// repeated .azino.RangePB ranges = 1;
int PartitionConfigMapPB::ranges_size() const {
  return ranges_.size();
}
void PartitionConfigMapPB::clear_ranges() {
  ranges_.Clear();
}
const ::azino::RangePB& PartitionConfigMapPB::ranges(int index) const {
  // @@protoc_insertion_point(field_get:azino.PartitionConfigMapPB.ranges)
  return ranges_.Get(index);
}
::azino::RangePB* PartitionConfigMapPB::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:azino.PartitionConfigMapPB.ranges)
  return ranges_.Mutable(index);
}
::azino::RangePB* PartitionConfigMapPB::add_ranges() {
  // @@protoc_insertion_point(field_add:azino.PartitionConfigMapPB.ranges)
  return ranges_.Add();
}
::google::protobuf::RepeatedPtrField< ::azino::RangePB >*
PartitionConfigMapPB::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:azino.PartitionConfigMapPB.ranges)
  return &ranges_;
}
const ::google::protobuf::RepeatedPtrField< ::azino::RangePB >&
PartitionConfigMapPB::ranges() const {
  // @@protoc_insertion_point(field_list:azino.PartitionConfigMapPB.ranges)
  return ranges_;
}

// repeated .azino.PartitionConfigPB partition_configs = 2;
int PartitionConfigMapPB::partition_configs_size() const {
  return partition_configs_.size();
}
void PartitionConfigMapPB::clear_partition_configs() {
  partition_configs_.Clear();
}
const ::azino::PartitionConfigPB& PartitionConfigMapPB::partition_configs(int index) const {
  // @@protoc_insertion_point(field_get:azino.PartitionConfigMapPB.partition_configs)
  return partition_configs_.Get(index);
}
::azino::PartitionConfigPB* PartitionConfigMapPB::mutable_partition_configs(int index) {
  // @@protoc_insertion_point(field_mutable:azino.PartitionConfigMapPB.partition_configs)
  return partition_configs_.Mutable(index);
}
::azino::PartitionConfigPB* PartitionConfigMapPB::add_partition_configs() {
  // @@protoc_insertion_point(field_add:azino.PartitionConfigMapPB.partition_configs)
  return partition_configs_.Add();
}
::google::protobuf::RepeatedPtrField< ::azino::PartitionConfigPB >*
PartitionConfigMapPB::mutable_partition_configs() {
  // @@protoc_insertion_point(field_mutable_list:azino.PartitionConfigMapPB.partition_configs)
  return &partition_configs_;
}
const ::google::protobuf::RepeatedPtrField< ::azino::PartitionConfigPB >&
PartitionConfigMapPB::partition_configs() const {
  // @@protoc_insertion_point(field_list:azino.PartitionConfigMapPB.partition_configs)
  return partition_configs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartitionPB::kPcmFieldNumber;
const int PartitionPB::kStorageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartitionPB::PartitionPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.PartitionPB)
}

void PartitionPB::InitAsDefaultInstance() {
  pcm_ = const_cast< ::azino::PartitionConfigMapPB*>(&::azino::PartitionConfigMapPB::default_instance());
}

PartitionPB::PartitionPB(const PartitionPB& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.PartitionPB)
}

void PartitionPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pcm_ = NULL;
  storage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartitionPB::~PartitionPB() {
  // @@protoc_insertion_point(destructor:azino.PartitionPB)
  SharedDtor();
}

void PartitionPB::SharedDtor() {
  storage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete pcm_;
  }
}

void PartitionPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartitionPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartitionPB_descriptor_;
}

const PartitionPB& PartitionPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fpartition_2eproto();
  return *default_instance_;
}

PartitionPB* PartitionPB::default_instance_ = NULL;

PartitionPB* PartitionPB::New(::google::protobuf::Arena* arena) const {
  PartitionPB* n = new PartitionPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartitionPB::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.PartitionPB)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pcm()) {
      if (pcm_ != NULL) pcm_->::azino::PartitionConfigMapPB::Clear();
    }
    if (has_storage()) {
      storage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PartitionPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.PartitionPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.PartitionConfigMapPB pcm = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pcm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional string storage = 2;
      case 2: {
        if (tag == 18) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->storage().data(), this->storage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.PartitionPB.storage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.PartitionPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.PartitionPB)
  return false;
#undef DO_
}

void PartitionPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.PartitionPB)
  // optional .azino.PartitionConfigMapPB pcm = 1;
  if (has_pcm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pcm_, output);
  }

  // optional string storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storage().data(), this->storage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.PartitionPB.storage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->storage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.PartitionPB)
}

::google::protobuf::uint8* PartitionPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.PartitionPB)
  // optional .azino.PartitionConfigMapPB pcm = 1;
  if (has_pcm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pcm_, false, target);
  }

  // optional string storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storage().data(), this->storage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.PartitionPB.storage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->storage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.PartitionPB)
  return target;
}

int PartitionPB::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.PartitionPB)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .azino.PartitionConfigMapPB pcm = 1;
    if (has_pcm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pcm_);
    }

    // optional string storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storage());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartitionPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.PartitionPB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PartitionPB* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PartitionPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.PartitionPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.PartitionPB)
    MergeFrom(*source);
  }
}

void PartitionPB::MergeFrom(const PartitionPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.PartitionPB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pcm()) {
      mutable_pcm()->::azino::PartitionConfigMapPB::MergeFrom(from.pcm());
    }
    if (from.has_storage()) {
      set_has_storage();
      storage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storage_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PartitionPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.PartitionPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionPB::CopyFrom(const PartitionPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.PartitionPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionPB::IsInitialized() const {

  return true;
}

void PartitionPB::Swap(PartitionPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartitionPB::InternalSwap(PartitionPB* other) {
  std::swap(pcm_, other->pcm_);
  storage_.Swap(&other->storage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartitionPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartitionPB_descriptor_;
  metadata.reflection = PartitionPB_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartitionPB

// optional .azino.PartitionConfigMapPB pcm = 1;
bool PartitionPB::has_pcm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PartitionPB::set_has_pcm() {
  _has_bits_[0] |= 0x00000001u;
}
void PartitionPB::clear_has_pcm() {
  _has_bits_[0] &= ~0x00000001u;
}
void PartitionPB::clear_pcm() {
  if (pcm_ != NULL) pcm_->::azino::PartitionConfigMapPB::Clear();
  clear_has_pcm();
}
const ::azino::PartitionConfigMapPB& PartitionPB::pcm() const {
  // @@protoc_insertion_point(field_get:azino.PartitionPB.pcm)
  return pcm_ != NULL ? *pcm_ : *default_instance_->pcm_;
}
::azino::PartitionConfigMapPB* PartitionPB::mutable_pcm() {
  set_has_pcm();
  if (pcm_ == NULL) {
    pcm_ = new ::azino::PartitionConfigMapPB;
  }
  // @@protoc_insertion_point(field_mutable:azino.PartitionPB.pcm)
  return pcm_;
}
::azino::PartitionConfigMapPB* PartitionPB::release_pcm() {
  // @@protoc_insertion_point(field_release:azino.PartitionPB.pcm)
  clear_has_pcm();
  ::azino::PartitionConfigMapPB* temp = pcm_;
  pcm_ = NULL;
  return temp;
}
void PartitionPB::set_allocated_pcm(::azino::PartitionConfigMapPB* pcm) {
  delete pcm_;
  pcm_ = pcm;
  if (pcm) {
    set_has_pcm();
  } else {
    clear_has_pcm();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.PartitionPB.pcm)
}

// optional string storage = 2;
bool PartitionPB::has_storage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PartitionPB::set_has_storage() {
  _has_bits_[0] |= 0x00000002u;
}
void PartitionPB::clear_has_storage() {
  _has_bits_[0] &= ~0x00000002u;
}
void PartitionPB::clear_storage() {
  storage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_storage();
}
 const ::std::string& PartitionPB::storage() const {
  // @@protoc_insertion_point(field_get:azino.PartitionPB.storage)
  return storage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PartitionPB::set_storage(const ::std::string& value) {
  set_has_storage();
  storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.PartitionPB.storage)
}
 void PartitionPB::set_storage(const char* value) {
  set_has_storage();
  storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.PartitionPB.storage)
}
 void PartitionPB::set_storage(const char* value, size_t size) {
  set_has_storage();
  storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.PartitionPB.storage)
}
 ::std::string* PartitionPB::mutable_storage() {
  set_has_storage();
  // @@protoc_insertion_point(field_mutable:azino.PartitionPB.storage)
  return storage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PartitionPB::release_storage() {
  // @@protoc_insertion_point(field_release:azino.PartitionPB.storage)
  clear_has_storage();
  return storage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PartitionPB::set_allocated_storage(::std::string* storage) {
  if (storage != NULL) {
    set_has_storage();
  } else {
    clear_has_storage();
  }
  storage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage);
  // @@protoc_insertion_point(field_set_allocated:azino.PartitionPB.storage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace azino

// @@protoc_insertion_point(global_scope)
