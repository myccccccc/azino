// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/storage/storage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/storage/storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace azino {
namespace storage {

namespace {

const ::google::protobuf::Descriptor* StorageStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StorageStatus_Code_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVCCPutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVCCPutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVCCPutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVCCPutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVCCGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVCCGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVCCGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVCCGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVCCDeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVCCDeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVCCDeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVCCDeleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchStoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchStoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchStoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchStoreResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVCCScanRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVCCScanRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVCCScanResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVCCScanResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* StorageService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fstorage_2fstorage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_service_2fstorage_2fstorage_2eproto() {
  protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/storage/storage.proto");
  GOOGLE_CHECK(file != NULL);
  StorageStatus_descriptor_ = file->message_type(0);
  static const int StorageStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageStatus, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageStatus, error_message_),
  };
  StorageStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StorageStatus_descriptor_,
      StorageStatus::default_instance_,
      StorageStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(StorageStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageStatus, _internal_metadata_),
      -1);
  StorageStatus_Code_descriptor_ = StorageStatus_descriptor_->enum_type(0);
  PutRequest_descriptor_ = file->message_type(1);
  static const int PutRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, value_),
  };
  PutRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PutRequest_descriptor_,
      PutRequest::default_instance_,
      PutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(PutRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _internal_metadata_),
      -1);
  PutResponse_descriptor_ = file->message_type(2);
  static const int PutResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, status_),
  };
  PutResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PutResponse_descriptor_,
      PutResponse::default_instance_,
      PutResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(PutResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, _internal_metadata_),
      -1);
  GetRequest_descriptor_ = file->message_type(3);
  static const int GetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, key_),
  };
  GetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRequest_descriptor_,
      GetRequest::default_instance_,
      GetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _internal_metadata_),
      -1);
  GetResponse_descriptor_ = file->message_type(4);
  static const int GetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, status_),
  };
  GetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetResponse_descriptor_,
      GetResponse::default_instance_,
      GetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _internal_metadata_),
      -1);
  DeleteRequest_descriptor_ = file->message_type(5);
  static const int DeleteRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, key_),
  };
  DeleteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteRequest_descriptor_,
      DeleteRequest::default_instance_,
      DeleteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(DeleteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, _internal_metadata_),
      -1);
  DeleteResponse_descriptor_ = file->message_type(6);
  static const int DeleteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, status_),
  };
  DeleteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteResponse_descriptor_,
      DeleteResponse::default_instance_,
      DeleteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(DeleteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, _internal_metadata_),
      -1);
  MVCCPutRequest_descriptor_ = file->message_type(7);
  static const int MVCCPutRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCPutRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCPutRequest, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCPutRequest, ts_),
  };
  MVCCPutRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVCCPutRequest_descriptor_,
      MVCCPutRequest::default_instance_,
      MVCCPutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCPutRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVCCPutRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCPutRequest, _internal_metadata_),
      -1);
  MVCCPutResponse_descriptor_ = file->message_type(8);
  static const int MVCCPutResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCPutResponse, status_),
  };
  MVCCPutResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVCCPutResponse_descriptor_,
      MVCCPutResponse::default_instance_,
      MVCCPutResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCPutResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVCCPutResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCPutResponse, _internal_metadata_),
      -1);
  MVCCGetRequest_descriptor_ = file->message_type(9);
  static const int MVCCGetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCGetRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCGetRequest, ts_),
  };
  MVCCGetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVCCGetRequest_descriptor_,
      MVCCGetRequest::default_instance_,
      MVCCGetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCGetRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVCCGetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCGetRequest, _internal_metadata_),
      -1);
  MVCCGetResponse_descriptor_ = file->message_type(10);
  static const int MVCCGetResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCGetResponse, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCGetResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCGetResponse, ts_),
  };
  MVCCGetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVCCGetResponse_descriptor_,
      MVCCGetResponse::default_instance_,
      MVCCGetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCGetResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVCCGetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCGetResponse, _internal_metadata_),
      -1);
  MVCCDeleteRequest_descriptor_ = file->message_type(11);
  static const int MVCCDeleteRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCDeleteRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCDeleteRequest, ts_),
  };
  MVCCDeleteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVCCDeleteRequest_descriptor_,
      MVCCDeleteRequest::default_instance_,
      MVCCDeleteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCDeleteRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVCCDeleteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCDeleteRequest, _internal_metadata_),
      -1);
  MVCCDeleteResponse_descriptor_ = file->message_type(12);
  static const int MVCCDeleteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCDeleteResponse, status_),
  };
  MVCCDeleteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVCCDeleteResponse_descriptor_,
      MVCCDeleteResponse::default_instance_,
      MVCCDeleteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCDeleteResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVCCDeleteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCDeleteResponse, _internal_metadata_),
      -1);
  StoreData_descriptor_ = file->message_type(13);
  static const int StoreData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreData, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreData, value_),
  };
  StoreData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StoreData_descriptor_,
      StoreData::default_instance_,
      StoreData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreData, _has_bits_[0]),
      -1,
      -1,
      sizeof(StoreData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreData, _internal_metadata_),
      -1);
  BatchStoreRequest_descriptor_ = file->message_type(14);
  static const int BatchStoreRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchStoreRequest, datas_),
  };
  BatchStoreRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchStoreRequest_descriptor_,
      BatchStoreRequest::default_instance_,
      BatchStoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchStoreRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(BatchStoreRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchStoreRequest, _internal_metadata_),
      -1);
  BatchStoreResponse_descriptor_ = file->message_type(15);
  static const int BatchStoreResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchStoreResponse, status_),
  };
  BatchStoreResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchStoreResponse_descriptor_,
      BatchStoreResponse::default_instance_,
      BatchStoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchStoreResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(BatchStoreResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchStoreResponse, _internal_metadata_),
      -1);
  MVCCScanRequest_descriptor_ = file->message_type(16);
  static const int MVCCScanRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCScanRequest, left_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCScanRequest, right_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCScanRequest, ts_),
  };
  MVCCScanRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVCCScanRequest_descriptor_,
      MVCCScanRequest::default_instance_,
      MVCCScanRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCScanRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVCCScanRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCScanRequest, _internal_metadata_),
      -1);
  MVCCScanResponse_descriptor_ = file->message_type(17);
  static const int MVCCScanResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCScanResponse, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCScanResponse, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCScanResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCScanResponse, ts_),
  };
  MVCCScanResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MVCCScanResponse_descriptor_,
      MVCCScanResponse::default_instance_,
      MVCCScanResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCScanResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(MVCCScanResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCScanResponse, _internal_metadata_),
      -1);
  StorageService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fstorage_2fstorage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StorageStatus_descriptor_, &StorageStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PutRequest_descriptor_, &PutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PutResponse_descriptor_, &PutResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRequest_descriptor_, &GetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetResponse_descriptor_, &GetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteRequest_descriptor_, &DeleteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteResponse_descriptor_, &DeleteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVCCPutRequest_descriptor_, &MVCCPutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVCCPutResponse_descriptor_, &MVCCPutResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVCCGetRequest_descriptor_, &MVCCGetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVCCGetResponse_descriptor_, &MVCCGetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVCCDeleteRequest_descriptor_, &MVCCDeleteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVCCDeleteResponse_descriptor_, &MVCCDeleteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StoreData_descriptor_, &StoreData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchStoreRequest_descriptor_, &BatchStoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchStoreResponse_descriptor_, &BatchStoreResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVCCScanRequest_descriptor_, &MVCCScanRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MVCCScanResponse_descriptor_, &MVCCScanResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2fstorage_2fstorage_2eproto() {
  delete StorageStatus::default_instance_;
  delete StorageStatus_reflection_;
  delete PutRequest::default_instance_;
  delete PutRequest_reflection_;
  delete PutResponse::default_instance_;
  delete PutResponse_reflection_;
  delete GetRequest::default_instance_;
  delete GetRequest_reflection_;
  delete GetResponse::default_instance_;
  delete GetResponse_reflection_;
  delete DeleteRequest::default_instance_;
  delete DeleteRequest_reflection_;
  delete DeleteResponse::default_instance_;
  delete DeleteResponse_reflection_;
  delete MVCCPutRequest::default_instance_;
  delete MVCCPutRequest_reflection_;
  delete MVCCPutResponse::default_instance_;
  delete MVCCPutResponse_reflection_;
  delete MVCCGetRequest::default_instance_;
  delete MVCCGetRequest_reflection_;
  delete MVCCGetResponse::default_instance_;
  delete MVCCGetResponse_reflection_;
  delete MVCCDeleteRequest::default_instance_;
  delete MVCCDeleteRequest_reflection_;
  delete MVCCDeleteResponse::default_instance_;
  delete MVCCDeleteResponse_reflection_;
  delete StoreData::default_instance_;
  delete StoreData_reflection_;
  delete BatchStoreRequest::default_instance_;
  delete BatchStoreRequest_reflection_;
  delete BatchStoreResponse::default_instance_;
  delete BatchStoreResponse_reflection_;
  delete MVCCScanRequest::default_instance_;
  delete MVCCScanRequest_reflection_;
  delete MVCCScanResponse::default_instance_;
  delete MVCCScanResponse_reflection_;
}

void protobuf_AddDesc_service_2fstorage_2fstorage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_service_2fstorage_2fstorage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::azino::protobuf_AddDesc_service_2fkv_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035service/storage/storage.proto\022\razino.s"
    "torage\032\020service/kv.proto\"\303\001\n\rStorageStat"
    "us\0229\n\nerror_code\030\001 \001(\0162!.azino.storage.S"
    "torageStatus.Code:\002Ok\022\025\n\rerror_message\030\002"
    " \001(\t\"`\n\004Code\022\006\n\002Ok\020\000\022\014\n\010NotFound\020\001\022\016\n\nCo"
    "rruption\020\002\022\020\n\014NotSupported\020\003\022\023\n\017InvalidA"
    "rgument\020\004\022\013\n\007IOError\020\005\"(\n\nPutRequest\022\013\n\003"
    "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\";\n\013PutResponse\022"
    ",\n\006status\030\001 \001(\0132\034.azino.storage.StorageS"
    "tatus\"\031\n\nGetRequest\022\013\n\003key\030\001 \001(\t\"J\n\013GetR"
    "esponse\022\r\n\005value\030\001 \001(\t\022,\n\006status\030\002 \001(\0132\034"
    ".azino.storage.StorageStatus\"\034\n\rDeleteRe"
    "quest\022\013\n\003key\030\001 \001(\t\">\n\016DeleteResponse\022,\n\006"
    "status\030\001 \001(\0132\034.azino.storage.StorageStat"
    "us\"8\n\016MVCCPutRequest\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
    "ue\030\002 \001(\t\022\n\n\002ts\030\003 \001(\004\"\?\n\017MVCCPutResponse\022"
    ",\n\006status\030\001 \001(\0132\034.azino.storage.StorageS"
    "tatus\")\n\016MVCCGetRequest\022\013\n\003key\030\001 \001(\t\022\n\n\002"
    "ts\030\002 \001(\004\"Z\n\017MVCCGetResponse\022\r\n\005value\030\001 \001"
    "(\t\022,\n\006status\030\002 \001(\0132\034.azino.storage.Stora"
    "geStatus\022\n\n\002ts\030\003 \001(\004\",\n\021MVCCDeleteReques"
    "t\022\013\n\003key\030\001 \001(\t\022\n\n\002ts\030\002 \001(\004\"B\n\022MVCCDelete"
    "Response\022,\n\006status\030\001 \001(\0132\034.azino.storage"
    ".StorageStatus\"A\n\tStoreData\022\013\n\003key\030\001 \001(\t"
    "\022\n\n\002ts\030\002 \001(\004\022\033\n\005value\030\003 \001(\0132\014.azino.Valu"
    "e\"<\n\021BatchStoreRequest\022\'\n\005datas\030\001 \003(\0132\030."
    "azino.storage.StoreData\"B\n\022BatchStoreRes"
    "ponse\022,\n\006status\030\001 \001(\0132\034.azino.storage.St"
    "orageStatus\"B\n\017MVCCScanRequest\022\020\n\010left_k"
    "ey\030\001 \001(\t\022\021\n\tright_key\030\002 \001(\t\022\n\n\002ts\030\003 \001(\004\""
    "h\n\020MVCCScanResponse\022\013\n\003key\030\001 \003(\t\022\r\n\005valu"
    "e\030\002 \003(\t\022,\n\006status\030\003 \001(\0132\034.azino.storage."
    "StorageStatus\022\n\n\002ts\030\004 \003(\0042\227\003\n\016StorageSer"
    "vice\022H\n\007MVCCPut\022\035.azino.storage.MVCCPutR"
    "equest\032\036.azino.storage.MVCCPutResponse\022H"
    "\n\007MVCCGet\022\035.azino.storage.MVCCGetRequest"
    "\032\036.azino.storage.MVCCGetResponse\022Q\n\nMVCC"
    "Delete\022 .azino.storage.MVCCDeleteRequest"
    "\032!.azino.storage.MVCCDeleteResponse\022K\n\010M"
    "VCCScan\022\036.azino.storage.MVCCScanRequest\032"
    "\037.azino.storage.MVCCScanResponse\022Q\n\nBatc"
    "hStore\022 .azino.storage.BatchStoreRequest"
    "\032!.azino.storage.BatchStoreResponseB\003\200\001\001", 1720);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/storage/storage.proto", &protobuf_RegisterTypes);
  StorageStatus::default_instance_ = new StorageStatus();
  PutRequest::default_instance_ = new PutRequest();
  PutResponse::default_instance_ = new PutResponse();
  GetRequest::default_instance_ = new GetRequest();
  GetResponse::default_instance_ = new GetResponse();
  DeleteRequest::default_instance_ = new DeleteRequest();
  DeleteResponse::default_instance_ = new DeleteResponse();
  MVCCPutRequest::default_instance_ = new MVCCPutRequest();
  MVCCPutResponse::default_instance_ = new MVCCPutResponse();
  MVCCGetRequest::default_instance_ = new MVCCGetRequest();
  MVCCGetResponse::default_instance_ = new MVCCGetResponse();
  MVCCDeleteRequest::default_instance_ = new MVCCDeleteRequest();
  MVCCDeleteResponse::default_instance_ = new MVCCDeleteResponse();
  StoreData::default_instance_ = new StoreData();
  BatchStoreRequest::default_instance_ = new BatchStoreRequest();
  BatchStoreResponse::default_instance_ = new BatchStoreResponse();
  MVCCScanRequest::default_instance_ = new MVCCScanRequest();
  MVCCScanResponse::default_instance_ = new MVCCScanResponse();
  StorageStatus::default_instance_->InitAsDefaultInstance();
  PutRequest::default_instance_->InitAsDefaultInstance();
  PutResponse::default_instance_->InitAsDefaultInstance();
  GetRequest::default_instance_->InitAsDefaultInstance();
  GetResponse::default_instance_->InitAsDefaultInstance();
  DeleteRequest::default_instance_->InitAsDefaultInstance();
  DeleteResponse::default_instance_->InitAsDefaultInstance();
  MVCCPutRequest::default_instance_->InitAsDefaultInstance();
  MVCCPutResponse::default_instance_->InitAsDefaultInstance();
  MVCCGetRequest::default_instance_->InitAsDefaultInstance();
  MVCCGetResponse::default_instance_->InitAsDefaultInstance();
  MVCCDeleteRequest::default_instance_->InitAsDefaultInstance();
  MVCCDeleteResponse::default_instance_->InitAsDefaultInstance();
  StoreData::default_instance_->InitAsDefaultInstance();
  BatchStoreRequest::default_instance_->InitAsDefaultInstance();
  BatchStoreResponse::default_instance_->InitAsDefaultInstance();
  MVCCScanRequest::default_instance_->InitAsDefaultInstance();
  MVCCScanResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fstorage_2fstorage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fstorage_2fstorage_2eproto {
  StaticDescriptorInitializer_service_2fstorage_2fstorage_2eproto() {
    protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  }
} static_descriptor_initializer_service_2fstorage_2fstorage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* StorageStatus_Code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageStatus_Code_descriptor_;
}
bool StorageStatus_Code_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StorageStatus_Code StorageStatus::Ok;
const StorageStatus_Code StorageStatus::NotFound;
const StorageStatus_Code StorageStatus::Corruption;
const StorageStatus_Code StorageStatus::NotSupported;
const StorageStatus_Code StorageStatus::InvalidArgument;
const StorageStatus_Code StorageStatus::IOError;
const StorageStatus_Code StorageStatus::Code_MIN;
const StorageStatus_Code StorageStatus::Code_MAX;
const int StorageStatus::Code_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageStatus::kErrorCodeFieldNumber;
const int StorageStatus::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageStatus::StorageStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.StorageStatus)
}

void StorageStatus::InitAsDefaultInstance() {
}

StorageStatus::StorageStatus(const StorageStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.StorageStatus)
}

void StorageStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageStatus::~StorageStatus() {
  // @@protoc_insertion_point(destructor:azino.storage.StorageStatus)
  SharedDtor();
}

void StorageStatus::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StorageStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageStatus_descriptor_;
}

const StorageStatus& StorageStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

StorageStatus* StorageStatus::default_instance_ = NULL;

StorageStatus* StorageStatus::New(::google::protobuf::Arena* arena) const {
  StorageStatus* n = new StorageStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.StorageStatus)
  if (_has_bits_[0 / 32] & 3u) {
    error_code_ = 0;
    if (has_error_message()) {
      error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StorageStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.StorageStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.storage.StorageStatus.Code error_code = 1 [default = Ok];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::azino::storage::StorageStatus_Code_IsValid(value)) {
            set_error_code(static_cast< ::azino::storage::StorageStatus_Code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (tag == 18) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.storage.StorageStatus.error_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.StorageStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.StorageStatus)
  return false;
#undef DO_
}

void StorageStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.StorageStatus)
  // optional .azino.storage.StorageStatus.Code error_code = 1 [default = Ok];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.StorageStatus.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.StorageStatus)
}

::google::protobuf::uint8* StorageStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.StorageStatus)
  // optional .azino.storage.StorageStatus.Code error_code = 1 [default = Ok];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional string error_message = 2;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.StorageStatus.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.StorageStatus)
  return target;
}

int StorageStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.StorageStatus)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .azino.storage.StorageStatus.Code error_code = 1 [default = Ok];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.StorageStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StorageStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.StorageStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.StorageStatus)
    MergeFrom(*source);
  }
}

void StorageStatus::MergeFrom(const StorageStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.StorageStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_error_message()) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StorageStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.StorageStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageStatus::CopyFrom(const StorageStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.StorageStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageStatus::IsInitialized() const {

  return true;
}

void StorageStatus::Swap(StorageStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageStatus::InternalSwap(StorageStatus* other) {
  std::swap(error_code_, other->error_code_);
  error_message_.Swap(&other->error_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorageStatus_descriptor_;
  metadata.reflection = StorageStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageStatus

// optional .azino.storage.StorageStatus.Code error_code = 1 [default = Ok];
bool StorageStatus::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StorageStatus::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
void StorageStatus::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void StorageStatus::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::azino::storage::StorageStatus_Code StorageStatus::error_code() const {
  // @@protoc_insertion_point(field_get:azino.storage.StorageStatus.error_code)
  return static_cast< ::azino::storage::StorageStatus_Code >(error_code_);
}
 void StorageStatus::set_error_code(::azino::storage::StorageStatus_Code value) {
  assert(::azino::storage::StorageStatus_Code_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:azino.storage.StorageStatus.error_code)
}

// optional string error_message = 2;
bool StorageStatus::has_error_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StorageStatus::set_has_error_message() {
  _has_bits_[0] |= 0x00000002u;
}
void StorageStatus::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void StorageStatus::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
 const ::std::string& StorageStatus::error_message() const {
  // @@protoc_insertion_point(field_get:azino.storage.StorageStatus.error_message)
  return error_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StorageStatus::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.storage.StorageStatus.error_message)
}
 void StorageStatus::set_error_message(const char* value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.storage.StorageStatus.error_message)
}
 void StorageStatus::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.storage.StorageStatus.error_message)
}
 ::std::string* StorageStatus::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:azino.storage.StorageStatus.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StorageStatus::release_error_message() {
  // @@protoc_insertion_point(field_release:azino.storage.StorageStatus.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StorageStatus::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:azino.storage.StorageStatus.error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutRequest::kKeyFieldNumber;
const int PutRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutRequest::PutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.PutRequest)
}

void PutRequest::InitAsDefaultInstance() {
}

PutRequest::PutRequest(const PutRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.PutRequest)
}

void PutRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:azino.storage.PutRequest)
  SharedDtor();
}

void PutRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutRequest_descriptor_;
}

const PutRequest& PutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

PutRequest* PutRequest::default_instance_ = NULL;

PutRequest* PutRequest::New(::google::protobuf::Arena* arena) const {
  PutRequest* n = new PutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.PutRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.PutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.storage.PutRequest.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.storage.PutRequest.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.PutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.PutRequest)
  return false;
#undef DO_
}

void PutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.PutRequest)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.PutRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.PutRequest.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.PutRequest)
}

::google::protobuf::uint8* PutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.PutRequest)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.PutRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.PutRequest.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.PutRequest)
  return target;
}

int PutRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.PutRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.PutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PutRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.PutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.PutRequest)
    MergeFrom(*source);
  }
}

void PutRequest::MergeFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.PutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRequest::CopyFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRequest::IsInitialized() const {

  return true;
}

void PutRequest::Swap(PutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutRequest::InternalSwap(PutRequest* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutRequest_descriptor_;
  metadata.reflection = PutRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutRequest

// optional string key = 1;
bool PutRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PutRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void PutRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void PutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:azino.storage.PutRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.storage.PutRequest.key)
}
 void PutRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.storage.PutRequest.key)
}
 void PutRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.storage.PutRequest.key)
}
 ::std::string* PutRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.storage.PutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:azino.storage.PutRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.storage.PutRequest.key)
}

// optional string value = 2;
bool PutRequest::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PutRequest::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void PutRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void PutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:azino.storage.PutRequest.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutRequest::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.storage.PutRequest.value)
}
 void PutRequest::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.storage.PutRequest.value)
}
 void PutRequest::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.storage.PutRequest.value)
}
 ::std::string* PutRequest::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:azino.storage.PutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:azino.storage.PutRequest.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:azino.storage.PutRequest.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutResponse::PutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.PutResponse)
}

void PutResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::azino::storage::StorageStatus*>(&::azino::storage::StorageStatus::default_instance());
}

PutResponse::PutResponse(const PutResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.PutResponse)
}

void PutResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutResponse::~PutResponse() {
  // @@protoc_insertion_point(destructor:azino.storage.PutResponse)
  SharedDtor();
}

void PutResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void PutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutResponse_descriptor_;
}

const PutResponse& PutResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

PutResponse* PutResponse::default_instance_ = NULL;

PutResponse* PutResponse::New(::google::protobuf::Arena* arena) const {
  PutResponse* n = new PutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.PutResponse)
  if (has_status()) {
    if (status_ != NULL) status_->::azino::storage::StorageStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.PutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.storage.StorageStatus status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.PutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.PutResponse)
  return false;
#undef DO_
}

void PutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.PutResponse)
  // optional .azino.storage.StorageStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.PutResponse)
}

::google::protobuf::uint8* PutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.PutResponse)
  // optional .azino.storage.StorageStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.PutResponse)
  return target;
}

int PutResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.PutResponse)
  int total_size = 0;

  // optional .azino.storage.StorageStatus status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.PutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PutResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.PutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.PutResponse)
    MergeFrom(*source);
  }
}

void PutResponse::MergeFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.PutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::azino::storage::StorageStatus::MergeFrom(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutResponse::CopyFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutResponse::IsInitialized() const {

  return true;
}

void PutResponse::Swap(PutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutResponse::InternalSwap(PutResponse* other) {
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutResponse_descriptor_;
  metadata.reflection = PutResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutResponse

// optional .azino.storage.StorageStatus status = 1;
bool PutResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PutResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void PutResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void PutResponse::clear_status() {
  if (status_ != NULL) status_->::azino::storage::StorageStatus::Clear();
  clear_has_status();
}
const ::azino::storage::StorageStatus& PutResponse::status() const {
  // @@protoc_insertion_point(field_get:azino.storage.PutResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::azino::storage::StorageStatus* PutResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::azino::storage::StorageStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.storage.PutResponse.status)
  return status_;
}
::azino::storage::StorageStatus* PutResponse::release_status() {
  // @@protoc_insertion_point(field_release:azino.storage.PutResponse.status)
  clear_has_status();
  ::azino::storage::StorageStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void PutResponse::set_allocated_status(::azino::storage::StorageStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.storage.PutResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRequest::GetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.GetRequest)
}

void GetRequest::InitAsDefaultInstance() {
}

GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.GetRequest)
}

void GetRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:azino.storage.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRequest_descriptor_;
}

const GetRequest& GetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

GetRequest* GetRequest::default_instance_ = NULL;

GetRequest* GetRequest::New(::google::protobuf::Arena* arena) const {
  GetRequest* n = new GetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.GetRequest)
  if (has_key()) {
    key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.GetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.storage.GetRequest.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.GetRequest)
  return false;
#undef DO_
}

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.GetRequest)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.GetRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.GetRequest)
}

::google::protobuf::uint8* GetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.GetRequest)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.GetRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.GetRequest)
  return target;
}

int GetRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.GetRequest)
  int total_size = 0;

  // optional string key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.GetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.GetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.GetRequest)
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.GetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {

  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRequest::InternalSwap(GetRequest* other) {
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRequest_descriptor_;
  metadata.reflection = GetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRequest

// optional string key = 1;
bool GetRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:azino.storage.GetRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.storage.GetRequest.key)
}
 void GetRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.storage.GetRequest.key)
}
 void GetRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.storage.GetRequest.key)
}
 ::std::string* GetRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.storage.GetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:azino.storage.GetRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.storage.GetRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetResponse::kValueFieldNumber;
const int GetResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetResponse::GetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.GetResponse)
}

void GetResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::azino::storage::StorageStatus*>(&::azino::storage::StorageStatus::default_instance());
}

GetResponse::GetResponse(const GetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.GetResponse)
}

void GetResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:azino.storage.GetResponse)
  SharedDtor();
}

void GetResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete status_;
  }
}

void GetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetResponse_descriptor_;
}

const GetResponse& GetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

GetResponse* GetResponse::default_instance_ = NULL;

GetResponse* GetResponse::New(::google::protobuf::Arena* arena) const {
  GetResponse* n = new GetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.GetResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_status()) {
      if (status_ != NULL) status_->::azino::storage::StorageStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.GetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.storage.GetResponse.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional .azino.storage.StorageStatus status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.GetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.GetResponse)
  return false;
#undef DO_
}

void GetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.GetResponse)
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.GetResponse.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // optional .azino.storage.StorageStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.GetResponse)
}

::google::protobuf::uint8* GetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.GetResponse)
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.GetResponse.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // optional .azino.storage.StorageStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->status_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.GetResponse)
  return target;
}

int GetResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.GetResponse)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional .azino.storage.StorageStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->status_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.GetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.GetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.GetResponse)
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.GetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_status()) {
      mutable_status()->::azino::storage::StorageStatus::MergeFrom(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {

  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetResponse::InternalSwap(GetResponse* other) {
  value_.Swap(&other->value_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetResponse_descriptor_;
  metadata.reflection = GetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetResponse

// optional string value = 1;
bool GetResponse::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetResponse::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void GetResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:azino.storage.GetResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetResponse::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.storage.GetResponse.value)
}
 void GetResponse::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.storage.GetResponse.value)
}
 void GetResponse::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.storage.GetResponse.value)
}
 ::std::string* GetResponse::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:azino.storage.GetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:azino.storage.GetResponse.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:azino.storage.GetResponse.value)
}

// optional .azino.storage.StorageStatus status = 2;
bool GetResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void GetResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetResponse::clear_status() {
  if (status_ != NULL) status_->::azino::storage::StorageStatus::Clear();
  clear_has_status();
}
const ::azino::storage::StorageStatus& GetResponse::status() const {
  // @@protoc_insertion_point(field_get:azino.storage.GetResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::azino::storage::StorageStatus* GetResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::azino::storage::StorageStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.storage.GetResponse.status)
  return status_;
}
::azino::storage::StorageStatus* GetResponse::release_status() {
  // @@protoc_insertion_point(field_release:azino.storage.GetResponse.status)
  clear_has_status();
  ::azino::storage::StorageStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void GetResponse::set_allocated_status(::azino::storage::StorageStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.storage.GetResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRequest::DeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.DeleteRequest)
}

void DeleteRequest::InitAsDefaultInstance() {
}

DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.DeleteRequest)
}

void DeleteRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:azino.storage.DeleteRequest)
  SharedDtor();
}

void DeleteRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRequest_descriptor_;
}

const DeleteRequest& DeleteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

DeleteRequest* DeleteRequest::default_instance_ = NULL;

DeleteRequest* DeleteRequest::New(::google::protobuf::Arena* arena) const {
  DeleteRequest* n = new DeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.DeleteRequest)
  if (has_key()) {
    key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.DeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.storage.DeleteRequest.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.DeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.DeleteRequest)
  return false;
#undef DO_
}

void DeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.DeleteRequest)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.DeleteRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.DeleteRequest)
}

::google::protobuf::uint8* DeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.DeleteRequest)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.DeleteRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.DeleteRequest)
  return target;
}

int DeleteRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.DeleteRequest)
  int total_size = 0;

  // optional string key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.DeleteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeleteRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.DeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.DeleteRequest)
    MergeFrom(*source);
  }
}

void DeleteRequest::MergeFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.DeleteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {

  return true;
}

void DeleteRequest::Swap(DeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRequest::InternalSwap(DeleteRequest* other) {
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRequest_descriptor_;
  metadata.reflection = DeleteRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteRequest

// optional string key = 1;
bool DeleteRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeleteRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void DeleteRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& DeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:azino.storage.DeleteRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.storage.DeleteRequest.key)
}
 void DeleteRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.storage.DeleteRequest.key)
}
 void DeleteRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.storage.DeleteRequest.key)
}
 ::std::string* DeleteRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.storage.DeleteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:azino.storage.DeleteRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.storage.DeleteRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteResponse::DeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.DeleteResponse)
}

void DeleteResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::azino::storage::StorageStatus*>(&::azino::storage::StorageStatus::default_instance());
}

DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.DeleteResponse)
}

void DeleteResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:azino.storage.DeleteResponse)
  SharedDtor();
}

void DeleteResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void DeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteResponse_descriptor_;
}

const DeleteResponse& DeleteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

DeleteResponse* DeleteResponse::default_instance_ = NULL;

DeleteResponse* DeleteResponse::New(::google::protobuf::Arena* arena) const {
  DeleteResponse* n = new DeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.DeleteResponse)
  if (has_status()) {
    if (status_ != NULL) status_->::azino::storage::StorageStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.DeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.storage.StorageStatus status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.DeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.DeleteResponse)
  return false;
#undef DO_
}

void DeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.DeleteResponse)
  // optional .azino.storage.StorageStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.DeleteResponse)
}

::google::protobuf::uint8* DeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.DeleteResponse)
  // optional .azino.storage.StorageStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.DeleteResponse)
  return target;
}

int DeleteResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.DeleteResponse)
  int total_size = 0;

  // optional .azino.storage.StorageStatus status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.DeleteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeleteResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.DeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.DeleteResponse)
    MergeFrom(*source);
  }
}

void DeleteResponse::MergeFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.DeleteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::azino::storage::StorageStatus::MergeFrom(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {

  return true;
}

void DeleteResponse::Swap(DeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteResponse::InternalSwap(DeleteResponse* other) {
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteResponse_descriptor_;
  metadata.reflection = DeleteResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteResponse

// optional .azino.storage.StorageStatus status = 1;
bool DeleteResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeleteResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void DeleteResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteResponse::clear_status() {
  if (status_ != NULL) status_->::azino::storage::StorageStatus::Clear();
  clear_has_status();
}
const ::azino::storage::StorageStatus& DeleteResponse::status() const {
  // @@protoc_insertion_point(field_get:azino.storage.DeleteResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::azino::storage::StorageStatus* DeleteResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::azino::storage::StorageStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.storage.DeleteResponse.status)
  return status_;
}
::azino::storage::StorageStatus* DeleteResponse::release_status() {
  // @@protoc_insertion_point(field_release:azino.storage.DeleteResponse.status)
  clear_has_status();
  ::azino::storage::StorageStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void DeleteResponse::set_allocated_status(::azino::storage::StorageStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.storage.DeleteResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVCCPutRequest::kKeyFieldNumber;
const int MVCCPutRequest::kValueFieldNumber;
const int MVCCPutRequest::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVCCPutRequest::MVCCPutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.MVCCPutRequest)
}

void MVCCPutRequest::InitAsDefaultInstance() {
}

MVCCPutRequest::MVCCPutRequest(const MVCCPutRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.MVCCPutRequest)
}

void MVCCPutRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVCCPutRequest::~MVCCPutRequest() {
  // @@protoc_insertion_point(destructor:azino.storage.MVCCPutRequest)
  SharedDtor();
}

void MVCCPutRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MVCCPutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVCCPutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVCCPutRequest_descriptor_;
}

const MVCCPutRequest& MVCCPutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

MVCCPutRequest* MVCCPutRequest::default_instance_ = NULL;

MVCCPutRequest* MVCCPutRequest::New(::google::protobuf::Arena* arena) const {
  MVCCPutRequest* n = new MVCCPutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVCCPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.MVCCPutRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ts_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVCCPutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.MVCCPutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.storage.MVCCPutRequest.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.storage.MVCCPutRequest.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ts;
        break;
      }

      // optional uint64 ts = 3;
      case 3: {
        if (tag == 24) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.MVCCPutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.MVCCPutRequest)
  return false;
#undef DO_
}

void MVCCPutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.MVCCPutRequest)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCPutRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCPutRequest.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional uint64 ts = 3;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.MVCCPutRequest)
}

::google::protobuf::uint8* MVCCPutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.MVCCPutRequest)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCPutRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCPutRequest.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional uint64 ts = 3;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.MVCCPutRequest)
  return target;
}

int MVCCPutRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.MVCCPutRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional uint64 ts = 3;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ts());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVCCPutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.MVCCPutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVCCPutRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVCCPutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.MVCCPutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.MVCCPutRequest)
    MergeFrom(*source);
  }
}

void MVCCPutRequest::MergeFrom(const MVCCPutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.MVCCPutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVCCPutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.MVCCPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVCCPutRequest::CopyFrom(const MVCCPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.MVCCPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVCCPutRequest::IsInitialized() const {

  return true;
}

void MVCCPutRequest::Swap(MVCCPutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVCCPutRequest::InternalSwap(MVCCPutRequest* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(ts_, other->ts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVCCPutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVCCPutRequest_descriptor_;
  metadata.reflection = MVCCPutRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVCCPutRequest

// optional string key = 1;
bool MVCCPutRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVCCPutRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void MVCCPutRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVCCPutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& MVCCPutRequest::key() const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCPutRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVCCPutRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.storage.MVCCPutRequest.key)
}
 void MVCCPutRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.storage.MVCCPutRequest.key)
}
 void MVCCPutRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.storage.MVCCPutRequest.key)
}
 ::std::string* MVCCPutRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.storage.MVCCPutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MVCCPutRequest::release_key() {
  // @@protoc_insertion_point(field_release:azino.storage.MVCCPutRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVCCPutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.storage.MVCCPutRequest.key)
}

// optional string value = 2;
bool MVCCPutRequest::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVCCPutRequest::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void MVCCPutRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVCCPutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& MVCCPutRequest::value() const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCPutRequest.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVCCPutRequest::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.storage.MVCCPutRequest.value)
}
 void MVCCPutRequest::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.storage.MVCCPutRequest.value)
}
 void MVCCPutRequest::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.storage.MVCCPutRequest.value)
}
 ::std::string* MVCCPutRequest::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:azino.storage.MVCCPutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MVCCPutRequest::release_value() {
  // @@protoc_insertion_point(field_release:azino.storage.MVCCPutRequest.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVCCPutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:azino.storage.MVCCPutRequest.value)
}

// optional uint64 ts = 3;
bool MVCCPutRequest::has_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MVCCPutRequest::set_has_ts() {
  _has_bits_[0] |= 0x00000004u;
}
void MVCCPutRequest::clear_has_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
void MVCCPutRequest::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
 ::google::protobuf::uint64 MVCCPutRequest::ts() const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCPutRequest.ts)
  return ts_;
}
 void MVCCPutRequest::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:azino.storage.MVCCPutRequest.ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVCCPutResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVCCPutResponse::MVCCPutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.MVCCPutResponse)
}

void MVCCPutResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::azino::storage::StorageStatus*>(&::azino::storage::StorageStatus::default_instance());
}

MVCCPutResponse::MVCCPutResponse(const MVCCPutResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.MVCCPutResponse)
}

void MVCCPutResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVCCPutResponse::~MVCCPutResponse() {
  // @@protoc_insertion_point(destructor:azino.storage.MVCCPutResponse)
  SharedDtor();
}

void MVCCPutResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void MVCCPutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVCCPutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVCCPutResponse_descriptor_;
}

const MVCCPutResponse& MVCCPutResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

MVCCPutResponse* MVCCPutResponse::default_instance_ = NULL;

MVCCPutResponse* MVCCPutResponse::New(::google::protobuf::Arena* arena) const {
  MVCCPutResponse* n = new MVCCPutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVCCPutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.MVCCPutResponse)
  if (has_status()) {
    if (status_ != NULL) status_->::azino::storage::StorageStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVCCPutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.MVCCPutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.storage.StorageStatus status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.MVCCPutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.MVCCPutResponse)
  return false;
#undef DO_
}

void MVCCPutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.MVCCPutResponse)
  // optional .azino.storage.StorageStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.MVCCPutResponse)
}

::google::protobuf::uint8* MVCCPutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.MVCCPutResponse)
  // optional .azino.storage.StorageStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.MVCCPutResponse)
  return target;
}

int MVCCPutResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.MVCCPutResponse)
  int total_size = 0;

  // optional .azino.storage.StorageStatus status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVCCPutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.MVCCPutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVCCPutResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVCCPutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.MVCCPutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.MVCCPutResponse)
    MergeFrom(*source);
  }
}

void MVCCPutResponse::MergeFrom(const MVCCPutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.MVCCPutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::azino::storage::StorageStatus::MergeFrom(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVCCPutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.MVCCPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVCCPutResponse::CopyFrom(const MVCCPutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.MVCCPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVCCPutResponse::IsInitialized() const {

  return true;
}

void MVCCPutResponse::Swap(MVCCPutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVCCPutResponse::InternalSwap(MVCCPutResponse* other) {
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVCCPutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVCCPutResponse_descriptor_;
  metadata.reflection = MVCCPutResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVCCPutResponse

// optional .azino.storage.StorageStatus status = 1;
bool MVCCPutResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVCCPutResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void MVCCPutResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVCCPutResponse::clear_status() {
  if (status_ != NULL) status_->::azino::storage::StorageStatus::Clear();
  clear_has_status();
}
const ::azino::storage::StorageStatus& MVCCPutResponse::status() const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCPutResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::azino::storage::StorageStatus* MVCCPutResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::azino::storage::StorageStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.storage.MVCCPutResponse.status)
  return status_;
}
::azino::storage::StorageStatus* MVCCPutResponse::release_status() {
  // @@protoc_insertion_point(field_release:azino.storage.MVCCPutResponse.status)
  clear_has_status();
  ::azino::storage::StorageStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void MVCCPutResponse::set_allocated_status(::azino::storage::StorageStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.storage.MVCCPutResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVCCGetRequest::kKeyFieldNumber;
const int MVCCGetRequest::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVCCGetRequest::MVCCGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.MVCCGetRequest)
}

void MVCCGetRequest::InitAsDefaultInstance() {
}

MVCCGetRequest::MVCCGetRequest(const MVCCGetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.MVCCGetRequest)
}

void MVCCGetRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVCCGetRequest::~MVCCGetRequest() {
  // @@protoc_insertion_point(destructor:azino.storage.MVCCGetRequest)
  SharedDtor();
}

void MVCCGetRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MVCCGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVCCGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVCCGetRequest_descriptor_;
}

const MVCCGetRequest& MVCCGetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

MVCCGetRequest* MVCCGetRequest::default_instance_ = NULL;

MVCCGetRequest* MVCCGetRequest::New(::google::protobuf::Arena* arena) const {
  MVCCGetRequest* n = new MVCCGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVCCGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.MVCCGetRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ts_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVCCGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.MVCCGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.storage.MVCCGetRequest.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }

      // optional uint64 ts = 2;
      case 2: {
        if (tag == 16) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.MVCCGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.MVCCGetRequest)
  return false;
#undef DO_
}

void MVCCGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.MVCCGetRequest)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCGetRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint64 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.MVCCGetRequest)
}

::google::protobuf::uint8* MVCCGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.MVCCGetRequest)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCGetRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint64 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.MVCCGetRequest)
  return target;
}

int MVCCGetRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.MVCCGetRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional uint64 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ts());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVCCGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.MVCCGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVCCGetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVCCGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.MVCCGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.MVCCGetRequest)
    MergeFrom(*source);
  }
}

void MVCCGetRequest::MergeFrom(const MVCCGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.MVCCGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVCCGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.MVCCGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVCCGetRequest::CopyFrom(const MVCCGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.MVCCGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVCCGetRequest::IsInitialized() const {

  return true;
}

void MVCCGetRequest::Swap(MVCCGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVCCGetRequest::InternalSwap(MVCCGetRequest* other) {
  key_.Swap(&other->key_);
  std::swap(ts_, other->ts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVCCGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVCCGetRequest_descriptor_;
  metadata.reflection = MVCCGetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVCCGetRequest

// optional string key = 1;
bool MVCCGetRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVCCGetRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void MVCCGetRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVCCGetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& MVCCGetRequest::key() const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCGetRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVCCGetRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.storage.MVCCGetRequest.key)
}
 void MVCCGetRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.storage.MVCCGetRequest.key)
}
 void MVCCGetRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.storage.MVCCGetRequest.key)
}
 ::std::string* MVCCGetRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.storage.MVCCGetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MVCCGetRequest::release_key() {
  // @@protoc_insertion_point(field_release:azino.storage.MVCCGetRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVCCGetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.storage.MVCCGetRequest.key)
}

// optional uint64 ts = 2;
bool MVCCGetRequest::has_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVCCGetRequest::set_has_ts() {
  _has_bits_[0] |= 0x00000002u;
}
void MVCCGetRequest::clear_has_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVCCGetRequest::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
 ::google::protobuf::uint64 MVCCGetRequest::ts() const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCGetRequest.ts)
  return ts_;
}
 void MVCCGetRequest::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:azino.storage.MVCCGetRequest.ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVCCGetResponse::kValueFieldNumber;
const int MVCCGetResponse::kStatusFieldNumber;
const int MVCCGetResponse::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVCCGetResponse::MVCCGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.MVCCGetResponse)
}

void MVCCGetResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::azino::storage::StorageStatus*>(&::azino::storage::StorageStatus::default_instance());
}

MVCCGetResponse::MVCCGetResponse(const MVCCGetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.MVCCGetResponse)
}

void MVCCGetResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = NULL;
  ts_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVCCGetResponse::~MVCCGetResponse() {
  // @@protoc_insertion_point(destructor:azino.storage.MVCCGetResponse)
  SharedDtor();
}

void MVCCGetResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete status_;
  }
}

void MVCCGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVCCGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVCCGetResponse_descriptor_;
}

const MVCCGetResponse& MVCCGetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

MVCCGetResponse* MVCCGetResponse::default_instance_ = NULL;

MVCCGetResponse* MVCCGetResponse::New(::google::protobuf::Arena* arena) const {
  MVCCGetResponse* n = new MVCCGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVCCGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.MVCCGetResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_status()) {
      if (status_ != NULL) status_->::azino::storage::StorageStatus::Clear();
    }
    ts_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVCCGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.MVCCGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.storage.MVCCGetResponse.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional .azino.storage.StorageStatus status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ts;
        break;
      }

      // optional uint64 ts = 3;
      case 3: {
        if (tag == 24) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.MVCCGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.MVCCGetResponse)
  return false;
#undef DO_
}

void MVCCGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.MVCCGetResponse)
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCGetResponse.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // optional .azino.storage.StorageStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->status_, output);
  }

  // optional uint64 ts = 3;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.MVCCGetResponse)
}

::google::protobuf::uint8* MVCCGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.MVCCGetResponse)
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCGetResponse.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // optional .azino.storage.StorageStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->status_, false, target);
  }

  // optional uint64 ts = 3;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.MVCCGetResponse)
  return target;
}

int MVCCGetResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.MVCCGetResponse)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional .azino.storage.StorageStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->status_);
    }

    // optional uint64 ts = 3;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ts());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVCCGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.MVCCGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVCCGetResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVCCGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.MVCCGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.MVCCGetResponse)
    MergeFrom(*source);
  }
}

void MVCCGetResponse::MergeFrom(const MVCCGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.MVCCGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_status()) {
      mutable_status()->::azino::storage::StorageStatus::MergeFrom(from.status());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVCCGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.MVCCGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVCCGetResponse::CopyFrom(const MVCCGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.MVCCGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVCCGetResponse::IsInitialized() const {

  return true;
}

void MVCCGetResponse::Swap(MVCCGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVCCGetResponse::InternalSwap(MVCCGetResponse* other) {
  value_.Swap(&other->value_);
  std::swap(status_, other->status_);
  std::swap(ts_, other->ts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVCCGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVCCGetResponse_descriptor_;
  metadata.reflection = MVCCGetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVCCGetResponse

// optional string value = 1;
bool MVCCGetResponse::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVCCGetResponse::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void MVCCGetResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVCCGetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& MVCCGetResponse::value() const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCGetResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVCCGetResponse::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.storage.MVCCGetResponse.value)
}
 void MVCCGetResponse::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.storage.MVCCGetResponse.value)
}
 void MVCCGetResponse::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.storage.MVCCGetResponse.value)
}
 ::std::string* MVCCGetResponse::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:azino.storage.MVCCGetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MVCCGetResponse::release_value() {
  // @@protoc_insertion_point(field_release:azino.storage.MVCCGetResponse.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVCCGetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:azino.storage.MVCCGetResponse.value)
}

// optional .azino.storage.StorageStatus status = 2;
bool MVCCGetResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVCCGetResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void MVCCGetResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVCCGetResponse::clear_status() {
  if (status_ != NULL) status_->::azino::storage::StorageStatus::Clear();
  clear_has_status();
}
const ::azino::storage::StorageStatus& MVCCGetResponse::status() const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCGetResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::azino::storage::StorageStatus* MVCCGetResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::azino::storage::StorageStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.storage.MVCCGetResponse.status)
  return status_;
}
::azino::storage::StorageStatus* MVCCGetResponse::release_status() {
  // @@protoc_insertion_point(field_release:azino.storage.MVCCGetResponse.status)
  clear_has_status();
  ::azino::storage::StorageStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void MVCCGetResponse::set_allocated_status(::azino::storage::StorageStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.storage.MVCCGetResponse.status)
}

// optional uint64 ts = 3;
bool MVCCGetResponse::has_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MVCCGetResponse::set_has_ts() {
  _has_bits_[0] |= 0x00000004u;
}
void MVCCGetResponse::clear_has_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
void MVCCGetResponse::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
 ::google::protobuf::uint64 MVCCGetResponse::ts() const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCGetResponse.ts)
  return ts_;
}
 void MVCCGetResponse::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:azino.storage.MVCCGetResponse.ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVCCDeleteRequest::kKeyFieldNumber;
const int MVCCDeleteRequest::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVCCDeleteRequest::MVCCDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.MVCCDeleteRequest)
}

void MVCCDeleteRequest::InitAsDefaultInstance() {
}

MVCCDeleteRequest::MVCCDeleteRequest(const MVCCDeleteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.MVCCDeleteRequest)
}

void MVCCDeleteRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVCCDeleteRequest::~MVCCDeleteRequest() {
  // @@protoc_insertion_point(destructor:azino.storage.MVCCDeleteRequest)
  SharedDtor();
}

void MVCCDeleteRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MVCCDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVCCDeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVCCDeleteRequest_descriptor_;
}

const MVCCDeleteRequest& MVCCDeleteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

MVCCDeleteRequest* MVCCDeleteRequest::default_instance_ = NULL;

MVCCDeleteRequest* MVCCDeleteRequest::New(::google::protobuf::Arena* arena) const {
  MVCCDeleteRequest* n = new MVCCDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVCCDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.MVCCDeleteRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ts_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVCCDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.MVCCDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.storage.MVCCDeleteRequest.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }

      // optional uint64 ts = 2;
      case 2: {
        if (tag == 16) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.MVCCDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.MVCCDeleteRequest)
  return false;
#undef DO_
}

void MVCCDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.MVCCDeleteRequest)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCDeleteRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint64 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.MVCCDeleteRequest)
}

::google::protobuf::uint8* MVCCDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.MVCCDeleteRequest)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCDeleteRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint64 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.MVCCDeleteRequest)
  return target;
}

int MVCCDeleteRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.MVCCDeleteRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional uint64 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ts());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVCCDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.MVCCDeleteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVCCDeleteRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVCCDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.MVCCDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.MVCCDeleteRequest)
    MergeFrom(*source);
  }
}

void MVCCDeleteRequest::MergeFrom(const MVCCDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.MVCCDeleteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVCCDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.MVCCDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVCCDeleteRequest::CopyFrom(const MVCCDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.MVCCDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVCCDeleteRequest::IsInitialized() const {

  return true;
}

void MVCCDeleteRequest::Swap(MVCCDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVCCDeleteRequest::InternalSwap(MVCCDeleteRequest* other) {
  key_.Swap(&other->key_);
  std::swap(ts_, other->ts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVCCDeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVCCDeleteRequest_descriptor_;
  metadata.reflection = MVCCDeleteRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVCCDeleteRequest

// optional string key = 1;
bool MVCCDeleteRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVCCDeleteRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void MVCCDeleteRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVCCDeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& MVCCDeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCDeleteRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVCCDeleteRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.storage.MVCCDeleteRequest.key)
}
 void MVCCDeleteRequest::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.storage.MVCCDeleteRequest.key)
}
 void MVCCDeleteRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.storage.MVCCDeleteRequest.key)
}
 ::std::string* MVCCDeleteRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.storage.MVCCDeleteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MVCCDeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:azino.storage.MVCCDeleteRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVCCDeleteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.storage.MVCCDeleteRequest.key)
}

// optional uint64 ts = 2;
bool MVCCDeleteRequest::has_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVCCDeleteRequest::set_has_ts() {
  _has_bits_[0] |= 0x00000002u;
}
void MVCCDeleteRequest::clear_has_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVCCDeleteRequest::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
 ::google::protobuf::uint64 MVCCDeleteRequest::ts() const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCDeleteRequest.ts)
  return ts_;
}
 void MVCCDeleteRequest::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:azino.storage.MVCCDeleteRequest.ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVCCDeleteResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVCCDeleteResponse::MVCCDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.MVCCDeleteResponse)
}

void MVCCDeleteResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::azino::storage::StorageStatus*>(&::azino::storage::StorageStatus::default_instance());
}

MVCCDeleteResponse::MVCCDeleteResponse(const MVCCDeleteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.MVCCDeleteResponse)
}

void MVCCDeleteResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVCCDeleteResponse::~MVCCDeleteResponse() {
  // @@protoc_insertion_point(destructor:azino.storage.MVCCDeleteResponse)
  SharedDtor();
}

void MVCCDeleteResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void MVCCDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVCCDeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVCCDeleteResponse_descriptor_;
}

const MVCCDeleteResponse& MVCCDeleteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

MVCCDeleteResponse* MVCCDeleteResponse::default_instance_ = NULL;

MVCCDeleteResponse* MVCCDeleteResponse::New(::google::protobuf::Arena* arena) const {
  MVCCDeleteResponse* n = new MVCCDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVCCDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.MVCCDeleteResponse)
  if (has_status()) {
    if (status_ != NULL) status_->::azino::storage::StorageStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVCCDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.MVCCDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.storage.StorageStatus status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.MVCCDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.MVCCDeleteResponse)
  return false;
#undef DO_
}

void MVCCDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.MVCCDeleteResponse)
  // optional .azino.storage.StorageStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.MVCCDeleteResponse)
}

::google::protobuf::uint8* MVCCDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.MVCCDeleteResponse)
  // optional .azino.storage.StorageStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.MVCCDeleteResponse)
  return target;
}

int MVCCDeleteResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.MVCCDeleteResponse)
  int total_size = 0;

  // optional .azino.storage.StorageStatus status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVCCDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.MVCCDeleteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVCCDeleteResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVCCDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.MVCCDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.MVCCDeleteResponse)
    MergeFrom(*source);
  }
}

void MVCCDeleteResponse::MergeFrom(const MVCCDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.MVCCDeleteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::azino::storage::StorageStatus::MergeFrom(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVCCDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.MVCCDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVCCDeleteResponse::CopyFrom(const MVCCDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.MVCCDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVCCDeleteResponse::IsInitialized() const {

  return true;
}

void MVCCDeleteResponse::Swap(MVCCDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVCCDeleteResponse::InternalSwap(MVCCDeleteResponse* other) {
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVCCDeleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVCCDeleteResponse_descriptor_;
  metadata.reflection = MVCCDeleteResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVCCDeleteResponse

// optional .azino.storage.StorageStatus status = 1;
bool MVCCDeleteResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVCCDeleteResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void MVCCDeleteResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVCCDeleteResponse::clear_status() {
  if (status_ != NULL) status_->::azino::storage::StorageStatus::Clear();
  clear_has_status();
}
const ::azino::storage::StorageStatus& MVCCDeleteResponse::status() const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCDeleteResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::azino::storage::StorageStatus* MVCCDeleteResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::azino::storage::StorageStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.storage.MVCCDeleteResponse.status)
  return status_;
}
::azino::storage::StorageStatus* MVCCDeleteResponse::release_status() {
  // @@protoc_insertion_point(field_release:azino.storage.MVCCDeleteResponse.status)
  clear_has_status();
  ::azino::storage::StorageStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void MVCCDeleteResponse::set_allocated_status(::azino::storage::StorageStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.storage.MVCCDeleteResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreData::kKeyFieldNumber;
const int StoreData::kTsFieldNumber;
const int StoreData::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreData::StoreData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.StoreData)
}

void StoreData::InitAsDefaultInstance() {
  value_ = const_cast< ::azino::Value*>(&::azino::Value::default_instance());
}

StoreData::StoreData(const StoreData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.StoreData)
}

void StoreData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_ = GOOGLE_ULONGLONG(0);
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreData::~StoreData() {
  // @@protoc_insertion_point(destructor:azino.storage.StoreData)
  SharedDtor();
}

void StoreData::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete value_;
  }
}

void StoreData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreData_descriptor_;
}

const StoreData& StoreData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

StoreData* StoreData::default_instance_ = NULL;

StoreData* StoreData::New(::google::protobuf::Arena* arena) const {
  StoreData* n = new StoreData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreData::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.StoreData)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ts_ = GOOGLE_ULONGLONG(0);
    if (has_value()) {
      if (value_ != NULL) value_->::azino::Value::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StoreData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.StoreData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.storage.StoreData.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }

      // optional uint64 ts = 2;
      case 2: {
        if (tag == 16) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional .azino.Value value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.StoreData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.StoreData)
  return false;
#undef DO_
}

void StoreData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.StoreData)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.StoreData.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint64 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ts(), output);
  }

  // optional .azino.Value value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.StoreData)
}

::google::protobuf::uint8* StoreData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.StoreData)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.StoreData.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint64 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ts(), target);
  }

  // optional .azino.Value value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.StoreData)
  return target;
}

int StoreData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.StoreData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional uint64 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ts());
    }

    // optional .azino.Value value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->value_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.StoreData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StoreData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.StoreData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.StoreData)
    MergeFrom(*source);
  }
}

void StoreData::MergeFrom(const StoreData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.StoreData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_value()) {
      mutable_value()->::azino::Value::MergeFrom(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StoreData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.StoreData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreData::CopyFrom(const StoreData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.StoreData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreData::IsInitialized() const {

  return true;
}

void StoreData::Swap(StoreData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreData::InternalSwap(StoreData* other) {
  key_.Swap(&other->key_);
  std::swap(ts_, other->ts_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreData_descriptor_;
  metadata.reflection = StoreData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreData

// optional string key = 1;
bool StoreData::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StoreData::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void StoreData::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void StoreData::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& StoreData::key() const {
  // @@protoc_insertion_point(field_get:azino.storage.StoreData.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StoreData::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.storage.StoreData.key)
}
 void StoreData::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.storage.StoreData.key)
}
 void StoreData::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.storage.StoreData.key)
}
 ::std::string* StoreData::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:azino.storage.StoreData.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StoreData::release_key() {
  // @@protoc_insertion_point(field_release:azino.storage.StoreData.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StoreData::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:azino.storage.StoreData.key)
}

// optional uint64 ts = 2;
bool StoreData::has_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StoreData::set_has_ts() {
  _has_bits_[0] |= 0x00000002u;
}
void StoreData::clear_has_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
void StoreData::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
 ::google::protobuf::uint64 StoreData::ts() const {
  // @@protoc_insertion_point(field_get:azino.storage.StoreData.ts)
  return ts_;
}
 void StoreData::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:azino.storage.StoreData.ts)
}

// optional .azino.Value value = 3;
bool StoreData::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StoreData::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void StoreData::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void StoreData::clear_value() {
  if (value_ != NULL) value_->::azino::Value::Clear();
  clear_has_value();
}
const ::azino::Value& StoreData::value() const {
  // @@protoc_insertion_point(field_get:azino.storage.StoreData.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::azino::Value* StoreData::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::azino::Value;
  }
  // @@protoc_insertion_point(field_mutable:azino.storage.StoreData.value)
  return value_;
}
::azino::Value* StoreData::release_value() {
  // @@protoc_insertion_point(field_release:azino.storage.StoreData.value)
  clear_has_value();
  ::azino::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void StoreData::set_allocated_value(::azino::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.storage.StoreData.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchStoreRequest::kDatasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchStoreRequest::BatchStoreRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.BatchStoreRequest)
}

void BatchStoreRequest::InitAsDefaultInstance() {
}

BatchStoreRequest::BatchStoreRequest(const BatchStoreRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.BatchStoreRequest)
}

void BatchStoreRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchStoreRequest::~BatchStoreRequest() {
  // @@protoc_insertion_point(destructor:azino.storage.BatchStoreRequest)
  SharedDtor();
}

void BatchStoreRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatchStoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchStoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchStoreRequest_descriptor_;
}

const BatchStoreRequest& BatchStoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

BatchStoreRequest* BatchStoreRequest::default_instance_ = NULL;

BatchStoreRequest* BatchStoreRequest::New(::google::protobuf::Arena* arena) const {
  BatchStoreRequest* n = new BatchStoreRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchStoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.BatchStoreRequest)
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BatchStoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.BatchStoreRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .azino.storage.StoreData datas = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_datas;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.BatchStoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.BatchStoreRequest)
  return false;
#undef DO_
}

void BatchStoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.BatchStoreRequest)
  // repeated .azino.storage.StoreData datas = 1;
  for (unsigned int i = 0, n = this->datas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.BatchStoreRequest)
}

::google::protobuf::uint8* BatchStoreRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.BatchStoreRequest)
  // repeated .azino.storage.StoreData datas = 1;
  for (unsigned int i = 0, n = this->datas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->datas(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.BatchStoreRequest)
  return target;
}

int BatchStoreRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.BatchStoreRequest)
  int total_size = 0;

  // repeated .azino.storage.StoreData datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchStoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.BatchStoreRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BatchStoreRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchStoreRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.BatchStoreRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.BatchStoreRequest)
    MergeFrom(*source);
  }
}

void BatchStoreRequest::MergeFrom(const BatchStoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.BatchStoreRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  datas_.MergeFrom(from.datas_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BatchStoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.BatchStoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchStoreRequest::CopyFrom(const BatchStoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.BatchStoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchStoreRequest::IsInitialized() const {

  return true;
}

void BatchStoreRequest::Swap(BatchStoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchStoreRequest::InternalSwap(BatchStoreRequest* other) {
  datas_.UnsafeArenaSwap(&other->datas_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchStoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchStoreRequest_descriptor_;
  metadata.reflection = BatchStoreRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchStoreRequest

// repeated .azino.storage.StoreData datas = 1;
int BatchStoreRequest::datas_size() const {
  return datas_.size();
}
void BatchStoreRequest::clear_datas() {
  datas_.Clear();
}
const ::azino::storage::StoreData& BatchStoreRequest::datas(int index) const {
  // @@protoc_insertion_point(field_get:azino.storage.BatchStoreRequest.datas)
  return datas_.Get(index);
}
::azino::storage::StoreData* BatchStoreRequest::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:azino.storage.BatchStoreRequest.datas)
  return datas_.Mutable(index);
}
::azino::storage::StoreData* BatchStoreRequest::add_datas() {
  // @@protoc_insertion_point(field_add:azino.storage.BatchStoreRequest.datas)
  return datas_.Add();
}
::google::protobuf::RepeatedPtrField< ::azino::storage::StoreData >*
BatchStoreRequest::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:azino.storage.BatchStoreRequest.datas)
  return &datas_;
}
const ::google::protobuf::RepeatedPtrField< ::azino::storage::StoreData >&
BatchStoreRequest::datas() const {
  // @@protoc_insertion_point(field_list:azino.storage.BatchStoreRequest.datas)
  return datas_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchStoreResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchStoreResponse::BatchStoreResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.BatchStoreResponse)
}

void BatchStoreResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::azino::storage::StorageStatus*>(&::azino::storage::StorageStatus::default_instance());
}

BatchStoreResponse::BatchStoreResponse(const BatchStoreResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.BatchStoreResponse)
}

void BatchStoreResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchStoreResponse::~BatchStoreResponse() {
  // @@protoc_insertion_point(destructor:azino.storage.BatchStoreResponse)
  SharedDtor();
}

void BatchStoreResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void BatchStoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchStoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchStoreResponse_descriptor_;
}

const BatchStoreResponse& BatchStoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

BatchStoreResponse* BatchStoreResponse::default_instance_ = NULL;

BatchStoreResponse* BatchStoreResponse::New(::google::protobuf::Arena* arena) const {
  BatchStoreResponse* n = new BatchStoreResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchStoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.BatchStoreResponse)
  if (has_status()) {
    if (status_ != NULL) status_->::azino::storage::StorageStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BatchStoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.BatchStoreResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .azino.storage.StorageStatus status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.BatchStoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.BatchStoreResponse)
  return false;
#undef DO_
}

void BatchStoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.BatchStoreResponse)
  // optional .azino.storage.StorageStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.BatchStoreResponse)
}

::google::protobuf::uint8* BatchStoreResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.BatchStoreResponse)
  // optional .azino.storage.StorageStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.BatchStoreResponse)
  return target;
}

int BatchStoreResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.BatchStoreResponse)
  int total_size = 0;

  // optional .azino.storage.StorageStatus status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchStoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.BatchStoreResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BatchStoreResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchStoreResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.BatchStoreResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.BatchStoreResponse)
    MergeFrom(*source);
  }
}

void BatchStoreResponse::MergeFrom(const BatchStoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.BatchStoreResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::azino::storage::StorageStatus::MergeFrom(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BatchStoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.BatchStoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchStoreResponse::CopyFrom(const BatchStoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.BatchStoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchStoreResponse::IsInitialized() const {

  return true;
}

void BatchStoreResponse::Swap(BatchStoreResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchStoreResponse::InternalSwap(BatchStoreResponse* other) {
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchStoreResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchStoreResponse_descriptor_;
  metadata.reflection = BatchStoreResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchStoreResponse

// optional .azino.storage.StorageStatus status = 1;
bool BatchStoreResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchStoreResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchStoreResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchStoreResponse::clear_status() {
  if (status_ != NULL) status_->::azino::storage::StorageStatus::Clear();
  clear_has_status();
}
const ::azino::storage::StorageStatus& BatchStoreResponse::status() const {
  // @@protoc_insertion_point(field_get:azino.storage.BatchStoreResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::azino::storage::StorageStatus* BatchStoreResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::azino::storage::StorageStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.storage.BatchStoreResponse.status)
  return status_;
}
::azino::storage::StorageStatus* BatchStoreResponse::release_status() {
  // @@protoc_insertion_point(field_release:azino.storage.BatchStoreResponse.status)
  clear_has_status();
  ::azino::storage::StorageStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void BatchStoreResponse::set_allocated_status(::azino::storage::StorageStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.storage.BatchStoreResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVCCScanRequest::kLeftKeyFieldNumber;
const int MVCCScanRequest::kRightKeyFieldNumber;
const int MVCCScanRequest::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVCCScanRequest::MVCCScanRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.MVCCScanRequest)
}

void MVCCScanRequest::InitAsDefaultInstance() {
}

MVCCScanRequest::MVCCScanRequest(const MVCCScanRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.MVCCScanRequest)
}

void MVCCScanRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  left_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVCCScanRequest::~MVCCScanRequest() {
  // @@protoc_insertion_point(destructor:azino.storage.MVCCScanRequest)
  SharedDtor();
}

void MVCCScanRequest::SharedDtor() {
  left_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MVCCScanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVCCScanRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVCCScanRequest_descriptor_;
}

const MVCCScanRequest& MVCCScanRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

MVCCScanRequest* MVCCScanRequest::default_instance_ = NULL;

MVCCScanRequest* MVCCScanRequest::New(::google::protobuf::Arena* arena) const {
  MVCCScanRequest* n = new MVCCScanRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVCCScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.MVCCScanRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_left_key()) {
      left_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_right_key()) {
      right_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ts_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVCCScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.MVCCScanRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string left_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_left_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->left_key().data(), this->left_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.storage.MVCCScanRequest.left_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_right_key;
        break;
      }

      // optional string right_key = 2;
      case 2: {
        if (tag == 18) {
         parse_right_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_right_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->right_key().data(), this->right_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.storage.MVCCScanRequest.right_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ts;
        break;
      }

      // optional uint64 ts = 3;
      case 3: {
        if (tag == 24) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.MVCCScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.MVCCScanRequest)
  return false;
#undef DO_
}

void MVCCScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.MVCCScanRequest)
  // optional string left_key = 1;
  if (has_left_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->left_key().data(), this->left_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCScanRequest.left_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->left_key(), output);
  }

  // optional string right_key = 2;
  if (has_right_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->right_key().data(), this->right_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCScanRequest.right_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->right_key(), output);
  }

  // optional uint64 ts = 3;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.MVCCScanRequest)
}

::google::protobuf::uint8* MVCCScanRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.MVCCScanRequest)
  // optional string left_key = 1;
  if (has_left_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->left_key().data(), this->left_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCScanRequest.left_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->left_key(), target);
  }

  // optional string right_key = 2;
  if (has_right_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->right_key().data(), this->right_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCScanRequest.right_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->right_key(), target);
  }

  // optional uint64 ts = 3;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.MVCCScanRequest)
  return target;
}

int MVCCScanRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.MVCCScanRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string left_key = 1;
    if (has_left_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->left_key());
    }

    // optional string right_key = 2;
    if (has_right_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->right_key());
    }

    // optional uint64 ts = 3;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ts());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVCCScanRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.MVCCScanRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVCCScanRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVCCScanRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.MVCCScanRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.MVCCScanRequest)
    MergeFrom(*source);
  }
}

void MVCCScanRequest::MergeFrom(const MVCCScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.MVCCScanRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_key()) {
      set_has_left_key();
      left_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.left_key_);
    }
    if (from.has_right_key()) {
      set_has_right_key();
      right_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_key_);
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVCCScanRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.MVCCScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVCCScanRequest::CopyFrom(const MVCCScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.MVCCScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVCCScanRequest::IsInitialized() const {

  return true;
}

void MVCCScanRequest::Swap(MVCCScanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVCCScanRequest::InternalSwap(MVCCScanRequest* other) {
  left_key_.Swap(&other->left_key_);
  right_key_.Swap(&other->right_key_);
  std::swap(ts_, other->ts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVCCScanRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVCCScanRequest_descriptor_;
  metadata.reflection = MVCCScanRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVCCScanRequest

// optional string left_key = 1;
bool MVCCScanRequest::has_left_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVCCScanRequest::set_has_left_key() {
  _has_bits_[0] |= 0x00000001u;
}
void MVCCScanRequest::clear_has_left_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVCCScanRequest::clear_left_key() {
  left_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_left_key();
}
 const ::std::string& MVCCScanRequest::left_key() const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCScanRequest.left_key)
  return left_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVCCScanRequest::set_left_key(const ::std::string& value) {
  set_has_left_key();
  left_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.storage.MVCCScanRequest.left_key)
}
 void MVCCScanRequest::set_left_key(const char* value) {
  set_has_left_key();
  left_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.storage.MVCCScanRequest.left_key)
}
 void MVCCScanRequest::set_left_key(const char* value, size_t size) {
  set_has_left_key();
  left_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.storage.MVCCScanRequest.left_key)
}
 ::std::string* MVCCScanRequest::mutable_left_key() {
  set_has_left_key();
  // @@protoc_insertion_point(field_mutable:azino.storage.MVCCScanRequest.left_key)
  return left_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MVCCScanRequest::release_left_key() {
  // @@protoc_insertion_point(field_release:azino.storage.MVCCScanRequest.left_key)
  clear_has_left_key();
  return left_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVCCScanRequest::set_allocated_left_key(::std::string* left_key) {
  if (left_key != NULL) {
    set_has_left_key();
  } else {
    clear_has_left_key();
  }
  left_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), left_key);
  // @@protoc_insertion_point(field_set_allocated:azino.storage.MVCCScanRequest.left_key)
}

// optional string right_key = 2;
bool MVCCScanRequest::has_right_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVCCScanRequest::set_has_right_key() {
  _has_bits_[0] |= 0x00000002u;
}
void MVCCScanRequest::clear_has_right_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVCCScanRequest::clear_right_key() {
  right_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_right_key();
}
 const ::std::string& MVCCScanRequest::right_key() const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCScanRequest.right_key)
  return right_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVCCScanRequest::set_right_key(const ::std::string& value) {
  set_has_right_key();
  right_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:azino.storage.MVCCScanRequest.right_key)
}
 void MVCCScanRequest::set_right_key(const char* value) {
  set_has_right_key();
  right_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:azino.storage.MVCCScanRequest.right_key)
}
 void MVCCScanRequest::set_right_key(const char* value, size_t size) {
  set_has_right_key();
  right_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:azino.storage.MVCCScanRequest.right_key)
}
 ::std::string* MVCCScanRequest::mutable_right_key() {
  set_has_right_key();
  // @@protoc_insertion_point(field_mutable:azino.storage.MVCCScanRequest.right_key)
  return right_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MVCCScanRequest::release_right_key() {
  // @@protoc_insertion_point(field_release:azino.storage.MVCCScanRequest.right_key)
  clear_has_right_key();
  return right_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVCCScanRequest::set_allocated_right_key(::std::string* right_key) {
  if (right_key != NULL) {
    set_has_right_key();
  } else {
    clear_has_right_key();
  }
  right_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right_key);
  // @@protoc_insertion_point(field_set_allocated:azino.storage.MVCCScanRequest.right_key)
}

// optional uint64 ts = 3;
bool MVCCScanRequest::has_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MVCCScanRequest::set_has_ts() {
  _has_bits_[0] |= 0x00000004u;
}
void MVCCScanRequest::clear_has_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
void MVCCScanRequest::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
 ::google::protobuf::uint64 MVCCScanRequest::ts() const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCScanRequest.ts)
  return ts_;
}
 void MVCCScanRequest::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:azino.storage.MVCCScanRequest.ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVCCScanResponse::kKeyFieldNumber;
const int MVCCScanResponse::kValueFieldNumber;
const int MVCCScanResponse::kStatusFieldNumber;
const int MVCCScanResponse::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVCCScanResponse::MVCCScanResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:azino.storage.MVCCScanResponse)
}

void MVCCScanResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::azino::storage::StorageStatus*>(&::azino::storage::StorageStatus::default_instance());
}

MVCCScanResponse::MVCCScanResponse(const MVCCScanResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:azino.storage.MVCCScanResponse)
}

void MVCCScanResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVCCScanResponse::~MVCCScanResponse() {
  // @@protoc_insertion_point(destructor:azino.storage.MVCCScanResponse)
  SharedDtor();
}

void MVCCScanResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void MVCCScanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVCCScanResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVCCScanResponse_descriptor_;
}

const MVCCScanResponse& MVCCScanResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fstorage_2fstorage_2eproto();
  return *default_instance_;
}

MVCCScanResponse* MVCCScanResponse::default_instance_ = NULL;

MVCCScanResponse* MVCCScanResponse::New(::google::protobuf::Arena* arena) const {
  MVCCScanResponse* n = new MVCCScanResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVCCScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:azino.storage.MVCCScanResponse)
  if (has_status()) {
    if (status_ != NULL) status_->::azino::storage::StorageStatus::Clear();
  }
  key_.Clear();
  value_.Clear();
  ts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MVCCScanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:azino.storage.MVCCScanResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string key = 1;
      case 1: {
        if (tag == 10) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key(this->key_size() - 1).data(),
            this->key(this->key_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.storage.MVCCScanResponse.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_key;
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value(this->value_size() - 1).data(),
            this->value(this->value_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "azino.storage.MVCCScanResponse.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }

      // optional .azino.storage.StorageStatus status = 3;
      case 3: {
        if (tag == 26) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ts;
        break;
      }

      // repeated uint64 ts = 4;
      case 4: {
        if (tag == 32) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_ts())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:azino.storage.MVCCScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:azino.storage.MVCCScanResponse)
  return false;
#undef DO_
}

void MVCCScanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:azino.storage.MVCCScanResponse)
  // repeated string key = 1;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key(i).data(), this->key(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCScanResponse.key");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(i), output);
  }

  // repeated string value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value(i).data(), this->value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCScanResponse.value");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(i), output);
  }

  // optional .azino.storage.StorageStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->status_, output);
  }

  // repeated uint64 ts = 4;
  for (int i = 0; i < this->ts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->ts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:azino.storage.MVCCScanResponse)
}

::google::protobuf::uint8* MVCCScanResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:azino.storage.MVCCScanResponse)
  // repeated string key = 1;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key(i).data(), this->key(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCScanResponse.key");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->key(i), target);
  }

  // repeated string value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value(i).data(), this->value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "azino.storage.MVCCScanResponse.value");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->value(i), target);
  }

  // optional .azino.storage.StorageStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->status_, false, target);
  }

  // repeated uint64 ts = 4;
  for (int i = 0; i < this->ts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->ts(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:azino.storage.MVCCScanResponse)
  return target;
}

int MVCCScanResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:azino.storage.MVCCScanResponse)
  int total_size = 0;

  // optional .azino.storage.StorageStatus status = 3;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // repeated string key = 1;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->key(i));
  }

  // repeated string value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value(i));
  }

  // repeated uint64 ts = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->ts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ts(i));
    }
    total_size += 1 * this->ts_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVCCScanResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:azino.storage.MVCCScanResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MVCCScanResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MVCCScanResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:azino.storage.MVCCScanResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:azino.storage.MVCCScanResponse)
    MergeFrom(*source);
  }
}

void MVCCScanResponse::MergeFrom(const MVCCScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:azino.storage.MVCCScanResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  key_.MergeFrom(from.key_);
  value_.MergeFrom(from.value_);
  ts_.MergeFrom(from.ts_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_status()) {
      mutable_status()->::azino::storage::StorageStatus::MergeFrom(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MVCCScanResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:azino.storage.MVCCScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVCCScanResponse::CopyFrom(const MVCCScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:azino.storage.MVCCScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVCCScanResponse::IsInitialized() const {

  return true;
}

void MVCCScanResponse::Swap(MVCCScanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVCCScanResponse::InternalSwap(MVCCScanResponse* other) {
  key_.UnsafeArenaSwap(&other->key_);
  value_.UnsafeArenaSwap(&other->value_);
  std::swap(status_, other->status_);
  ts_.UnsafeArenaSwap(&other->ts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVCCScanResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVCCScanResponse_descriptor_;
  metadata.reflection = MVCCScanResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVCCScanResponse

// repeated string key = 1;
int MVCCScanResponse::key_size() const {
  return key_.size();
}
void MVCCScanResponse::clear_key() {
  key_.Clear();
}
 const ::std::string& MVCCScanResponse::key(int index) const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCScanResponse.key)
  return key_.Get(index);
}
 ::std::string* MVCCScanResponse::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:azino.storage.MVCCScanResponse.key)
  return key_.Mutable(index);
}
 void MVCCScanResponse::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:azino.storage.MVCCScanResponse.key)
  key_.Mutable(index)->assign(value);
}
 void MVCCScanResponse::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:azino.storage.MVCCScanResponse.key)
}
 void MVCCScanResponse::set_key(int index, const char* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:azino.storage.MVCCScanResponse.key)
}
 ::std::string* MVCCScanResponse::add_key() {
  // @@protoc_insertion_point(field_add_mutable:azino.storage.MVCCScanResponse.key)
  return key_.Add();
}
 void MVCCScanResponse::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:azino.storage.MVCCScanResponse.key)
}
 void MVCCScanResponse::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:azino.storage.MVCCScanResponse.key)
}
 void MVCCScanResponse::add_key(const char* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:azino.storage.MVCCScanResponse.key)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MVCCScanResponse::key() const {
  // @@protoc_insertion_point(field_list:azino.storage.MVCCScanResponse.key)
  return key_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MVCCScanResponse::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:azino.storage.MVCCScanResponse.key)
  return &key_;
}

// repeated string value = 2;
int MVCCScanResponse::value_size() const {
  return value_.size();
}
void MVCCScanResponse::clear_value() {
  value_.Clear();
}
 const ::std::string& MVCCScanResponse::value(int index) const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCScanResponse.value)
  return value_.Get(index);
}
 ::std::string* MVCCScanResponse::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:azino.storage.MVCCScanResponse.value)
  return value_.Mutable(index);
}
 void MVCCScanResponse::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:azino.storage.MVCCScanResponse.value)
  value_.Mutable(index)->assign(value);
}
 void MVCCScanResponse::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:azino.storage.MVCCScanResponse.value)
}
 void MVCCScanResponse::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:azino.storage.MVCCScanResponse.value)
}
 ::std::string* MVCCScanResponse::add_value() {
  // @@protoc_insertion_point(field_add_mutable:azino.storage.MVCCScanResponse.value)
  return value_.Add();
}
 void MVCCScanResponse::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:azino.storage.MVCCScanResponse.value)
}
 void MVCCScanResponse::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:azino.storage.MVCCScanResponse.value)
}
 void MVCCScanResponse::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:azino.storage.MVCCScanResponse.value)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MVCCScanResponse::value() const {
  // @@protoc_insertion_point(field_list:azino.storage.MVCCScanResponse.value)
  return value_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MVCCScanResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:azino.storage.MVCCScanResponse.value)
  return &value_;
}

// optional .azino.storage.StorageStatus status = 3;
bool MVCCScanResponse::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MVCCScanResponse::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void MVCCScanResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void MVCCScanResponse::clear_status() {
  if (status_ != NULL) status_->::azino::storage::StorageStatus::Clear();
  clear_has_status();
}
const ::azino::storage::StorageStatus& MVCCScanResponse::status() const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCScanResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::azino::storage::StorageStatus* MVCCScanResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::azino::storage::StorageStatus;
  }
  // @@protoc_insertion_point(field_mutable:azino.storage.MVCCScanResponse.status)
  return status_;
}
::azino::storage::StorageStatus* MVCCScanResponse::release_status() {
  // @@protoc_insertion_point(field_release:azino.storage.MVCCScanResponse.status)
  clear_has_status();
  ::azino::storage::StorageStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void MVCCScanResponse::set_allocated_status(::azino::storage::StorageStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:azino.storage.MVCCScanResponse.status)
}

// repeated uint64 ts = 4;
int MVCCScanResponse::ts_size() const {
  return ts_.size();
}
void MVCCScanResponse::clear_ts() {
  ts_.Clear();
}
 ::google::protobuf::uint64 MVCCScanResponse::ts(int index) const {
  // @@protoc_insertion_point(field_get:azino.storage.MVCCScanResponse.ts)
  return ts_.Get(index);
}
 void MVCCScanResponse::set_ts(int index, ::google::protobuf::uint64 value) {
  ts_.Set(index, value);
  // @@protoc_insertion_point(field_set:azino.storage.MVCCScanResponse.ts)
}
 void MVCCScanResponse::add_ts(::google::protobuf::uint64 value) {
  ts_.Add(value);
  // @@protoc_insertion_point(field_add:azino.storage.MVCCScanResponse.ts)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
MVCCScanResponse::ts() const {
  // @@protoc_insertion_point(field_list:azino.storage.MVCCScanResponse.ts)
  return ts_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
MVCCScanResponse::mutable_ts() {
  // @@protoc_insertion_point(field_mutable_list:azino.storage.MVCCScanResponse.ts)
  return &ts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

StorageService::~StorageService() {}

const ::google::protobuf::ServiceDescriptor* StorageService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* StorageService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageService_descriptor_;
}

void StorageService::MVCCPut(::google::protobuf::RpcController* controller,
                         const ::azino::storage::MVCCPutRequest*,
                         ::azino::storage::MVCCPutResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MVCCPut() not implemented.");
  done->Run();
}

void StorageService::MVCCGet(::google::protobuf::RpcController* controller,
                         const ::azino::storage::MVCCGetRequest*,
                         ::azino::storage::MVCCGetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MVCCGet() not implemented.");
  done->Run();
}

void StorageService::MVCCDelete(::google::protobuf::RpcController* controller,
                         const ::azino::storage::MVCCDeleteRequest*,
                         ::azino::storage::MVCCDeleteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MVCCDelete() not implemented.");
  done->Run();
}

void StorageService::MVCCScan(::google::protobuf::RpcController* controller,
                         const ::azino::storage::MVCCScanRequest*,
                         ::azino::storage::MVCCScanResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MVCCScan() not implemented.");
  done->Run();
}

void StorageService::BatchStore(::google::protobuf::RpcController* controller,
                         const ::azino::storage::BatchStoreRequest*,
                         ::azino::storage::BatchStoreResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BatchStore() not implemented.");
  done->Run();
}

void StorageService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), StorageService_descriptor_);
  switch(method->index()) {
    case 0:
      MVCCPut(controller,
             ::google::protobuf::down_cast<const ::azino::storage::MVCCPutRequest*>(request),
             ::google::protobuf::down_cast< ::azino::storage::MVCCPutResponse*>(response),
             done);
      break;
    case 1:
      MVCCGet(controller,
             ::google::protobuf::down_cast<const ::azino::storage::MVCCGetRequest*>(request),
             ::google::protobuf::down_cast< ::azino::storage::MVCCGetResponse*>(response),
             done);
      break;
    case 2:
      MVCCDelete(controller,
             ::google::protobuf::down_cast<const ::azino::storage::MVCCDeleteRequest*>(request),
             ::google::protobuf::down_cast< ::azino::storage::MVCCDeleteResponse*>(response),
             done);
      break;
    case 3:
      MVCCScan(controller,
             ::google::protobuf::down_cast<const ::azino::storage::MVCCScanRequest*>(request),
             ::google::protobuf::down_cast< ::azino::storage::MVCCScanResponse*>(response),
             done);
      break;
    case 4:
      BatchStore(controller,
             ::google::protobuf::down_cast<const ::azino::storage::BatchStoreRequest*>(request),
             ::google::protobuf::down_cast< ::azino::storage::BatchStoreResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& StorageService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::azino::storage::MVCCPutRequest::default_instance();
    case 1:
      return ::azino::storage::MVCCGetRequest::default_instance();
    case 2:
      return ::azino::storage::MVCCDeleteRequest::default_instance();
    case 3:
      return ::azino::storage::MVCCScanRequest::default_instance();
    case 4:
      return ::azino::storage::BatchStoreRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& StorageService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::azino::storage::MVCCPutResponse::default_instance();
    case 1:
      return ::azino::storage::MVCCGetResponse::default_instance();
    case 2:
      return ::azino::storage::MVCCDeleteResponse::default_instance();
    case 3:
      return ::azino::storage::MVCCScanResponse::default_instance();
    case 4:
      return ::azino::storage::BatchStoreResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

StorageService_Stub::StorageService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
StorageService_Stub::StorageService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
StorageService_Stub::~StorageService_Stub() {
  if (owns_channel_) delete channel_;
}

void StorageService_Stub::MVCCPut(::google::protobuf::RpcController* controller,
                              const ::azino::storage::MVCCPutRequest* request,
                              ::azino::storage::MVCCPutResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void StorageService_Stub::MVCCGet(::google::protobuf::RpcController* controller,
                              const ::azino::storage::MVCCGetRequest* request,
                              ::azino::storage::MVCCGetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void StorageService_Stub::MVCCDelete(::google::protobuf::RpcController* controller,
                              const ::azino::storage::MVCCDeleteRequest* request,
                              ::azino::storage::MVCCDeleteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void StorageService_Stub::MVCCScan(::google::protobuf::RpcController* controller,
                              const ::azino::storage::MVCCScanRequest* request,
                              ::azino::storage::MVCCScanResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void StorageService_Stub::BatchStore(::google::protobuf::RpcController* controller,
                              const ::azino::storage::BatchStoreRequest* request,
                              ::azino::storage::BatchStoreResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace storage
}  // namespace azino

// @@protoc_insertion_point(global_scope)
