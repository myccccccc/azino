syntax="proto2";
package azino.storage;

import "service/kv.proto";

option cc_generic_services = true;

// needs to be consistent with the storage/include/status.h
message StorageStatus {
  enum Code {
    Ok = 0;
    NotFound = 1;
    Corruption = 2;
    NotSupported = 3;
    InvalidArgument = 4;
    IOError = 5;
  };
  optional Code error_code = 1 [default = Ok];
  optional string error_message = 2;
}

message PutRequest {
  optional string key = 1;
  optional string value = 2;
};

message PutResponse {
  optional StorageStatus status = 1;
};

message GetRequest {
  optional string key = 1;
};

message GetResponse {
  optional string value = 1;
  optional StorageStatus status = 2;
};

message DeleteRequest {
  optional string key = 1;
};

message DeleteResponse {
  optional StorageStatus status = 1;
};

message MVCCPutRequest {
  optional string key = 1;
  optional string value = 2;
  optional uint64 ts = 3;
};

message MVCCPutResponse {
  optional StorageStatus status = 1;
};

message MVCCGetRequest {
  optional string key = 1;
  optional uint64 ts = 2;
};

message MVCCGetResponse {
  optional string value = 1;
  optional StorageStatus status = 2;
  optional uint64 ts = 3;
};

message MVCCDeleteRequest {
  optional string key = 1;
  optional uint64 ts = 2;
};

message MVCCDeleteResponse {
  optional StorageStatus status = 1;
};

message MVCCStoreData{
  optional string key = 1;
  optional uint64 ts = 2;
  optional Value value = 3;

}

message MVCCBatchStoreRequest{
  repeated MVCCStoreData datas = 1;
};

message MVCCBatchStoreResponse {
  optional StorageStatus status = 1;
};

service StorageService {
  rpc Put(PutRequest) returns (PutResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc MVCCPut(MVCCPutRequest) returns (MVCCPutResponse);
  rpc MVCCGet(MVCCGetRequest) returns (MVCCGetResponse);
  rpc MVCCDelete(MVCCDeleteRequest) returns (MVCCDeleteResponse);
  rpc MVCCBatchStore(MVCCBatchStoreRequest) returns (MVCCBatchStoreResponse);
};
